#![allow(dead_code, mutable_transmutes, non_camel_case_types, non_snake_case, non_upper_case_globals, unused_assignments, unused_mut)]
pub type size_t = libc::c_ulong;
pub type C2RustUnnamed = libc::c_int;
pub const GSL_EOF: C2RustUnnamed = 32;
pub const GSL_ETOLG: C2RustUnnamed = 31;
pub const GSL_ETOLX: C2RustUnnamed = 30;
pub const GSL_ETOLF: C2RustUnnamed = 29;
pub const GSL_ENOPROGJ: C2RustUnnamed = 28;
pub const GSL_ENOPROG: C2RustUnnamed = 27;
pub const GSL_ETABLE: C2RustUnnamed = 26;
pub const GSL_ECACHE: C2RustUnnamed = 25;
pub const GSL_EUNIMPL: C2RustUnnamed = 24;
pub const GSL_EUNSUP: C2RustUnnamed = 23;
pub const GSL_EDIVERGE: C2RustUnnamed = 22;
pub const GSL_ESING: C2RustUnnamed = 21;
pub const GSL_ENOTSQR: C2RustUnnamed = 20;
pub const GSL_EBADLEN: C2RustUnnamed = 19;
pub const GSL_EROUND: C2RustUnnamed = 18;
pub const GSL_ELOSS: C2RustUnnamed = 17;
pub const GSL_EOVRFLW: C2RustUnnamed = 16;
pub const GSL_EUNDRFLW: C2RustUnnamed = 15;
pub const GSL_ETOL: C2RustUnnamed = 14;
pub const GSL_EBADTOL: C2RustUnnamed = 13;
pub const GSL_EZERODIV: C2RustUnnamed = 12;
pub const GSL_EMAXITER: C2RustUnnamed = 11;
pub const GSL_ERUNAWAY: C2RustUnnamed = 10;
pub const GSL_EBADFUNC: C2RustUnnamed = 9;
pub const GSL_ENOMEM: C2RustUnnamed = 8;
pub const GSL_ESANITY: C2RustUnnamed = 7;
pub const GSL_EFACTOR: C2RustUnnamed = 6;
pub const GSL_EFAILED: C2RustUnnamed = 5;
pub const GSL_EINVAL: C2RustUnnamed = 4;
pub const GSL_EFAULT: C2RustUnnamed = 3;
pub const GSL_ERANGE: C2RustUnnamed = 2;
pub const GSL_EDOM: C2RustUnnamed = 1;
pub const GSL_CONTINUE: C2RustUnnamed = -2;
pub const GSL_FAILURE: C2RustUnnamed = -1;
pub const GSL_SUCCESS: C2RustUnnamed = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct gsl_wavelet_type {
    pub name: *const libc::c_char,
    pub init: Option::<
        unsafe extern "C" fn(
            *mut *const libc::c_double,
            *mut *const libc::c_double,
            *mut *const libc::c_double,
            *mut *const libc::c_double,
            *mut size_t,
            *mut size_t,
            size_t,
        ) -> libc::c_int,
    >,
}
static mut h_4: [libc::c_double; 4] = [
    0.48296291314453414337487159986f64,
    0.83651630373780790557529378092f64,
    0.22414386804201338102597276224f64,
    -0.12940952255126038117444941881f64,
];
static mut g_4: [libc::c_double; 4] = [
    -0.12940952255126038117444941881f64,
    -0.22414386804201338102597276224f64,
    0.83651630373780790557529378092f64,
    -0.48296291314453414337487159986f64,
];
static mut h_6: [libc::c_double; 6] = [
    0.33267055295008261599851158914f64,
    0.80689150931109257649449360409f64,
    0.45987750211849157009515194215f64,
    -0.13501102001025458869638990670f64,
    -0.08544127388202666169281916918f64,
    0.03522629188570953660274066472f64,
];
static mut g_6: [libc::c_double; 6] = [
    0.03522629188570953660274066472f64,
    0.08544127388202666169281916918f64,
    -0.13501102001025458869638990670f64,
    -0.45987750211849157009515194215f64,
    0.80689150931109257649449360409f64,
    -0.33267055295008261599851158914f64,
];
static mut h_8: [libc::c_double; 8] = [
    0.23037781330889650086329118304f64,
    0.71484657055291564708992195527f64,
    0.63088076792985890788171633830f64,
    -0.02798376941685985421141374718f64,
    -0.18703481171909308407957067279f64,
    0.03084138183556076362721936253f64,
    0.03288301166688519973540751355f64,
    -0.01059740178506903210488320852f64,
];
static mut g_8: [libc::c_double; 8] = [
    -0.01059740178506903210488320852f64,
    -0.03288301166688519973540751355f64,
    0.03084138183556076362721936253f64,
    0.18703481171909308407957067279f64,
    -0.02798376941685985421141374718f64,
    -0.63088076792985890788171633830f64,
    0.71484657055291564708992195527f64,
    -0.23037781330889650086329118304f64,
];
static mut h_10: [libc::c_double; 10] = [
    0.16010239797419291448072374802f64,
    0.60382926979718967054011930653f64,
    0.72430852843777292772807124410f64,
    0.13842814590132073150539714634f64,
    -0.24229488706638203186257137947f64,
    -0.03224486958463837464847975506f64,
    0.07757149384004571352313048939f64,
    -0.00624149021279827427419051911f64,
    -0.01258075199908199946850973993f64,
    0.00333572528547377127799818342f64,
];
static mut g_10: [libc::c_double; 10] = [
    0.00333572528547377127799818342f64,
    0.01258075199908199946850973993f64,
    -0.00624149021279827427419051911f64,
    -0.07757149384004571352313048939f64,
    -0.03224486958463837464847975506f64,
    0.24229488706638203186257137947f64,
    0.13842814590132073150539714634f64,
    -0.72430852843777292772807124410f64,
    0.60382926979718967054011930653f64,
    -0.16010239797419291448072374802f64,
];
static mut h_12: [libc::c_double; 12] = [
    0.11154074335010946362132391724f64,
    0.49462389039845308567720417688f64,
    0.75113390802109535067893449844f64,
    0.31525035170919762908598965481f64,
    -0.22626469396543982007631450066f64,
    -0.12976686756726193556228960588f64,
    0.09750160558732304910234355254f64,
    0.02752286553030572862554083950f64,
    -0.03158203931748602956507908070f64,
    0.00055384220116149613925191840f64,
    0.00477725751094551063963597525f64,
    -0.00107730108530847956485262161f64,
];
static mut g_12: [libc::c_double; 12] = [
    -0.00107730108530847956485262161f64,
    -0.00477725751094551063963597525f64,
    0.00055384220116149613925191840f64,
    0.03158203931748602956507908070f64,
    0.02752286553030572862554083950f64,
    -0.09750160558732304910234355254f64,
    -0.12976686756726193556228960588f64,
    0.22626469396543982007631450066f64,
    0.31525035170919762908598965481f64,
    -0.75113390802109535067893449844f64,
    0.49462389039845308567720417688f64,
    -0.11154074335010946362132391724f64,
];
static mut h_14: [libc::c_double; 14] = [
    0.07785205408500917901996352196f64,
    0.39653931948191730653900039094f64,
    0.72913209084623511991694307034f64,
    0.46978228740519312247159116097f64,
    -0.14390600392856497540506836221f64,
    -0.22403618499387498263814042023f64,
    0.07130921926683026475087657050f64,
    0.08061260915108307191292248036f64,
    -0.03802993693501441357959206160f64,
    -0.01657454163066688065410767489f64,
    0.01255099855609984061298988603f64,
    0.00042957797292136652113212912f64,
    -0.00180164070404749091526826291f64,
    0.00035371379997452024844629584f64,
];
static mut g_14: [libc::c_double; 14] = [
    0.00035371379997452024844629584f64,
    0.00180164070404749091526826291f64,
    0.00042957797292136652113212912f64,
    -0.01255099855609984061298988603f64,
    -0.01657454163066688065410767489f64,
    0.03802993693501441357959206160f64,
    0.08061260915108307191292248036f64,
    -0.07130921926683026475087657050f64,
    -0.22403618499387498263814042023f64,
    0.14390600392856497540506836221f64,
    0.46978228740519312247159116097f64,
    -0.72913209084623511991694307034f64,
    0.39653931948191730653900039094f64,
    -0.07785205408500917901996352196f64,
];
static mut h_16: [libc::c_double; 16] = [
    0.05441584224310400995500940520f64,
    0.31287159091429997065916237551f64,
    0.67563073629728980680780076705f64,
    0.58535468365420671277126552005f64,
    -0.01582910525634930566738054788f64,
    -0.28401554296154692651620313237f64,
    0.00047248457391328277036059001f64,
    0.12874742662047845885702928751f64,
    -0.01736930100180754616961614887f64,
    -0.04408825393079475150676372324f64,
    0.01398102791739828164872293057f64,
    0.00874609404740577671638274325f64,
    -0.00487035299345157431042218156f64,
    -0.00039174037337694704629808036f64,
    0.00067544940645056936636954757f64,
    -0.00011747678412476953373062823f64,
];
static mut g_16: [libc::c_double; 16] = [
    -0.00011747678412476953373062823f64,
    -0.00067544940645056936636954757f64,
    -0.00039174037337694704629808036f64,
    0.00487035299345157431042218156f64,
    0.00874609404740577671638274325f64,
    -0.01398102791739828164872293057f64,
    -0.04408825393079475150676372324f64,
    0.01736930100180754616961614887f64,
    0.12874742662047845885702928751f64,
    -0.00047248457391328277036059001f64,
    -0.28401554296154692651620313237f64,
    0.01582910525634930566738054788f64,
    0.58535468365420671277126552005f64,
    -0.67563073629728980680780076705f64,
    0.31287159091429997065916237551f64,
    -0.05441584224310400995500940520f64,
];
static mut h_18: [libc::c_double; 18] = [
    0.03807794736387834658869765888f64,
    0.24383467461259035373204158165f64,
    0.60482312369011111190307686743f64,
    0.65728807805130053807821263905f64,
    0.13319738582500757619095494590f64,
    -0.29327378327917490880640319524f64,
    -0.09684078322297646051350813354f64,
    0.14854074933810638013507271751f64,
    0.03072568147933337921231740072f64,
    -0.06763282906132997367564227483f64,
    0.00025094711483145195758718975f64,
    0.02236166212367909720537378270f64,
    -0.00472320475775139727792570785f64,
    -0.00428150368246342983449679500f64,
    0.00184764688305622647661912949f64,
    0.00023038576352319596720521639f64,
    -0.00025196318894271013697498868f64,
    0.00003934732031627159948068988f64,
];
static mut g_18: [libc::c_double; 18] = [
    0.00003934732031627159948068988f64,
    0.00025196318894271013697498868f64,
    0.00023038576352319596720521639f64,
    -0.00184764688305622647661912949f64,
    -0.00428150368246342983449679500f64,
    0.00472320475775139727792570785f64,
    0.02236166212367909720537378270f64,
    -0.00025094711483145195758718975f64,
    -0.06763282906132997367564227483f64,
    -0.03072568147933337921231740072f64,
    0.14854074933810638013507271751f64,
    0.09684078322297646051350813354f64,
    -0.29327378327917490880640319524f64,
    -0.13319738582500757619095494590f64,
    0.65728807805130053807821263905f64,
    -0.60482312369011111190307686743f64,
    0.24383467461259035373204158165f64,
    -0.03807794736387834658869765888f64,
];
static mut h_20: [libc::c_double; 20] = [
    0.02667005790055555358661744877f64,
    0.18817680007769148902089297368f64,
    0.52720118893172558648174482796f64,
    0.68845903945360356574187178255f64,
    0.28117234366057746074872699845f64,
    -0.24984642432731537941610189792f64,
    -0.19594627437737704350429925432f64,
    0.12736934033579326008267723320f64,
    0.09305736460357235116035228984f64,
    -0.07139414716639708714533609308f64,
    -0.02945753682187581285828323760f64,
    0.03321267405934100173976365318f64,
    0.00360655356695616965542329142f64,
    -0.01073317548333057504431811411f64,
    0.00139535174705290116578931845f64,
    0.00199240529518505611715874224f64,
    -0.00068585669495971162656137098f64,
    -0.00011646685512928545095148097f64,
    0.00009358867032006959133405013f64,
    -0.00001326420289452124481243668f64,
];
static mut g_20: [libc::c_double; 20] = [
    -0.00001326420289452124481243668f64,
    -0.00009358867032006959133405013f64,
    -0.00011646685512928545095148097f64,
    0.00068585669495971162656137098f64,
    0.00199240529518505611715874224f64,
    -0.00139535174705290116578931845f64,
    -0.01073317548333057504431811411f64,
    -0.00360655356695616965542329142f64,
    0.03321267405934100173976365318f64,
    0.02945753682187581285828323760f64,
    -0.07139414716639708714533609308f64,
    -0.09305736460357235116035228984f64,
    0.12736934033579326008267723320f64,
    0.19594627437737704350429925432f64,
    -0.24984642432731537941610189792f64,
    -0.28117234366057746074872699845f64,
    0.68845903945360356574187178255f64,
    -0.52720118893172558648174482796f64,
    0.18817680007769148902089297368f64,
    -0.02667005790055555358661744877f64,
];
unsafe extern "C" fn daubechies_init(
    mut h1: *mut *const libc::c_double,
    mut g1: *mut *const libc::c_double,
    mut h2: *mut *const libc::c_double,
    mut g2: *mut *const libc::c_double,
    mut nc: *mut size_t,
    mut offset: *mut size_t,
    mut member: size_t,
) -> libc::c_int {
    match member {
        4 => {
            *h1 = h_4.as_ptr();
            *g1 = g_4.as_ptr();
            *h2 = h_4.as_ptr();
            *g2 = g_4.as_ptr();
        }
        6 => {
            *h1 = h_6.as_ptr();
            *g1 = g_6.as_ptr();
            *h2 = h_6.as_ptr();
            *g2 = g_6.as_ptr();
        }
        8 => {
            *h1 = h_8.as_ptr();
            *g1 = g_8.as_ptr();
            *h2 = h_8.as_ptr();
            *g2 = g_8.as_ptr();
        }
        10 => {
            *h1 = h_10.as_ptr();
            *g1 = g_10.as_ptr();
            *h2 = h_10.as_ptr();
            *g2 = g_10.as_ptr();
        }
        12 => {
            *h1 = h_12.as_ptr();
            *g1 = g_12.as_ptr();
            *h2 = h_12.as_ptr();
            *g2 = g_12.as_ptr();
        }
        14 => {
            *h1 = h_14.as_ptr();
            *g1 = g_14.as_ptr();
            *h2 = h_14.as_ptr();
            *g2 = g_14.as_ptr();
        }
        16 => {
            *h1 = h_16.as_ptr();
            *g1 = g_16.as_ptr();
            *h2 = h_16.as_ptr();
            *g2 = g_16.as_ptr();
        }
        18 => {
            *h1 = h_18.as_ptr();
            *g1 = g_18.as_ptr();
            *h2 = h_18.as_ptr();
            *g2 = g_18.as_ptr();
        }
        20 => {
            *h1 = h_20.as_ptr();
            *g1 = g_20.as_ptr();
            *h2 = h_20.as_ptr();
            *g2 = g_20.as_ptr();
        }
        _ => return GSL_FAILURE as libc::c_int,
    }
    *nc = member;
    *offset = 0 as libc::c_int as size_t;
    return GSL_SUCCESS as libc::c_int;
}
unsafe extern "C" fn daubechies_centered_init(
    mut h1: *mut *const libc::c_double,
    mut g1: *mut *const libc::c_double,
    mut h2: *mut *const libc::c_double,
    mut g2: *mut *const libc::c_double,
    mut nc: *mut size_t,
    mut offset: *mut size_t,
    mut member: size_t,
) -> libc::c_int {
    match member {
        4 => {
            *h1 = h_4.as_ptr();
            *g1 = g_4.as_ptr();
            *h2 = h_4.as_ptr();
            *g2 = g_4.as_ptr();
        }
        6 => {
            *h1 = h_6.as_ptr();
            *g1 = g_6.as_ptr();
            *h2 = h_6.as_ptr();
            *g2 = g_6.as_ptr();
        }
        8 => {
            *h1 = h_8.as_ptr();
            *g1 = g_8.as_ptr();
            *h2 = h_8.as_ptr();
            *g2 = g_8.as_ptr();
        }
        10 => {
            *h1 = h_10.as_ptr();
            *g1 = g_10.as_ptr();
            *h2 = h_10.as_ptr();
            *g2 = g_10.as_ptr();
        }
        12 => {
            *h1 = h_12.as_ptr();
            *g1 = g_12.as_ptr();
            *h2 = h_12.as_ptr();
            *g2 = g_12.as_ptr();
        }
        14 => {
            *h1 = h_14.as_ptr();
            *g1 = g_14.as_ptr();
            *h2 = h_14.as_ptr();
            *g2 = g_14.as_ptr();
        }
        16 => {
            *h1 = h_16.as_ptr();
            *g1 = g_16.as_ptr();
            *h2 = h_16.as_ptr();
            *g2 = g_16.as_ptr();
        }
        18 => {
            *h1 = h_18.as_ptr();
            *g1 = g_18.as_ptr();
            *h2 = h_18.as_ptr();
            *g2 = g_18.as_ptr();
        }
        20 => {
            *h1 = h_20.as_ptr();
            *g1 = g_20.as_ptr();
            *h2 = h_20.as_ptr();
            *g2 = g_20.as_ptr();
        }
        _ => return GSL_FAILURE as libc::c_int,
    }
    *nc = member;
    *offset = member >> 1 as libc::c_int;
    return GSL_SUCCESS as libc::c_int;
}
static mut daubechies_type: gsl_wavelet_type = {
    let mut init = gsl_wavelet_type {
        name: b"daubechies\0" as *const u8 as *const libc::c_char,
        init: Some(
            daubechies_init
                as unsafe extern "C" fn(
                    *mut *const libc::c_double,
                    *mut *const libc::c_double,
                    *mut *const libc::c_double,
                    *mut *const libc::c_double,
                    *mut size_t,
                    *mut size_t,
                    size_t,
                ) -> libc::c_int,
        ),
    };
    init
};
static mut daubechies_centered_type: gsl_wavelet_type = {
    let mut init = gsl_wavelet_type {
        name: b"daubechies-centered\0" as *const u8 as *const libc::c_char,
        init: Some(
            daubechies_centered_init
                as unsafe extern "C" fn(
                    *mut *const libc::c_double,
                    *mut *const libc::c_double,
                    *mut *const libc::c_double,
                    *mut *const libc::c_double,
                    *mut size_t,
                    *mut size_t,
                    size_t,
                ) -> libc::c_int,
        ),
    };
    init
};
#[no_mangle]
pub static mut gsl_wavelet_daubechies: *const gsl_wavelet_type = unsafe {
    &daubechies_type as *const gsl_wavelet_type
};
#[no_mangle]
pub static mut gsl_wavelet_daubechies_centered: *const gsl_wavelet_type = unsafe {
    &daubechies_centered_type as *const gsl_wavelet_type
};
