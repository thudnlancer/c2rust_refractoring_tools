use std::f64::consts::{SQRT_2, EPSILON};
use std::f64;

#[derive(Debug, Clone, Copy)]
pub struct SfResult {
    pub val: f64,
    pub err: f64,
}

impl SfResult {
    pub fn new(val: f64, err: f64) -> Self {
        SfResult { val, err }
    }
}

#[derive(Debug, Clone, Copy)]
struct ChebSeries {
    data: &'static [f64],
    order: usize,
    a: f64,
    b: f64,
    order_sp: usize,
}

const DAW_DATA: [f64; 21] = [
    -0.6351734375145949201065127736293e-02,
    -0.2294071479677386939899824125866e+00,
    0.2213050093908476441683979161786e-01,
    -0.1549265453892985046743057753375e-02,
    0.8497327715684917456777542948066e-04,
    -0.3828266270972014924994099521309e-05,
    0.1462854806250163197757148949539e-06,
    -0.4851982381825991798846715425114e-08,
    0.1421463577759139790347568183304e-09,
    -0.3728836087920596525335493054088e-11,
    0.8854942961778203370194565231369e-13,
    -0.1920757131350206355421648417493e-14,
    0.3834325867246327588241074439253e-16,
    -0.7089154168175881633584099327999e-18,
    0.1220552135889457674416901120000e-19,
    -0.1966204826605348760299451733333e-21,
    0.2975845541376597189113173333333e-23,
    -0.4247069514800596951039999999999e-25,
    0.5734270767391742798506666666666e-27,
    -0.7345836823178450261333333333333e-29,
    0.8951937667516552533333333333333e-31,
];

const DAW2_DATA: [f64; 45] = [
    -0.56886544105215527114160533733674e-01,
    -0.31811346996168131279322878048822e+00,
    0.20873845413642236789741580198858e+00,
    -0.12475409913779131214073498314784e+00,
    0.67869305186676777092847516423676e-01,
    -0.33659144895270939503068230966587e-01,
    0.15260781271987971743682460381640e-01,
    -0.63483709625962148230586094788535e-02,
    0.24326740920748520596865966109343e-02,
    -0.86219541491065032038526983549637e-03,
    0.28376573336321625302857636538295e-03,
    -0.87057549874170423699396581464335e-04,
    0.24986849985481658331800044137276e-04,
    -0.67319286764160294344603050339520e-05,
    0.17078578785573543710504524047844e-05,
    -0.40917551226475381271896592490038e-06,
    0.92828292216755773260751785312273e-07,
    -0.19991403610147617829845096332198e-07,
    0.40963490644082195241210487868917e-08,
    -0.80032409540993168075706781753561e-09,
    0.14938503128761465059143225550110e-09,
    -0.26687999885622329284924651063339e-10,
    0.45712216985159458151405617724103e-11,
    -0.75187305222043565872243727326771e-12,
    0.11893100052629681879029828987302e-12,
    -0.18116907933852346973490318263084e-13,
    0.26611733684358969193001612199626e-14,
    -0.37738863052129419795444109905930e-15,
    0.51727953789087172679680082229329e-16,
    -0.68603684084077500979419564670102e-17,
    0.88123751354161071806469337321745e-18,
    -0.10974248249996606292106299624652e-18,
    0.13261199326367178513595545891635e-19,
    -0.15562732768137380785488776571562e-20,
    0.17751425583655720607833415570773e-21,
    -0.19695006967006578384953608765439e-22,
    0.21270074896998699661924010120533e-23,
    -0.22375398124627973794182113962666e-24,
    0.22942768578582348946971383125333e-25,
    -0.22943788846552928693329592319999e-26,
    0.22391702100592453618342297600000e-27,
    -0.21338230616608897703678225066666e-28,
    0.19866196585123531518028458666666e-29,
    -0.18079295866694391771955199999999e-30,
    0.16090686015283030305450666666666e-31,
];

const DAWA_DATA: [f64; 75] = [
    0.1690485637765703755422637438849e-01,
    0.8683252278406957990536107850768e-02,
    0.2424864042417715453277703459889e-03,
    0.1261182399572690001651949240377e-04,
    0.1066453314636176955705691125906e-05,
    0.1358159794790727611348424505728e-06,
    0.2171042356577298398904312744743e-07,
    0.2867010501805295270343676804813e-08,
    -0.1901336393035820112282492378024e-09,
    -0.3097780484395201125532065774268e-09,
    -0.1029414876057509247398132286413e-09,
    -0.6260356459459576150417587283121e-11,
    0.8563132497446451216262303166276e-11,
    0.3033045148075659292976266276257e-11,
    -0.2523618306809291372630886938826e-12,
    -0.4210604795440664513175461934510e-12,
    -0.4431140826646238312143429452036e-13,
    0.4911210272841205205940037065117e-13,
    0.1235856242283903407076477954739e-13,
    -0.5788733199016569246955765071069e-14,
    -0.2282723294807358620978183957030e-14,
    0.7637149411014126476312362917590e-15,
    0.3851546883566811728777594002095e-15,
    -0.1199932056928290592803237283045e-15,
    -0.6313439150094572347334270285250e-16,
    0.2239559965972975375254912790237e-16,
    0.9987925830076495995132891200749e-17,
    -0.4681068274322495334536246507252e-17,
    -0.1436303644349721337241628751534e-17,
    0.1020822731410541112977908032130e-17,
    0.1538908873136092072837389822372e-18,
    -0.2189157877645793888894790926056e-18,
    0.2156879197938651750392359152517e-20,
    0.4370219827442449851134792557395e-19,
    -0.8234581460977207241098927905177e-20,
    -0.7498648721256466222903202835420e-20,
    0.3282536720735671610957612930039e-20,
    0.8858064309503921116076561515151e-21,
    -0.9185087111727002988094460531485e-21,
    0.2978962223788748988314166045791e-22,
    0.1972132136618471883159505468041e-21,
    -0.5974775596362906638089584995117e-22,
    -0.2834410031503850965443825182441e-22,
    0.2209560791131554514777150489012e-22,
    -0.5439955741897144300079480307711e-25,
    -0.5213549243294848668017136696470e-23,
    0.1702350556813114199065671499076e-23,
    0.6917400860836148343022185660197e-24,
    -0.6540941793002752512239445125802e-24,
    0.6093576580439328960371824654636e-25,
    0.1408070432905187461501945080272e-24,
    -0.6785886121054846331167674943755e-25,
    -0.9799732036214295711741583102225e-26,
    0.2121244903099041332598960939160e-25,
    -0.5954455022548790938238802154487e-26,
    -0.3093088861875470177838847232049e-26,
    0.2854389216344524682400691986104e-26,
    -0.3951289447379305566023477271811e-27,
    -0.5906000648607628478116840894453e-27,
    0.3670236964668687003647889980609e-27,
    -0.4839958238042276256598303038941e-29,
    -0.9799265984210443869597404017022e-28,
    0.4684773732612130606158908804300e-28,
    0.5030877696993461051647667603155e-29,
    -0.1547395051706028239247552068295e-28,
    0.6112180185086419243976005662714e-29,
    0.1357913399124811650343602736158e-29,
    -0.2417687752768673088385304299044e-29,
    0.8369074582074298945292887587291e-30,
    0.2665413042788979165838319401566e-30,
    -0.3811653692354890336935691003712e-30,
    0.1230054721884951464371706872585e-30,
    0.4622506399041493508805536929983e-31,
    -0.6120087296881677722911435593001e-31,
    0.1966024640193164686956230217896e-31,
];

const DAW_CS: ChebSeries = ChebSeries {
    data: &DAW_DATA,
    order: 15,
    a: -1.0,
    b: 1.0,
    order_sp: 9,
};

const DAW2_CS: ChebSeries = ChebSeries {
    data: &DAW2_DATA,
    order: 32,
    a: -1.0,
    b: 1.0,
    order_sp: 21,
};

const DAWA_CS: ChebSeries = ChebSeries {
    data: &DAWA_DATA,
    order: 34,
    a: -1.0,
    b: 1.0,
    order_sp: 12,
};

fn cheb_eval_e(cs: &ChebSeries, x: f64) -> SfResult {
    let d = 0.0;
    let dd = 0.0;
    let y = (2.0 * x - cs.a - cs.b) / (cs.b - cs.a);
    let y2 = 2.0 * y;
    let mut e = 0.0;
    let mut val = 0.0;

    for j in (1..=cs.order).rev() {
        let temp = d;
        d = y2 * d - dd + cs.data[j];
        e += (y2 * temp).abs() + dd.abs() + cs.data[j].abs();
        dd = temp;
    }

    let temp = d;
    d = y * d - dd + 0.5 * cs.data[0];
    e += (y * temp).abs() + dd.abs() + 0.5 * cs.data[0].abs();

    SfResult::new(d, f64::EPSILON * e + cs.data[cs.order].abs())
}

pub fn gsl_sf_dawson_e(x: f64) -> Result<SfResult, &'static str> {
    let xsml = 1.225 * f64::EPSILON.sqrt();
    let xbig = 1.0 / (SQRT_2 * f64::EPSILON.sqrt());
    let xmax = 0.1 * f64::MAX;

    let y = x.abs();

    if y < xsml {
        Ok(SfResult::new(x, 0.0))
    } else if y < 1.0 {
        let result_c = cheb_eval_e(&DAW_CS, 2.0 * y * y - 1.0);
        let val = x * (0.75 + result_c.val);
        let err = y * result_c.err + 2.0 * f64::EPSILON * val.abs();
        Ok(SfResult::new(val, err))
    } else if y < 4.0 {
        let result_c = cheb_eval_e(&DAW2_CS, 0.125 * y * y - 1.0);
        let val = x * (0.25 + result_c.val);
        let err = y * result_c.err + 2.0 * f64::EPSILON * val.abs();
        Ok(SfResult::new(val, err))
    } else if y < xbig {
        let result_c = cheb_eval_e(&DAWA_CS, 32.0 / (y * y) - 1.0);
        let val = (0.5 + result_c.val) / x;
        let err = result_c.err / y + 2.0 * f64::EPSILON * val.abs();
        Ok(SfResult::new(val, err))
    } else if y < xmax {
        let val = 0.5 / x;
        Ok(SfResult::new(val, 2.0 * f64::EPSILON * val))
    } else {
        Err("Underflow error")
    }
}

pub fn gsl_sf_dawson(x: f64) -> f64 {
    match gsl_sf_dawson_e(x) {
        Ok(result) => result.val,
        Err(_) => 0.0,
    }
}