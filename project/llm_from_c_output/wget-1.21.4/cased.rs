/* DO NOT EDIT! GENERATED AUTOMATICALLY! */
/* Casing Properties of Unicode characters. */
/* Generated automatically by gen-uni-tables.c for Unicode 15.0.0. */

/* Copyright (C) 2000-2022 Free Software Foundation, Inc.

   This file is free software.
   It is dual-licensed under "the GNU LGPLv3+ or the GNU GPLv2+".
   You can redistribute it and/or modify it under either
     - the terms of the GNU Lesser General Public License as published
       by the Free Software Foundation, either version 3, or (at your
       option) any later version, or
     - the terms of the GNU General Public License as published by the
       Free Software Foundation; either version 2, or (at your option)
       any later version, or
     - the same dual license "the GNU LGPLv3+ or the GNU GPLv2+".

   This file is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License and the GNU General Public License
   for more details.

   You should have received a copy of the GNU Lesser General Public
   License and of the GNU General Public License along with this
   program.  If not, see <https://www.gnu.org/licenses/>. */

const HEADER_0: usize = 16;
const HEADER_2: usize = 9;
const HEADER_3: usize = 127;
const HEADER_4: usize = 15;

static U_CASING_PROPERTY_CASED: CasingProperty = CasingProperty {
    header: [2],
    level1: [
        3 * std::mem::size_of::<i32>() / std::mem::size_of::<i16>() + 0,
        3 * std::mem::size_of::<i32>() / std::mem::size_of::<i16>() + 128,
    ],
    level2: [
        3 + 256 * std::mem::size_of::<i16>() / std::mem::size_of::<i32>() + 0,
        3 + 256 * std::mem::size_of::<i16>() / std::mem::size_of::<i32>() + 16,
        3 + 256 * std::mem::size_of::<i16>() / std::mem::size_of::<i32>() + 32,
        -1,
        -1,
        -1,
        -1,
        -1,
        3 + 256 * std::mem::size_of::<i16>() / std::mem::size_of::<i32>() + 48,
        3 + 256 * std::mem::size_of::<i16>() / std::mem::size_of::<i32>() + 64,
        -1,
        -1,
        -1,
        -1,
        3 + 256 * std::mem::size_of::<i16>() / std::mem::size_of::<i32>() + 80,
        3 + 256 * std::mem::size_of::<i16>() / std::mem::size_of::<i32>() + 96,
        3 + 256 * std::mem::size_of::<i16>() / std::mem::size_of::<i32>() + 112,
        -1,
        3 + 256 * std::mem::size_of::<i16>() / std::mem::size_of::<i32>() + 128,
        -1,
        -1,
        -1,
        3 + 256 * std::mem::size_of::<i16>() / std::mem::size_of::<i32>() + 144,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        3 + 256 * std::mem::size_of::<i16>() / std::mem::size_of::<i32>() + 160,
        -1,
        3 + 256 * std::mem::size_of::<i16>() / std::mem::size_of::<i32>() + 176,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        3 + 256 * std::mem::size_of::<i16>() / std::mem::size_of::<i32>() + 192,
        -1,
        3 + 256 * std::mem::size_of::<i16>() / std::mem::size_of::<i32>() + 208,
        -1,
        -1,
        3 + 256 * std::mem::size_of::<i16>() / std::mem::size_of::<i32>() + 224,
        3 + 256 * std::mem::size_of::<i16>() / std::mem::size_of::<i32>() + 240,
        -1,
        -1,
        3 + 256 * std::mem::size_of::<i16>() / std::mem::size_of::<i32>() + 256,
        -1,
        -1,
        -1,
        -1,
        -1,
        3 + 256 * std::mem::size_of::<i16>() / std::mem::size_of::<i32>() + 272,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        3 + 256 * std::mem::size_of::<i16>() / std::mem::size_of::<i32>() + 288,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        3 + 256 * std::mem::size_of::<i16>() / std::mem::size_of::<i32>() + 304,
        3 + 256 * std::mem::size_of::<i16>() / std::mem::size_of::<i32>() + 320,
        -1,
        -1,
        -1,
        3 + 256 * std::mem::size_of::<i16>() / std::mem::size_of::<i32>() + 336,
        3 + 256 * std::mem::size_of::<i16>() / std::mem::size_of::<i32>() + 352,
        -1,
        -1,
        -1,
        3 + 256 * std::mem::size_of::<i16>() / std::mem::size_of::<i32>() + 368,
        -1,
        -1,
        -1,
        3 + 256 * std::mem::size_of::<i16>() / std::mem::size_of::<i32>() + 384,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    ],
    level3: [
        0x00000000, 0x00000000, 0x07FFFFFE, 0x07FFFFFE,
        0x00000000, 0x04200400, 0xFF7FFFFF, 0xFF7FFFFF,
        0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
        0xFFFFFFFF, 0xF7FFFFFF, 0xFFFFFFF0, 0xFFFFFFFF,
        0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
        0xFFEFFFFF, 0x01FFFFFF, 0x00000003, 0x0000001F,
        0x00000000, 0x00000000, 0x00000020, 0xBCCF0000,
        0xFFFFD740, 0xFFFFFFFB, 0xFFFFFFFF, 0xFFBFFFFF,
        0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
        0xFFFFFC03, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
        0xFFFFFFFF, 0xFFFEFFFF, 0x007FFFFF, 0xFFFFFFFF,
        0x000001FF, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0xFFFFFFFF, 0xFFFF20BF, 0xF7FFFFFF,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0xFFFFFFFF, 0xFFFFFFFF, 0x3F3FFFFF,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0xFFFF01FF, 0xE7FFFFFF, 0x00000000, 0x00000000,
        0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
        0xFFFFFFFF, 0xFFFFFFFF, 0x00000000, 0x00000000,
        0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
        0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
        0x3F3FFFFF, 0xFFFFFFFF, 0xAAFF3F3F, 0x3FFFFFFF,
        0xFFFFFFFF, 0x5FDFFFFF, 0x0FCF1FDC, 0x1FDC1FFF,
        0x00000000, 0x00000000, 0x00000000, 0x80020000,
        0x1FFF0000, 0x00000000, 0x00000000, 0x00000000,
        0x3E2FFC84, 0xF21FBD50, 0x000043E0, 0xFFFFFFFF,
        0x00000018, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0xFFC00000, 0xFFFFFFFF, 0x000003FF,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
        0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x000C781F,
        0xFFFFFFFF, 0x000020BF, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0xFFFFFFFF, 0x00003FFF,
        0x3FFFFFFF, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0xFFFFFFFC, 0xFFFFFFFF, 0xFFFFFFFF,
        0xFFFF78FF, 0xFFFFFFFF, 0x03EB07FF, 0x077C0000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0xFFFF0000, 0xF7FFFFFF, 0xFFFF03FF,
        0xFFFFFFFF, 0xFFFFFFFF, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00F8007F, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x07FFFFFE, 0x07FFFFFE, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0xFFFFFFFF, 0xFFFFFFFF, 0x0000FFFF, 0x00000000,
        0x00000000, 0xFFFF0000, 0xFF0FFFFF, 0x0FFFFFFF,
        0x00000000, 0x00000000, 0x00000000, 0xF7FF0000,
        0xFFB7F7FF, 0x1BFBFFFB, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0xFFFFFFB9, 0x07FDFFFF, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0xFFFFFFFF, 0x0007FFFF, 0xFFFFFFFF, 0x0007FFFF,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000,
        0x00000000, 0x00000000, 0x000