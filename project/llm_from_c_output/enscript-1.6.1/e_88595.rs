/*
 * AFM 88595 encoding.
 *
 * This file is automatically generated from file `88595.txt'.  If you
 * have any corrections to this file, please, edit file `88595.txt' instead.
 */

/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; see the file COPYING.  If not, write to
 * the Free Software Foundation, 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

#[derive(Debug, Clone, Copy)]
pub enum AfmEncoding {
    None,
    Named(&'static str),
}

#[derive(Debug, Clone, Copy)]
pub struct AfmEncodingTable {
    pub code: i32,
    pub encoding: AfmEncoding,
}

pub const AFM_88595_ENCODING: &[AfmEncodingTable] = &[
    AfmEncodingTable { code: 0x00, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x01, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x02, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x03, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x04, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x05, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x06, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x07, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x08, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x09, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x0a, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x0b, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x0c, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x0d, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x0e, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x0f, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x10, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x11, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x12, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x13, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x14, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x15, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x16, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x17, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x18, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x19, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x1a, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x1b, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x1c, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x1d, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x1e, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x1f, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x20, encoding: AfmEncoding::Named("space") },
    AfmEncodingTable { code: 0x21, encoding: AfmEncoding::Named("exclam") },
    AfmEncodingTable { code: 0x22, encoding: AfmEncoding::Named("quotedbl") },
    AfmEncodingTable { code: 0x23, encoding: AfmEncoding::Named("numbersign") },
    AfmEncodingTable { code: 0x24, encoding: AfmEncoding::Named("dollar") },
    AfmEncodingTable { code: 0x25, encoding: AfmEncoding::Named("percent") },
    AfmEncodingTable { code: 0x26, encoding: AfmEncoding::Named("ampersand") },
    AfmEncodingTable { code: 0x27, encoding: AfmEncoding::Named("quoteright") },
    AfmEncodingTable { code: 0x28, encoding: AfmEncoding::Named("parenleft") },
    AfmEncodingTable { code: 0x29, encoding: AfmEncoding::Named("parenright") },
    AfmEncodingTable { code: 0x2a, encoding: AfmEncoding::Named("asterisk") },
    AfmEncodingTable { code: 0x2b, encoding: AfmEncoding::Named("plus") },
    AfmEncodingTable { code: 0x2c, encoding: AfmEncoding::Named("comma") },
    AfmEncodingTable { code: 0x2d, encoding: AfmEncoding::Named("minus") },
    AfmEncodingTable { code: 0x2e, encoding: AfmEncoding::Named("period") },
    AfmEncodingTable { code: 0x2f, encoding: AfmEncoding::Named("slash") },
    AfmEncodingTable { code: 0x30, encoding: AfmEncoding::Named("zero") },
    AfmEncodingTable { code: 0x31, encoding: AfmEncoding::Named("one") },
    AfmEncodingTable { code: 0x32, encoding: AfmEncoding::Named("two") },
    AfmEncodingTable { code: 0x33, encoding: AfmEncoding::Named("three") },
    AfmEncodingTable { code: 0x34, encoding: AfmEncoding::Named("four") },
    AfmEncodingTable { code: 0x35, encoding: AfmEncoding::Named("five") },
    AfmEncodingTable { code: 0x36, encoding: AfmEncoding::Named("six") },
    AfmEncodingTable { code: 0x37, encoding: AfmEncoding::Named("seven") },
    AfmEncodingTable { code: 0x38, encoding: AfmEncoding::Named("eight") },
    AfmEncodingTable { code: 0x39, encoding: AfmEncoding::Named("nine") },
    AfmEncodingTable { code: 0x3a, encoding: AfmEncoding::Named("colon") },
    AfmEncodingTable { code: 0x3b, encoding: AfmEncoding::Named("semicolon") },
    AfmEncodingTable { code: 0x3c, encoding: AfmEncoding::Named("less") },
    AfmEncodingTable { code: 0x3d, encoding: AfmEncoding::Named("equal") },
    AfmEncodingTable { code: 0x3e, encoding: AfmEncoding::Named("greater") },
    AfmEncodingTable { code: 0x3f, encoding: AfmEncoding::Named("question") },
    AfmEncodingTable { code: 0x40, encoding: AfmEncoding::Named("at") },
    AfmEncodingTable { code: 0x41, encoding: AfmEncoding::Named("A") },
    AfmEncodingTable { code: 0x42, encoding: AfmEncoding::Named("B") },
    AfmEncodingTable { code: 0x43, encoding: AfmEncoding::Named("C") },
    AfmEncodingTable { code: 0x44, encoding: AfmEncoding::Named("D") },
    AfmEncodingTable { code: 0x45, encoding: AfmEncoding::Named("E") },
    AfmEncodingTable { code: 0x46, encoding: AfmEncoding::Named("F") },
    AfmEncodingTable { code: 0x47, encoding: AfmEncoding::Named("G") },
    AfmEncodingTable { code: 0x48, encoding: AfmEncoding::Named("H") },
    AfmEncodingTable { code: 0x49, encoding: AfmEncoding::Named("I") },
    AfmEncodingTable { code: 0x4a, encoding: AfmEncoding::Named("J") },
    AfmEncodingTable { code: 0x4b, encoding: AfmEncoding::Named("K") },
    AfmEncodingTable { code: 0x4c, encoding: AfmEncoding::Named("L") },
    AfmEncodingTable { code: 0x4d, encoding: AfmEncoding::Named("M") },
    AfmEncodingTable { code: 0x4e, encoding: AfmEncoding::Named("N") },
    AfmEncodingTable { code: 0x4f, encoding: AfmEncoding::Named("O") },
    AfmEncodingTable { code: 0x50, encoding: AfmEncoding::Named("P") },
    AfmEncodingTable { code: 0x51, encoding: AfmEncoding::Named("Q") },
    AfmEncodingTable { code: 0x52, encoding: AfmEncoding::Named("R") },
    AfmEncodingTable { code: 0x53, encoding: AfmEncoding::Named("S") },
    AfmEncodingTable { code: 0x54, encoding: AfmEncoding::Named("T") },
    AfmEncodingTable { code: 0x55, encoding: AfmEncoding::Named("U") },
    AfmEncodingTable { code: 0x56, encoding: AfmEncoding::Named("V") },
    AfmEncodingTable { code: 0x57, encoding: AfmEncoding::Named("W") },
    AfmEncodingTable { code: 0x58, encoding: AfmEncoding::Named("X") },
    AfmEncodingTable { code: 0x59, encoding: AfmEncoding::Named("Y") },
    AfmEncodingTable { code: 0x5a, encoding: AfmEncoding::Named("Z") },
    AfmEncodingTable { code: 0x5b, encoding: AfmEncoding::Named("bracketleft") },
    AfmEncodingTable { code: 0x5c, encoding: AfmEncoding::Named("backslash") },
    AfmEncodingTable { code: 0x5d, encoding: AfmEncoding::Named("bracketright") },
    AfmEncodingTable { code: 0x5e, encoding: AfmEncoding::Named("asciicircum") },
    AfmEncodingTable { code: 0x5f, encoding: AfmEncoding::Named("underscore") },
    AfmEncodingTable { code: 0x60, encoding: AfmEncoding::Named("quoteleft") },
    AfmEncodingTable { code: 0x61, encoding: AfmEncoding::Named("a") },
    AfmEncodingTable { code: 0x62, encoding: AfmEncoding::Named("b") },
    AfmEncodingTable { code: 0x63, encoding: AfmEncoding::Named("c") },
    AfmEncodingTable { code: 0x64, encoding: AfmEncoding::Named("d") },
    AfmEncodingTable { code: 0x65, encoding: AfmEncoding::Named("e") },
    AfmEncodingTable { code: 0x66, encoding: AfmEncoding::Named("f") },
    AfmEncodingTable { code: 0x67, encoding: AfmEncoding::Named("g") },
    AfmEncodingTable { code: 0x68, encoding: AfmEncoding::Named("h") },
    AfmEncodingTable { code: 0x69, encoding: AfmEncoding::Named("i") },
    AfmEncodingTable { code: 0x6a, encoding: AfmEncoding::Named("j") },
    AfmEncodingTable { code: 0x6b, encoding: AfmEncoding::Named("k") },
    AfmEncodingTable { code: 0x6c, encoding: AfmEncoding::Named("l") },
    AfmEncodingTable { code: 0x6d, encoding: AfmEncoding::Named("m") },
    AfmEncodingTable { code: 0x6e, encoding: AfmEncoding::Named("n") },
    AfmEncodingTable { code: 0x6f, encoding: AfmEncoding::Named("o") },
    AfmEncodingTable { code: 0x70, encoding: AfmEncoding::Named("p") },
    AfmEncodingTable { code: 0x71, encoding: AfmEncoding::Named("q") },
    AfmEncodingTable { code: 0x72, encoding: AfmEncoding::Named("r") },
    AfmEncodingTable { code: 0x73, encoding: AfmEncoding::Named("s") },
    AfmEncodingTable { code: 0x74, encoding: AfmEncoding::Named("t") },
    AfmEncodingTable { code: 0x75, encoding: AfmEncoding::Named("u") },
    AfmEncodingTable { code: 0x76, encoding: AfmEncoding::Named("v") },
    AfmEncodingTable { code: 0x77, encoding: AfmEncoding::Named("w") },
    AfmEncodingTable { code: 0x78, encoding: AfmEncoding::Named("x") },
    AfmEncodingTable { code: 0x79, encoding: AfmEncoding::Named("y") },
    AfmEncodingTable { code: 0x7a, encoding: AfmEncoding::Named("z") },
    AfmEncodingTable { code: 0x7b, encoding: AfmEncoding::Named("braceleft") },
    AfmEncodingTable { code: 0x7c, encoding: AfmEncoding::Named("bar") },
    AfmEncodingTable { code: 0x7d, encoding: AfmEncoding::Named("braceright") },
    AfmEncodingTable { code: 0x7e, encoding: AfmEncoding::Named("tilde") },
    AfmEncodingTable { code: 0x7f, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x80, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x81, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x82, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x83, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x84, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x85, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x86, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x87, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x88, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x89, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x8a, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x8b, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x8c, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x8d, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x8e, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x8f, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x90, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x91, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x92, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x93, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x94, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x95, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x96, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x97, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x98, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x99, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x9a, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x9b, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x9c, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x9d, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x9e, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0x9f, encoding: AfmEncoding::None },
    AfmEncodingTable { code: 0xa0, encoding: AfmEncoding::Named("space") },
    AfmEncodingTable { code: 0xa1, encoding: AfmEncoding::Named("afii10023") },
    AfmEncodingTable { code: 0xa2, encoding: Afm