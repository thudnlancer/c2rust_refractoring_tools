/*
 * AFM ibmpc encoding.
 *
 * This file is automatically generated from file `ibmpc.txt'.  If you
 * have any corrections to this file, please, edit file `ibmpc.txt' instead.
 */

/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; see the file COPYING.  If not, write to
 * the Free Software Foundation, 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

#[derive(Debug, Clone, PartialEq)]
pub enum AfmEncoding {
    None,
    NonExistent,
    Named(String),
}

impl From<&str> for AfmEncoding {
    fn from(s: &str) -> Self {
        match s {
            "AFM_ENC_NONE" => AfmEncoding::None,
            "AFM_ENC_NON_EXISTENT" => AfmEncoding::NonExistent,
            _ => AfmEncoding::Named(s.to_string()),
        }
    }
}

pub const AFM_IBMPC_ENCODING: &[(u8, AfmEncoding)] = &[
    (0x00, AfmEncoding::None),
    (0x01, AfmEncoding::NonExistent),
    (0x02, AfmEncoding::NonExistent),
    (0x03, AfmEncoding::Named("heart".into())),
    (0x04, AfmEncoding::Named("diamond".into())),
    (0x05, AfmEncoding::Named("club".into())),
    (0x06, AfmEncoding::Named("spade".into())),
    (0x07, AfmEncoding::None),
    (0x08, AfmEncoding::None),
    (0x09, AfmEncoding::None),
    (0x0a, AfmEncoding::None),
    (0x0b, AfmEncoding::None),
    (0x0c, AfmEncoding::None),
    (0x0d, AfmEncoding::None),
    (0x0e, AfmEncoding::None),
    (0x0f, AfmEncoding::None),
    (0x10, AfmEncoding::NonExistent),
    (0x11, AfmEncoding::NonExistent),
    (0x12, AfmEncoding::NonExistent),
    (0x13, AfmEncoding::NonExistent),
    (0x14, AfmEncoding::Named("paragraph".into())),
    (0x15, AfmEncoding::Named("section".into())),
    (0x16, AfmEncoding::NonExistent),
    (0x17, AfmEncoding::NonExistent),
    (0x18, AfmEncoding::Named("arrowup".into())),
    (0x19, AfmEncoding::Named("arrowdown".into())),
    (0x1a, AfmEncoding::None),
    (0x1b, AfmEncoding::None),
    (0x1c, AfmEncoding::NonExistent),
    (0x1d, AfmEncoding::Named("arrowboth".into())),
    (0x1e, AfmEncoding::NonExistent),
    (0x1f, AfmEncoding::NonExistent),
    (0x20, AfmEncoding::Named("space".into())),
    (0x21, AfmEncoding::Named("exclam".into())),
    (0x22, AfmEncoding::Named("quotedbl".into())),
    (0x23, AfmEncoding::Named("numbersign".into())),
    (0x24, AfmEncoding::Named("dollar".into())),
    (0x25, AfmEncoding::Named("percent".into())),
    (0x26, AfmEncoding::Named("ampersand".into())),
    (0x27, AfmEncoding::Named("quoteright".into())),
    (0x28, AfmEncoding::Named("parenleft".into())),
    (0x29, AfmEncoding::Named("parenright".into())),
    (0x2a, AfmEncoding::Named("asterisk".into())),
    (0x2b, AfmEncoding::Named("plus".into())),
    (0x2c, AfmEncoding::Named("comma".into())),
    (0x2d, AfmEncoding::Named("hyphen".into())),
    (0x2e, AfmEncoding::Named("period".into())),
    (0x2f, AfmEncoding::Named("slash".into())),
    (0x30, AfmEncoding::Named("zero".into())),
    (0x31, AfmEncoding::Named("one".into())),
    (0x32, AfmEncoding::Named("two".into())),
    (0x33, AfmEncoding::Named("three".into())),
    (0x34, AfmEncoding::Named("four".into())),
    (0x35, AfmEncoding::Named("five".into())),
    (0x36, AfmEncoding::Named("six".into())),
    (0x37, AfmEncoding::Named("seven".into())),
    (0x38, AfmEncoding::Named("eight".into())),
    (0x39, AfmEncoding::Named("nine".into())),
    (0x3a, AfmEncoding::Named("colon".into())),
    (0x3b, AfmEncoding::Named("semicolon".into())),
    (0x3c, AfmEncoding::Named("less".into())),
    (0x3d, AfmEncoding::Named("equal".into())),
    (0x3e, AfmEncoding::Named("greater".into())),
    (0x3f, AfmEncoding::Named("question".into())),
    (0x40, AfmEncoding::Named("at".into())),
    (0x41, AfmEncoding::Named("A".into())),
    (0x42, AfmEncoding::Named("B".into())),
    (0x43, AfmEncoding::Named("C".into())),
    (0x44, AfmEncoding::Named("D".into())),
    (0x45, AfmEncoding::Named("E".into())),
    (0x46, AfmEncoding::Named("F".into())),
    (0x47, AfmEncoding::Named("G".into())),
    (0x48, AfmEncoding::Named("H".into())),
    (0x49, AfmEncoding::Named("I".into())),
    (0x4a, AfmEncoding::Named("J".into())),
    (0x4b, AfmEncoding::Named("K".into())),
    (0x4c, AfmEncoding::Named("L".into())),
    (0x4d, AfmEncoding::Named("M".into())),
    (0x4e, AfmEncoding::Named("N".into())),
    (0x4f, AfmEncoding::Named("O".into())),
    (0x50, AfmEncoding::Named("P".into())),
    (0x51, AfmEncoding::Named("Q".into())),
    (0x52, AfmEncoding::Named("R".into())),
    (0x53, AfmEncoding::Named("S".into())),
    (0x54, AfmEncoding::Named("T".into())),
    (0x55, AfmEncoding::Named("U".into())),
    (0x56, AfmEncoding::Named("V".into())),
    (0x57, AfmEncoding::Named("W".into())),
    (0x58, AfmEncoding::Named("X".into())),
    (0x59, AfmEncoding::Named("Y".into())),
    (0x5a, AfmEncoding::Named("Z".into())),
    (0x5b, AfmEncoding::Named("bracketleft".into())),
    (0x5c, AfmEncoding::Named("backslash".into())),
    (0x5d, AfmEncoding::Named("bracketright".into())),
    (0x5e, AfmEncoding::Named("asciicircum".into())),
    (0x5f, AfmEncoding::Named("underscore".into())),
    (0x60, AfmEncoding::Named("quoteleft".into())),
    (0x61, AfmEncoding::Named("a".into())),
    (0x62, AfmEncoding::Named("b".into())),
    (0x63, AfmEncoding::Named("c".into())),
    (0x64, AfmEncoding::Named("d".into())),
    (0x65, AfmEncoding::Named("e".into())),
    (0x66, AfmEncoding::Named("f".into())),
    (0x67, AfmEncoding::Named("g".into())),
    (0x68, AfmEncoding::Named("h".into())),
    (0x69, AfmEncoding::Named("i".into())),
    (0x6a, AfmEncoding::Named("j".into())),
    (0x6b, AfmEncoding::Named("k".into())),
    (0x6c, AfmEncoding::Named("l".into())),
    (0x6d, AfmEncoding::Named("m".into())),
    (0x6e, AfmEncoding::Named("n".into())),
    (0x6f, AfmEncoding::Named("o".into())),
    (0x70, AfmEncoding::Named("p".into())),
    (0x71, AfmEncoding::Named("q".into())),
    (0x72, AfmEncoding::Named("r".into())),
    (0x73, AfmEncoding::Named("s".into())),
    (0x74, AfmEncoding::Named("t".into())),
    (0x75, AfmEncoding::Named("u".into())),
    (0x76, AfmEncoding::Named("v".into())),
    (0x77, AfmEncoding::Named("w".into())),
    (0x78, AfmEncoding::Named("x".into())),
    (0x79, AfmEncoding::Named("y".into())),
    (0x7a, AfmEncoding::Named("z".into())),
    (0x7b, AfmEncoding::Named("braceleft".into())),
    (0x7c, AfmEncoding::Named("bar".into())),
    (0x7d, AfmEncoding::Named("braceright".into())),
    (0x7e, AfmEncoding::Named("tilde".into())),
    (0x7f, AfmEncoding::NonExistent),
    (0x80, AfmEncoding::Named("Ccedilla".into())),
    (0x81, AfmEncoding::Named("udieresis".into())),
    (0x82, AfmEncoding::Named("eacute".into())),
    (0x83, AfmEncoding::Named("acircumflex".into())),
    (0x84, AfmEncoding::Named("adieresis".into())),
    (0x85, AfmEncoding::Named("agrave".into())),
    (0x86, AfmEncoding::Named("aring".into())),
    (0x87, AfmEncoding::Named("ccedilla".into())),
    (0x88, AfmEncoding::Named("ecircumflex".into())),
    (0x89, AfmEncoding::Named("edieresis".into())),
    (0x8a, AfmEncoding::Named("egrave".into())),
    (0x8b, AfmEncoding::Named("idieresis".into())),
    (0x8c, AfmEncoding::Named("icircumflex".into())),
    (0x8d, AfmEncoding::Named("igrave".into())),
    (0x8e, AfmEncoding::Named("Adieresis".into())),
    (0x8f, AfmEncoding::Named("Aring".into())),
    (0x90, AfmEncoding::Named("Eacute".into())),
    (0x91, AfmEncoding::Named("ae".into())),
    (0x92, AfmEncoding::Named("AE".into())),
    (0x93, AfmEncoding::Named("ocircumflex".into())),
    (0x94, AfmEncoding::Named("odieresis".into())),
    (0x95, AfmEncoding::Named("ograve".into())),
    (0x96, AfmEncoding::Named("ucircumflex".into())),
    (0x97, AfmEncoding::Named("ugrave".into())),
    (0x98, AfmEncoding::Named("ydieresis".into())),
    (0x99, AfmEncoding::Named("Odieresis".into())),
    (0x9a, AfmEncoding::Named("Udieresis".into())),
    (0x9b, AfmEncoding::Named("cent".into())),
    (0x9c, AfmEncoding::Named("sterling".into())),
    (0x9d, AfmEncoding::Named("yen".into())),
    (0x9e, AfmEncoding::NonExistent),
    (0x9f, AfmEncoding::Named("florin".into())),
    (0xa0, AfmEncoding::Named("aacute".into())),
    (0xa1, AfmEncoding::Named("iacute".into())),
    (0xa2, AfmEncoding::Named("oacute".into())),
    (0xa3, AfmEncoding::Named("uacute".into())),
    (0xa4, AfmEncoding::Named("ntilde".into())),
    (0xa5, AfmEncoding::Named("Ntilde".into())),
    (0xa6, AfmEncoding::Named("ordfeminine".into())),
    (0xa7, AfmEncoding::Named("degree".into())),
    (0xa8, AfmEncoding::Named("questiondown".into())),
    (0xa9, AfmEncoding::NonExistent),
    (0xaa, AfmEncoding::Named("logicalnot".into())),
    (0xab, AfmEncoding::Named("onehalf".into())),
    (0xac, AfmEncoding::Named("onequarter".into())),
    (0xad, AfmEncoding::Named("exclamdown".into())),
    (0xae, AfmEncoding::Named("guillemotleft".into())),
    (0xaf, AfmEncoding::Named("guillemotright".into())),
    (0xb0, AfmEncoding::NonExistent),
    (0xb1, AfmEncoding::NonExistent),
    (0xb2, AfmEncoding::NonExistent),
    (0xb3, AfmEncoding::NonExistent),
    (0xb4, AfmEncoding::NonExistent),
    (0xb5, AfmEncoding::NonExistent),
    (0xb6, AfmEncoding::NonExistent),
    (0xb7, AfmEncoding::NonExistent),
    (0xb8, AfmEncoding::NonExistent),
    (0xb9, AfmEncoding::NonExistent),
    (0xba, AfmEncoding::NonExistent),
    (0xbb, AfmEncoding::NonExistent),
    (0xbc, AfmEncoding::NonExistent),
    (0xbd, AfmEncoding::NonExistent),
    (0xbe, AfmEncoding::NonExistent),
    (0xbf, AfmEncoding::NonExistent),
    (0xc0, AfmEncoding::NonExistent),
    (0xc1, AfmEncoding::NonExistent),
    (0xc2, AfmEncoding::NonExistent),
    (0xc3, AfmEncoding::NonExistent),
    (0xc4, AfmEncoding::NonExistent),
    (0xc5, AfmEncoding::NonExistent),
    (0xc6, AfmEncoding::NonExistent),
    (0xc7, AfmEncoding::NonExistent),
    (0xc8, AfmEncoding::NonExistent),
    (0xc9, AfmEncoding::NonExistent),
    (0xca, AfmEncoding::NonExistent),
    (0xcb, AfmEncoding::NonExistent),
    (0xcc, AfmEncoding::NonExistent),
    (0xcd, AfmEncoding::NonExistent),
    (0xce, AfmEncoding::NonExistent),
    (0xcf, AfmEncoding::NonExistent),
    (0xd0, AfmEncoding::NonExistent),
    (0xd1, AfmEncoding::NonExistent),
    (0xd2, AfmEncoding::NonExistent),
    (0xd3, AfmEncoding::NonExistent),
    (0xd4, AfmEncoding::NonExistent),
    (0xd5, AfmEncoding::NonExistent),
    (0xd6, AfmEncoding::NonExistent),
    (0xd7, AfmEncoding::NonExistent),
    (0xd8, AfmEncoding::NonExistent),
    (0xd9, AfmEncoding::NonExistent),
    (0xda, AfmEncoding::NonExistent),
    (0xdb, AfmEncoding::NonExistent),
    (0xdc, AfmEncoding::NonExistent),
    (0xdd, AfmEncoding::NonExistent),
    (0xde, AfmEncoding::NonExistent),
    (0xdf, AfmEncoding::NonExistent),
    (0xe0, AfmEncoding::Named("alpha".into())),
    (