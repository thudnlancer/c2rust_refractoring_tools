   Compiling c2rust_out v0.0.0 (/home/c2rust/Desktop/c_prog/hiredis)
error: this file contains an unclosed delimiter
   --> async.rs:134:125
    |
41  | use crate::hiredis::{
    |                     - unclosed delimiter
...
134 |     redisReaderSetReplyObjectFunctionsCreateStreamInfoGroupReplyReplyReplyReplyReplyReplyReplyReplyReplyReplyReplyReplyReply
    |                                                                                                                             ^

error: expected `;`, found `<eof>`
   --> async.rs:134:125
    |
134 |     redisReaderSetReplyObjectFunctionsCreateStreamInfoGroupReplyReplyReplyReplyReplyReplyReplyReplyReplyReplyReplyReplyReply
    |                                                                                                                             ^ expected `;`
    |
    = note: glob-like brace syntax must be last on the path

error[E0432]: unresolved import `socket2`
 --> net.rs:8:5
  |
8 | use socket2::{Domain, Protocol, Socket, Type};
  |     ^^^^^^^ use of undeclared crate or module `socket2`

error[E0432]: unresolved import `thiserror`
 --> net.rs:9:5
  |
9 | use thiserror::Error;
  |     ^^^^^^^^^ use of undeclared crate or module `thiserror`

error: cannot determine resolution for the derive macro `Error`
  --> net.rs:11:10
   |
11 | #[derive(Error, Debug)]
   |          ^^^^^
   |
   = note: import resolution is stuck, try simplifying macro imports

error: cannot find attribute `error` in this scope
  --> net.rs:13:7
   |
13 |     #[error("I/O error: {0}")]
   |       ^^^^^

error: cannot find attribute `from` in this scope
  --> net.rs:14:10
   |
14 |     Io(#[from] io::Error),
   |          ^^^^

error: cannot find attribute `error` in this scope
  --> net.rs:15:7
   |
15 |     #[error("Invalid timeout specified")]
   |       ^^^^^

error: cannot find attribute `error` in this scope
  --> net.rs:17:7
   |
17 |     #[error("Out of memory")]
   |       ^^^^^

error: cannot find attribute `error` in this scope
  --> net.rs:19:7
   |
19 |     #[error("Server closed the connection")]
   |       ^^^^^

error: cannot find attribute `error` in this scope
  --> net.rs:21:7
   |
21 |     #[error("Timeout occurred")]
   |       ^^^^^

error: cannot find attribute `error` in this scope
  --> net.rs:23:7
   |
23 |     #[error("Other error: {0}")]
   |       ^^^^^

error[E0433]: failed to resolve: use of undeclared crate or module `socket2`
   --> net.rs:207:24
    |
207 |             let addr = socket2::SockAddr::unix(Path::new(path))?;
    |                        ^^^^^^^ use of undeclared crate or module `socket2`

error[E0412]: cannot find type `c_uint` in this scope
   --> hiredis.rs:213:66
    |
213 |       pub fn redisSetTcpUserTimeout(c: *mut redisContext, timeout: c_uint) -> c_int;
    |                                                                    ^^^^^^
    |
   ::: /home/c2rust/.rustup/toolchains/nightly-2022-08-08-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/os/raw/mod.rs:22:1
    |
22  | / alias_core_ffi! {
23  | |     c_char c_schar c_uchar
24  | |     c_short c_ushort
25  | |     c_int c_uint
...   |
30  | |     c_void
31  | | }
    | |_- similarly named type alias `c_int` defined here
    |
help: a type alias with a similar name exists
    |
213 |     pub fn redisSetTcpUserTimeout(c: *mut redisContext, timeout: c_int) -> c_int;
    |                                                                  ~~~~~
help: consider importing one of these items
    |
1   | use core::ffi::c_uint;
    |
1   | use libc::c_uint;
    |
1   | use std::ffi::c_uint;
    |
1   | use std::os::raw::c_uint;
    |

warning: unused import: `c_long`
 --> hiredis.rs:1:27
  |
1 | use std::os::raw::{c_int, c_long, c_longlong, c_char, c_void};
  |                           ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `CStr`, `CString`
 --> hiredis.rs:2:16
  |
2 | use std::ffi::{CStr, CString};
  |                ^^^^  ^^^^^^^

warning: unused import: `std::ptr`
 --> hiredis.rs:3:5
  |
3 | use std::ptr;
  |     ^^^^^^^^

warning: unused import: `std::mem`
 --> hiredis.rs:4:5
  |
4 | use std::mem;
  |     ^^^^^^^^

warning: unused imports: `Duration`, `SystemTime`
 --> hiredis.rs:5:17
  |
5 | use std::time::{Duration, SystemTime};
  |                 ^^^^^^^^  ^^^^^^^^^^

warning: unused imports: `SocketAddr`, `TcpStream`
 --> hiredis.rs:6:16
  |
6 | use std::net::{TcpStream, SocketAddr};
  |                ^^^^^^^^^  ^^^^^^^^^^

warning: unused imports: `ErrorKind`, `Error`, `Read`, `Write`
 --> hiredis.rs:7:15
  |
7 | use std::io::{Read, Write, Error, ErrorKind};
  |               ^^^^  ^^^^^  ^^^^^  ^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> hiredis.rs:8:5
  |
8 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `SocketAddr`, `TcpStream`
 --> net.rs:2:16
  |
2 | use std::net::{SocketAddr, TcpStream, ToSocketAddrs};
  |                ^^^^^^^^^^  ^^^^^^^^^

warning: unused import: `std::os::unix::net::UnixStream`
 --> net.rs:3:5
  |
3 | use std::os::unix::net::UnixStream;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::mem`
 --> net.rs:6:5
  |
6 | use std::mem;
  |     ^^^^^^^^

warning: unused import: `c_int`
 --> net.rs:7:18
  |
7 | use libc::{self, c_int, sockaddr, socklen_t};
  |                  ^^^^^

warning: unnecessary parentheses around block return value
   --> read.rs:682:25
    |
682 |                         (if ::core::mem::size_of::<libc::c_double>() as libc::c_ulong
    |                         ^
...
688 |                         })
    |                          ^
    |
    = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
    |
682 ~                         if ::core::mem::size_of::<libc::c_double>() as libc::c_ulong
683 |                             == ::core::mem::size_of::<libc::c_double>() as libc::c_ulong
  ...
687 |                             __finitel(f128::f128::new(d))
688 ~                         }
    |

warning: unused import: `::libc`
 --> sockcompat.rs:1:5
  |
1 | use ::libc;
  |     ^^^^^^

warning: unused import: `SystemTime`
  --> test.rs:4:27
   |
4  | use std::time::{Duration, SystemTime};
   |                           ^^^^^^^^^^
   |
help: consider adding a `#[cfg(test)]` to the containing module
  --> c2rust-lib.rs:21:1
   |
21 | pub mod test;
   | ^^^^^^^^^^^^^

warning: unused import: `std::path::Path`
  --> test.rs:7:5
   |
7  | use std::path::Path;
   |     ^^^^^^^^^^^^^^^
   |
help: consider adding a `#[cfg(test)]` to the containing module
  --> c2rust-lib.rs:21:1
   |
21 | pub mod test;
   | ^^^^^^^^^^^^^

warning: unused import: `self`
  --> test.rs:8:15
   |
8  | use std::io::{self, Read, Write};
   |               ^^^^
   |
help: consider adding a `#[cfg(test)]` to the containing module
  --> c2rust-lib.rs:21:1
   |
21 | pub mod test;
   | ^^^^^^^^^^^^^

warning: unused import: `std::fmt`
  --> test.rs:10:5
   |
10 | use std::fmt;
   |     ^^^^^^^^
   |
help: consider adding a `#[cfg(test)]` to the containing module
  --> c2rust-lib.rs:21:1
   |
21 | pub mod test;
   | ^^^^^^^^^^^^^

warning: unused import: `std::convert::TryInto`
  --> test.rs:12:5
   |
12 | use std::convert::TryInto;
   |     ^^^^^^^^^^^^^^^^^^^^^
   |
help: consider adding a `#[cfg(test)]` to the containing module
  --> c2rust-lib.rs:21:1
   |
21 | pub mod test;
   | ^^^^^^^^^^^^^

error[E0740]: unions cannot contain fields that may need dropping
  --> hiredis.rs:93:5
   |
93 |     tcp: redisOptionsTcp,
   |     ^^^^^^^^^^^^^^^^^^^^
   |
   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type
help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped
   |
93 |     tcp: std::mem::ManuallyDrop<redisOptionsTcp>,
   |          +++++++++++++++++++++++               +

error[E0282]: type annotations needed
  --> net.rs:57:17
   |
57 |             fd: None,
   |                 ^^^^ cannot infer type of the type parameter `T` declared on the enum `Option`
   |
help: consider specifying the generic argument
   |
57 |             fd: None::<T>,
   |                     +++++

error[E0277]: `?` couldn't convert the error to `RedisError`
   --> net.rs:159:55
    |
159 |         let mut socket_addrs = addrs.to_socket_addrs()?;
    |                                                       ^ the trait `From<std::io::Error>` is not implemented for `RedisError`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `FromResidual<R>`:
              <Result<T, F> as FromResidual<Result<Infallible, E>>>
              <Result<T, F> as FromResidual<Yeet<E>>>
    = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, std::io::Error>>` for `Result<(), RedisError>`

error[E0277]: `?` couldn't convert the error to `RedisError`
   --> net.rs:163:61
    |
163 |                 let source_socket = source.to_socket_addrs()?.next().ok_or_else(|| {
    |                                                             ^ the trait `From<std::io::Error>` is not implemented for `RedisError`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `FromResidual<R>`:
              <Result<T, F> as FromResidual<Result<Infallible, E>>>
              <Result<T, F> as FromResidual<Yeet<E>>>
    = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, std::io::Error>>` for `Result<(), RedisError>`

error[E0600]: cannot apply unary operator `-` to type `usize`
  --> test.rs:95:27
   |
95 |                 if len == -1 {
   |                           ^^
   |                           |
   |                           cannot apply unary operator `-`
   |                           help: you may have meant the maximum value of `usize`: `usize::MAX`
   |
   = note: unsigned values cannot be negated

Some errors have detailed explanations: E0277, E0282, E0412, E0432, E0433, E0600, E0740.
For more information about an error, try `rustc --explain E0277`.
warning: `c2rust_out` (lib) generated 19 warnings
error: could not compile `c2rust_out` due to 19 previous errors; 19 warnings emitted
