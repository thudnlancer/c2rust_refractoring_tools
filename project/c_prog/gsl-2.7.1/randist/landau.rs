use ::libc;
extern "C" {
    fn exp(_: libc::c_double) -> libc::c_double;
    fn log(_: libc::c_double) -> libc::c_double;
    fn sqrt(_: libc::c_double) -> libc::c_double;
}
pub type size_t = libc::c_ulong;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct gsl_rng_type {
    pub name: *const libc::c_char,
    pub max: libc::c_ulong,
    pub min: libc::c_ulong,
    pub size: size_t,
    pub set: Option::<unsafe extern "C" fn(*mut libc::c_void, libc::c_ulong) -> ()>,
    pub get: Option::<unsafe extern "C" fn(*mut libc::c_void) -> libc::c_ulong>,
    pub get_double: Option::<unsafe extern "C" fn(*mut libc::c_void) -> libc::c_double>,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct gsl_rng {
    pub type_0: *const gsl_rng_type,
    pub state: *mut libc::c_void,
}
#[inline]
unsafe extern "C" fn gsl_rng_uniform_pos(mut r: *const gsl_rng) -> libc::c_double {
    let mut x: libc::c_double = 0.;
    loop {
        x = ((*(*r).type_0).get_double).expect("non-null function pointer")((*r).state);
        if !(x == 0 as libc::c_int as libc::c_double) {
            break;
        }
    }
    return x;
}
#[no_mangle]
pub unsafe extern "C" fn gsl_ran_landau_pdf(x: libc::c_double) -> libc::c_double {
    static mut P1: [libc::c_double; 5] = [
        0.4259894875E0f64,
        -0.1249762550E0f64,
        0.3984243700E-1f64,
        -0.6298287635E-2f64,
        0.1511162253E-2f64,
    ];
    static mut P2: [libc::c_double; 5] = [
        0.1788541609E0f64,
        0.1173957403E0f64,
        0.1488850518E-1f64,
        -0.1394989411E-2f64,
        0.1283617211E-3f64,
    ];
    static mut P3: [libc::c_double; 5] = [
        0.1788544503E0f64,
        0.9359161662E-1f64,
        0.6325387654E-2f64,
        0.6611667319E-4f64,
        -0.2031049101E-5f64,
    ];
    static mut P4: [libc::c_double; 5] = [
        0.9874054407E0f64,
        0.1186723273E3f64,
        0.8492794360E3f64,
        -0.7437792444E3f64,
        0.4270262186E3f64,
    ];
    static mut P5: [libc::c_double; 5] = [
        0.1003675074E1f64,
        0.1675702434E3f64,
        0.4789711289E4f64,
        0.2121786767E5f64,
        -0.2232494910E5f64,
    ];
    static mut P6: [libc::c_double; 5] = [
        0.1000827619E1f64,
        0.6649143136E3f64,
        0.6297292665E5f64,
        0.4755546998E6f64,
        -0.5743609109E7f64,
    ];
    static mut Q1: [libc::c_double; 5] = [
        1.0f64,
        -0.3388260629E0f64,
        0.9594393323E-1f64,
        -0.1608042283E-1f64,
        0.3778942063E-2f64,
    ];
    static mut Q2: [libc::c_double; 5] = [
        1.0f64,
        0.7428795082E0f64,
        0.3153932961E0f64,
        0.6694219548E-1f64,
        0.8790609714E-2f64,
    ];
    static mut Q3: [libc::c_double; 5] = [
        1.0f64,
        0.6097809921E0f64,
        0.2560616665E0f64,
        0.4746722384E-1f64,
        0.6957301675E-2f64,
    ];
    static mut Q4: [libc::c_double; 5] = [
        1.0f64,
        0.1068615961E3f64,
        0.3376496214E3f64,
        0.2016712389E4f64,
        0.1597063511E4f64,
    ];
    static mut Q5: [libc::c_double; 5] = [
        1.0f64,
        0.1569424537E3f64,
        0.3745310488E4f64,
        0.9834698876E4f64,
        0.6692428357E5f64,
    ];
    static mut Q6: [libc::c_double; 5] = [
        1.0f64,
        0.6514101098E3f64,
        0.5697473333E5f64,
        0.1659174725E6f64,
        -0.2815759939E7f64,
    ];
    static mut A1: [libc::c_double; 3] = [
        0.4166666667E-1f64,
        -0.1996527778E-1f64,
        0.2709538966E-1f64,
    ];
    static mut A2: [libc::c_double; 2] = [-0.1845568670E1f64, -0.4284640743E1f64];
    let mut U: libc::c_double = 0.;
    let mut V: libc::c_double = 0.;
    let mut DENLAN: libc::c_double = 0.;
    V = x;
    if V < -5.5f64 {
        U = exp(V + 1.0f64);
        DENLAN = 0.3989422803f64
            * (exp(-(1 as libc::c_int) as libc::c_double / U) / sqrt(U))
            * (1 as libc::c_int as libc::c_double
                + (A1[0 as libc::c_int as usize]
                    + (A1[1 as libc::c_int as usize] + A1[2 as libc::c_int as usize] * U)
                        * U) * U);
    } else if V < -(1 as libc::c_int) as libc::c_double {
        U = exp(-V - 1 as libc::c_int as libc::c_double);
        DENLAN = exp(-U) * sqrt(U)
            * (P1[0 as libc::c_int as usize]
                + (P1[1 as libc::c_int as usize]
                    + (P1[2 as libc::c_int as usize]
                        + (P1[3 as libc::c_int as usize]
                            + P1[4 as libc::c_int as usize] * V) * V) * V) * V)
            / (Q1[0 as libc::c_int as usize]
                + (Q1[1 as libc::c_int as usize]
                    + (Q1[2 as libc::c_int as usize]
                        + (Q1[3 as libc::c_int as usize]
                            + Q1[4 as libc::c_int as usize] * V) * V) * V) * V);
    } else if V < 1 as libc::c_int as libc::c_double {
        DENLAN = (P2[0 as libc::c_int as usize]
            + (P2[1 as libc::c_int as usize]
                + (P2[2 as libc::c_int as usize]
                    + (P2[3 as libc::c_int as usize] + P2[4 as libc::c_int as usize] * V)
                        * V) * V) * V)
            / (Q2[0 as libc::c_int as usize]
                + (Q2[1 as libc::c_int as usize]
                    + (Q2[2 as libc::c_int as usize]
                        + (Q2[3 as libc::c_int as usize]
                            + Q2[4 as libc::c_int as usize] * V) * V) * V) * V);
    } else if V < 5 as libc::c_int as libc::c_double {
        DENLAN = (P3[0 as libc::c_int as usize]
            + (P3[1 as libc::c_int as usize]
                + (P3[2 as libc::c_int as usize]
                    + (P3[3 as libc::c_int as usize] + P3[4 as libc::c_int as usize] * V)
                        * V) * V) * V)
            / (Q3[0 as libc::c_int as usize]
                + (Q3[1 as libc::c_int as usize]
                    + (Q3[2 as libc::c_int as usize]
                        + (Q3[3 as libc::c_int as usize]
                            + Q3[4 as libc::c_int as usize] * V) * V) * V) * V);
    } else if V < 12 as libc::c_int as libc::c_double {
        U = 1 as libc::c_int as libc::c_double / V;
        DENLAN = U * U
            * (P4[0 as libc::c_int as usize]
                + (P4[1 as libc::c_int as usize]
                    + (P4[2 as libc::c_int as usize]
                        + (P4[3 as libc::c_int as usize]
                            + P4[4 as libc::c_int as usize] * U) * U) * U) * U)
            / (Q4[0 as libc::c_int as usize]
                + (Q4[1 as libc::c_int as usize]
                    + (Q4[2 as libc::c_int as usize]
                        + (Q4[3 as libc::c_int as usize]
                            + Q4[4 as libc::c_int as usize] * U) * U) * U) * U);
    } else if V < 50 as libc::c_int as libc::c_double {
        U = 1 as libc::c_int as libc::c_double / V;
        DENLAN = U * U
            * (P5[0 as libc::c_int as usize]
                + (P5[1 as libc::c_int as usize]
                    + (P5[2 as libc::c_int as usize]
                        + (P5[3 as libc::c_int as usize]
                            + P5[4 as libc::c_int as usize] * U) * U) * U) * U)
            / (Q5[0 as libc::c_int as usize]
                + (Q5[1 as libc::c_int as usize]
                    + (Q5[2 as libc::c_int as usize]
                        + (Q5[3 as libc::c_int as usize]
                            + Q5[4 as libc::c_int as usize] * U) * U) * U) * U);
    } else if V < 300 as libc::c_int as libc::c_double {
        U = 1 as libc::c_int as libc::c_double / V;
        DENLAN = U * U
            * (P6[0 as libc::c_int as usize]
                + (P6[1 as libc::c_int as usize]
                    + (P6[2 as libc::c_int as usize]
                        + (P6[3 as libc::c_int as usize]
                            + P6[4 as libc::c_int as usize] * U) * U) * U) * U)
            / (Q6[0 as libc::c_int as usize]
                + (Q6[1 as libc::c_int as usize]
                    + (Q6[2 as libc::c_int as usize]
                        + (Q6[3 as libc::c_int as usize]
                            + Q6[4 as libc::c_int as usize] * U) * U) * U) * U);
    } else {
        U = 1 as libc::c_int as libc::c_double
            / (V - V * log(V) / (V + 1 as libc::c_int as libc::c_double));
        DENLAN = U * U
            * (1 as libc::c_int as libc::c_double
                + (A2[0 as libc::c_int as usize] + A2[1 as libc::c_int as usize] * U)
                    * U);
    }
    return DENLAN;
}
#[no_mangle]
pub unsafe extern "C" fn gsl_ran_landau(mut r: *const gsl_rng) -> libc::c_double {
    static mut F: [libc::c_double; 983] = [
        0.0000000f64,
        00.000000f64,
        00.000000f64,
        00.000000f64,
        00.000000f64,
        00.000000f64,
        -2.244733f64,
        -2.204365f64,
        -2.168163f64,
        -2.135219f64,
        -2.104898f64,
        -2.076740f64,
        -2.050397f64,
        -2.025605f64,
        -2.002150f64,
        -1.979866f64,
        -1.958612f64,
        -1.938275f64,
        -1.918760f64,
        -1.899984f64,
        -1.881879f64,
        -1.864385f64,
        -1.847451f64,
        -1.831030f64,
        -1.815083f64,
        -1.799574f64,
        -1.784473f64,
        -1.769751f64,
        -1.755383f64,
        -1.741346f64,
        -1.727620f64,
        -1.714187f64,
        -1.701029f64,
        -1.688130f64,
        -1.675477f64,
        -1.663057f64,
        -1.650858f64,
        -1.638868f64,
        -1.627078f64,
        -1.615477f64,
        -1.604058f64,
        -1.592811f64,
        -1.581729f64,
        -1.570806f64,
        -1.560034f64,
        -1.549407f64,
        -1.538919f64,
        -1.528565f64,
        -1.518339f64,
        -1.508237f64,
        -1.498254f64,
        -1.488386f64,
        -1.478628f64,
        -1.468976f64,
        -1.459428f64,
        -1.449979f64,
        -1.440626f64,
        -1.431365f64,
        -1.422195f64,
        -1.413111f64,
        -1.404112f64,
        -1.395194f64,
        -1.386356f64,
        -1.377594f64,
        -1.368906f64,
        -1.360291f64,
        -1.351746f64,
        -1.343269f64,
        -1.334859f64,
        -1.326512f64,
        -1.318229f64,
        -1.310006f64,
        -1.301843f64,
        -1.293737f64,
        -1.285688f64,
        -1.277693f64,
        -1.269752f64,
        -1.261863f64,
        -1.254024f64,
        -1.246235f64,
        -1.238494f64,
        -1.230800f64,
        -1.223153f64,
        -1.215550f64,
        -1.207990f64,
        -1.200474f64,
        -1.192999f64,
        -1.185566f64,
        -1.178172f64,
        -1.170817f64,
        -1.163500f64,
        -1.156220f64,
        -1.148977f64,
        -1.141770f64,
        -1.134598f64,
        -1.127459f64,
        -1.120354f64,
        -1.113282f64,
        -1.106242f64,
        -1.099233f64,
        -1.092255f64,
        -1.085306f64,
        -1.078388f64,
        -1.071498f64,
        -1.064636f64,
        -1.057802f64,
        -1.050996f64,
        -1.044215f64,
        -1.037461f64,
        -1.030733f64,
        -1.024029f64,
        -1.017350f64,
        -1.010695f64,
        -1.004064f64,
        -0.997456f64,
        -0.990871f64,
        -0.984308f64,
        -0.977767f64,
        -0.971247f64,
        -0.964749f64,
        -0.958271f64,
        -0.951813f64,
        -0.945375f64,
        -0.938957f64,
        -0.932558f64,
        -0.926178f64,
        -0.919816f64,
        -0.913472f64,
        -0.907146f64,
        -0.900838f64,
        -0.894547f64,
        -0.888272f64,
        -0.882014f64,
        -0.875773f64,
        -0.869547f64,
        -0.863337f64,
        -0.857142f64,
        -0.850963f64,
        -0.844798f64,
        -0.838648f64,
        -0.832512f64,
        -0.826390f64,
        -0.820282f64,
        -0.814187f64,
        -0.808106f64,
        -0.802038f64,
        -0.795982f64,
        -0.789940f64,
        -0.783909f64,
        -0.777891f64,
        -0.771884f64,
        -0.765889f64,
        -0.759906f64,
        -0.753934f64,
        -0.747973f64,
        -0.742023f64,
        -0.736084f64,
        -0.730155f64,
        -0.724237f64,
        -0.718328f64,
        -0.712429f64,
        -0.706541f64,
        -0.700661f64,
        -0.694791f64,
        -0.688931f64,
        -0.683079f64,
        -0.677236f64,
        -0.671402f64,
        -0.665576f64,
        -0.659759f64,
        -0.653950f64,
        -0.648149f64,
        -0.642356f64,
        -0.636570f64,
        -0.630793f64,
        -0.625022f64,
        -0.619259f64,
        -0.613503f64,
        -0.607754f64,
        -0.602012f64,
        -0.596276f64,
        -0.590548f64,
        -0.584825f64,
        -0.579109f64,
        -0.573399f64,
        -0.567695f64,
        -0.561997f64,
        -0.556305f64,
        -0.550618f64,
        -0.544937f64,
        -0.539262f64,
        -0.533592f64,
        -0.527926f64,
        -0.522266f64,
        -0.516611f64,
        -0.510961f64,
        -0.505315f64,
        -0.499674f64,
        -0.494037f64,
        -0.488405f64,
        -0.482777f64,
        -0.477153f64,
        -0.471533f64,
        -0.465917f64,
        -0.460305f64,
        -0.454697f64,
        -0.449092f64,
        -0.443491f64,
        -0.437893f64,
        -0.432299f64,
        -0.426707f64,
        -0.421119f64,
        -0.415534f64,
        -0.409951f64,
        -0.404372f64,
        -0.398795f64,
        -0.393221f64,
        -0.387649f64,
        -0.382080f64,
        -0.376513f64,
        -0.370949f64,
        -0.365387f64,
        -0.359826f64,
        -0.354268f64,
        -0.348712f64,
        -0.343157f64,
        -0.337604f64,
        -0.332053f64,
        -0.326503f64,
        -0.320955f64,
        -0.315408f64,
        -0.309863f64,
        -0.304318f64,
        -0.298775f64,
        -0.293233f64,
        -0.287692f64,
        -0.282152f64,
        -0.276613f64,
        -0.271074f64,
        -0.265536f64,
        -0.259999f64,
        -0.254462f64,
        -0.248926f64,
        -0.243389f64,
        -0.237854f64,
        -0.232318f64,
        -0.226783f64,
        -0.221247f64,
        -0.215712f64,
        -0.210176f64,
        -0.204641f64,
        -0.199105f64,
        -0.193568f64,
        -0.188032f64,
        -0.182495f64,
        -0.176957f64,
        -0.171419f64,
        -0.165880f64,
        -0.160341f64,
        -0.154800f64,
        -0.149259f64,
        -0.143717f64,
        -0.138173f64,
        -0.132629f64,
        -0.127083f64,
        -0.121537f64,
        -0.115989f64,
        -0.110439f64,
        -0.104889f64,
        -0.099336f64,
        -0.093782f64,
        -0.088227f64,
        -0.082670f64,
        -0.077111f64,
        -0.071550f64,
        -0.065987f64,
        -0.060423f64,
        -0.054856f64,
        -0.049288f64,
        -0.043717f64,
        -0.038144f64,
        -0.032569f64,
        -0.026991f64,
        -0.021411f64,
        -0.015828f64,
        -0.010243f64,
        -0.004656f64,
        00.000934f64,
        00.006527f64,
        00.012123f64,
        00.017722f64,
        00.023323f64,
        00.028928f64,
        00.034535f64,
        00.040146f64,
        00.045759f64,
        00.051376f64,
        00.056997f64,
        00.062620f64,
        00.068247f64,
        00.073877f64,
        00.079511f64,
        00.085149f64,
        00.090790f64,
        00.096435f64,
        00.102083f64,
        00.107736f64,
        00.113392f64,
        00.119052f64,
        00.124716f64,
        00.130385f64,
        00.136057f64,
        00.141734f64,
        00.147414f64,
        00.153100f64,
        00.158789f64,
        00.164483f64,
        00.170181f64,
        00.175884f64,
        00.181592f64,
        00.187304f64,
        00.193021f64,
        00.198743f64,
        00.204469f64,
        00.210201f64,
        00.215937f64,
        00.221678f64,
        00.227425f64,
        00.233177f64,
        00.238933f64,
        00.244696f64,
        00.250463f64,
        00.256236f64,
        00.262014f64,
        00.267798f64,
        00.273587f64,
        00.279382f64,
        00.285183f64,
        00.290989f64,
        00.296801f64,
        00.302619f64,
        00.308443f64,
        00.314273f64,
        00.320109f64,
        00.325951f64,
        00.331799f64,
        00.337654f64,
        00.343515f64,
        00.349382f64,
        00.355255f64,
        00.361135f64,
        00.367022f64,
        00.372915f64,
        00.378815f64,
        00.384721f64,
        00.390634f64,
        00.396554f64,
        00.402481f64,
        00.408415f64,
        00.414356f64,
        00.420304f64,
        00.426260f64,
        00.432222f64,
        00.438192f64,
        00.444169f64,
        00.450153f64,
        00.456145f64,
        00.462144f64,
        00.468151f64,
        00.474166f64,
        00.480188f64,
        00.486218f64,
        00.492256f64,
        00.498302f64,
        00.504356f64,
        00.510418f64,
        00.516488f64,
        00.522566f64,
        00.528653f64,
        00.534747f64,
        00.540850f64,
        00.546962f64,
        00.553082f64,
        00.559210f64,
        00.565347f64,
        00.571493f64,
        00.577648f64,
        00.583811f64,
        00.589983f64,
        00.596164f64,
        00.602355f64,
        00.608554f64,
        00.614762f64,
        00.620980f64,
        00.627207f64,
        00.633444f64,
        00.639689f64,
        00.645945f64,
        00.652210f64,
        00.658484f64,
        00.664768f64,
        00.671062f64,
        00.677366f64,
        00.683680f64,
        00.690004f64,
        00.696338f64,
        00.702682f64,
        00.709036f64,
        00.715400f64,
        00.721775f64,
        00.728160f64,
        00.734556f64,
        00.740963f64,
        00.747379f64,
        00.753807f64,
        00.760246f64,
        00.766695f64,
        00.773155f64,
        00.779627f64,
        00.786109f64,
        00.792603f64,
        00.799107f64,
        00.805624f64,
        00.812151f64,
        00.818690f64,
        00.825241f64,
        00.831803f64,
        00.838377f64,
        00.844962f64,
        00.851560f64,
        00.858170f64,
        00.864791f64,
        00.871425f64,
        00.878071f64,
        00.884729f64,
        00.891399f64,
        00.898082f64,
        00.904778f64,
        00.911486f64,
        00.918206f64,
        00.924940f64,
        00.931686f64,
        00.938446f64,
        00.945218f64,
        00.952003f64,
        00.958802f64,
        00.965614f64,
        00.972439f64,
        00.979278f64,
        00.986130f64,
        00.992996f64,
        00.999875f64,
        01.006769f64,
        01.013676f64,
        01.020597f64,
        01.027533f64,
        01.034482f64,
        01.041446f64,
        01.048424f64,
        01.055417f64,
        01.062424f64,
        01.069446f64,
        01.076482f64,
        01.083534f64,
        01.090600f64,
        01.097681f64,
        01.104778f64,
        01.111889f64,
        01.119016f64,
        01.126159f64,
        01.133316f64,
        01.140490f64,
        01.147679f64,
        01.154884f64,
        01.162105f64,
        01.169342f64,
        01.176595f64,
        01.183864f64,
        01.191149f64,
        01.198451f64,
        01.205770f64,
        01.213105f64,
        01.220457f64,
        01.227826f64,
        01.235211f64,
        01.242614f64,
        01.250034f64,
        01.257471f64,
        01.264926f64,
        01.272398f64,
        01.279888f64,
        01.287395f64,
        01.294921f64,
        01.302464f64,
        01.310026f64,
        01.317605f64,
        01.325203f64,
        01.332819f64,
        01.340454f64,
        01.348108f64,
        01.355780f64,
        01.363472f64,
        01.371182f64,
        01.378912f64,
        01.386660f64,
        01.394429f64,
        01.402216f64,
        01.410024f64,
        01.417851f64,
        01.425698f64,
        01.433565f64,
        01.441453f64,
        01.449360f64,
        01.457288f64,
        01.465237f64,
        01.473206f64,
        01.481196f64,
        01.489208f64,
        01.497240f64,
        01.505293f64,
        01.513368f64,
        01.521465f64,
        01.529583f64,
        01.537723f64,
        01.545885f64,
        01.554068f64,
        01.562275f64,
        01.570503f64,
        01.578754f64,
        01.587028f64,
        01.595325f64,
        01.603644f64,
        01.611987f64,
        01.620353f64,
        01.628743f64,
        01.637156f64,
        01.645593f64,
        01.654053f64,
        01.662538f64,
        01.671047f64,
        01.679581f64,
        01.688139f64,
        01.696721f64,
        01.705329f64,
        01.713961f64,
        01.722619f64,
        01.731303f64,
        01.740011f64,
        01.748746f64,
        01.757506f64,
        01.766293f64,
        01.775106f64,
        01.783945f64,
        01.792810f64,
        01.801703f64,
        01.810623f64,
        01.819569f64,
        01.828543f64,
        01.837545f64,
        01.846574f64,
        01.855631f64,
        01.864717f64,
        01.873830f64,
        01.882972f64,
        01.892143f64,
        01.901343f64,
        01.910572f64,
        01.919830f64,
        01.929117f64,
        01.938434f64,
        01.947781f64,
        01.957158f64,
        01.966566f64,
        01.976004f64,
        01.985473f64,
        01.994972f64,
        02.004503f64,
        02.014065f64,
        02.023659f64,
        02.033285f64,
        02.042943f64,
        02.052633f64,
        02.062355f64,
        02.072110f64,
        02.081899f64,
        02.091720f64,
        02.101575f64,
        02.111464f64,
        02.121386f64,
        02.131343f64,
        02.141334f64,
        02.151360f64,
        02.161421f64,
        02.171517f64,
        02.181648f64,
        02.191815f64,
        02.202018f64,
        02.212257f64,
        02.222533f64,
        02.232845f64,
        02.243195f64,
        02.253582f64,
        02.264006f64,
        02.274468f64,
        02.284968f64,
        02.295507f64,
        02.306084f64,
        02.316701f64,
        02.327356f64,
        02.338051f64,
        02.348786f64,
        02.359562f64,
        02.370377f64,
        02.381234f64,
        02.392131f64,
        02.403070f64,
        02.414051f64,
        02.425073f64,
        02.436138f64,
        02.447246f64,
        02.458397f64,
        02.469591f64,
        02.480828f64,
        02.492110f64,
        02.503436f64,
        02.514807f64,
        02.526222f64,
        02.537684f64,
        02.549190f64,
        02.560743f64,
        02.572343f64,
        02.583989f64,
        02.595682f64,
        02.607423f64,
        02.619212f64,
        02.631050f64,
        02.642936f64,
        02.654871f64,
        02.666855f64,
        02.678890f64,
        02.690975f64,
        02.703110f64,
        02.715297f64,
        02.727535f64,
        02.739825f64,
        02.752168f64,
        02.764563f64,
        02.777012f64,
        02.789514f64,
        02.802070f64,
        02.814681f64,
        02.827347f64,
        02.840069f64,
        02.852846f64,
        02.865680f64,
        02.878570f64,
        02.891518f64,
        02.904524f64,
        02.917588f64,
        02.930712f64,
        02.943894f64,
        02.957136f64,
        02.970439f64,
        02.983802f64,
        02.997227f64,
        03.010714f64,
        03.024263f64,
        03.037875f64,
        03.051551f64,
        03.065290f64,
        03.079095f64,
        03.092965f64,
        03.106900f64,
        03.120902f64,
        03.134971f64,
        03.149107f64,
        03.163312f64,
        03.177585f64,
        03.191928f64,
        03.206340f64,
        03.220824f64,
        03.235378f64,
        03.250005f64,
        03.264704f64,
        03.279477f64,
        03.294323f64,
        03.309244f64,
        03.324240f64,
        03.339312f64,
        03.354461f64,
        03.369687f64,
        03.384992f64,
        03.400375f64,
        03.415838f64,
        03.431381f64,
        03.447005f64,
        03.462711f64,
        03.478500f64,
        03.494372f64,
        03.510328f64,
        03.526370f64,
        03.542497f64,
        03.558711f64,
        03.575012f64,
        03.591402f64,
        03.607881f64,
        03.624450f64,
        03.641111f64,
        03.657863f64,
        03.674708f64,
        03.691646f64,
        03.708680f64,
        03.725809f64,
        03.743034f64,
        03.760357f64,
        03.777779f64,
        03.795300f64,
        03.812921f64,
        03.830645f64,
        03.848470f64,
        03.866400f64,
        03.884434f64,
        03.902574f64,
        03.920821f64,
        03.939176f64,
        03.957640f64,
        03.976215f64,
        03.994901f64,
        04.013699f64,
        04.032612f64,
        04.051639f64,
        04.070783f64,
        04.090045f64,
        04.109425f64,
        04.128925f64,
        04.148547f64,
        04.168292f64,
        04.188160f64,
        04.208154f64,
        04.228275f64,
        04.248524f64,
        04.268903f64,
        04.289413f64,
        04.310056f64,
        04.330832f64,
        04.351745f64,
        04.372794f64,
        04.393982f64,
        04.415310f64,
        04.436781f64,
        04.458395f64,
        04.480154f64,
        04.502060f64,
        04.524114f64,
        04.546319f64,
        04.568676f64,
        04.591187f64,
        04.613854f64,
        04.636678f64,
        04.659662f64,
        04.682807f64,
        04.706116f64,
        04.729590f64,
        04.753231f64,
        04.777041f64,
        04.801024f64,
        04.825179f64,
        04.849511f64,
        04.874020f64,
        04.898710f64,
        04.923582f64,
        04.948639f64,
        04.973883f64,
        04.999316f64,
        05.024942f64,
        05.050761f64,
        05.076778f64,
        05.102993f64,
        05.129411f64,
        05.156034f64,
        05.182864f64,
        05.209903f64,
        05.237156f64,
        05.264625f64,
        05.292312f64,
        05.320220f64,
        05.348354f64,
        05.376714f64,
        05.405306f64,
        05.434131f64,
        05.463193f64,
        05.492496f64,
        05.522042f64,
        05.551836f64,
        05.581880f64,
        05.612178f64,
        05.642734f64,
        05.673552f64,
        05.704634f64,
        05.735986f64,
        05.767610f64,
        05.799512f64,
        05.831694f64,
        05.864161f64,
        05.896918f64,
        05.929968f64,
        05.963316f64,
        05.996967f64,
        06.030925f64,
        06.065194f64,
        06.099780f64,
        06.134687f64,
        06.169921f64,
        06.205486f64,
        06.241387f64,
        06.277630f64,
        06.314220f64,
        06.351163f64,
        06.388465f64,
        06.426130f64,
        06.464166f64,
        06.502578f64,
        06.541371f64,
        06.580553f64,
        06.620130f64,
        06.660109f64,
        06.700495f64,
        06.741297f64,
        06.782520f64,
        06.824173f64,
        06.866262f64,
        06.908795f64,
        06.951780f64,
        06.995225f64,
        07.039137f64,
        07.083525f64,
        07.128398f64,
        07.173764f64,
        07.219632f64,
        07.266011f64,
        07.312910f64,
        07.360339f64,
        07.408308f64,
        07.456827f64,
        07.505905f64,
        07.555554f64,
        07.605785f64,
        07.656608f64,
        07.708035f64,
        07.760077f64,
        07.812747f64,
        07.866057f64,
        07.920019f64,
        07.974647f64,
        08.029953f64,
        08.085952f64,
        08.142657f64,
        08.200083f64,
        08.258245f64,
        08.317158f64,
        08.376837f64,
        08.437300f64,
        08.498562f64,
        08.560641f64,
        08.623554f64,
        08.687319f64,
        08.751955f64,
        08.817481f64,
        08.883916f64,
        08.951282f64,
        09.019600f64,
        09.088889f64,
        09.159174f64,
        09.230477f64,
        09.302822f64,
        09.376233f64,
        09.450735f64,
        09.526355f64,
        09.603118f64,
        09.681054f64,
        09.760191f64,
        09.840558f64,
        09.922186f64,
        10.005107f64,
        10.089353f64,
        10.174959f64,
        10.261958f64,
        10.350389f64,
        10.440287f64,
        10.531693f64,
        10.624646f64,
        10.719188f64,
        10.815362f64,
        10.913214f64,
        11.012789f64,
        11.114137f64,
        11.217307f64,
        11.322352f64,
        11.429325f64,
        11.538283f64,
        11.649285f64,
        11.762390f64,
        11.877664f64,
        11.995170f64,
        12.114979f64,
        12.237161f64,
        12.361791f64,
        12.488946f64,
        12.618708f64,
        12.751161f64,
        12.886394f64,
        13.024498f64,
        13.165570f64,
        13.309711f64,
        13.457026f64,
        13.607625f64,
        13.761625f64,
        13.919145f64,
        14.080314f64,
        14.245263f64,
        14.414134f64,
        14.587072f64,
        14.764233f64,
        14.945778f64,
        15.131877f64,
        15.322712f64,
        15.518470f64,
        15.719353f64,
        15.925570f64,
        16.137345f64,
        16.354912f64,
        16.578520f64,
        16.808433f64,
        17.044929f64,
        17.288305f64,
        17.538873f64,
        17.796967f64,
        18.062943f64,
        18.337176f64,
        18.620068f64,
        18.912049f64,
        19.213574f64,
        19.525133f64,
        19.847249f64,
        20.180480f64,
        20.525429f64,
        20.882738f64,
        21.253102f64,
        21.637266f64,
        22.036036f64,
        22.450278f64,
        22.880933f64,
        23.329017f64,
        23.795634f64,
        24.281981f64,
        24.789364f64,
        25.319207f64,
        25.873062f64,
        26.452634f64,
        27.059789f64,
        27.696581f64,
        28.365274f64,
        29.068370f64,
        29.808638f64,
        30.589157f64,
        31.413354f64,
        32.285060f64,
        33.208568f64,
        34.188705f64,
        35.230920f64,
        36.341388f64,
        37.527131f64,
        38.796172f64,
        40.157721f64,
        41.622399f64,
        43.202525f64,
        44.912465f64,
        46.769077f64,
        48.792279f64,
        51.005773f64,
        53.437996f64,
        56.123356f64,
        59.103894f64,
    ];
    let mut X: libc::c_double = 0.;
    let mut U: libc::c_double = 0.;
    let mut V: libc::c_double = 0.;
    let mut RANLAN: libc::c_double = 0.;
    let mut I: libc::c_int = 0;
    X = gsl_rng_uniform_pos(r);
    U = 1000.0f64 * X;
    I = U as libc::c_int;
    U = U - I as libc::c_double;
    if I >= 70 as libc::c_int && I <= 800 as libc::c_int {
        RANLAN = F[I as usize]
            + U * (F[(I + 1 as libc::c_int) as usize] - F[I as usize]);
    } else if I >= 7 as libc::c_int && I <= 980 as libc::c_int {
        RANLAN = F[I as usize]
            + U
                * (F[(I + 1 as libc::c_int) as usize] - F[I as usize]
                    - 0.25f64 * (1 as libc::c_int as libc::c_double - U)
                        * (F[(I + 2 as libc::c_int) as usize]
                            - F[(I + 1 as libc::c_int) as usize] - F[I as usize]
                            + F[(I - 1 as libc::c_int) as usize]));
    } else if I < 7 as libc::c_int {
        V = log(X);
        U = 1 as libc::c_int as libc::c_double / V;
        RANLAN = (0.99858950f64 + (3.45213058E1f64 + 1.70854528E1f64 * U) * U)
            / (1 as libc::c_int as libc::c_double
                + (3.41760202E1f64 + 4.01244582f64 * U) * U)
            * (-log(-0.91893853f64 - V) - 1 as libc::c_int as libc::c_double);
    } else {
        U = 1 as libc::c_int as libc::c_double - X;
        V = U * U;
        if X <= 0.999f64 {
            RANLAN = (1.00060006f64 + 2.63991156E2f64 * U + 4.37320068E3f64 * V)
                / ((1 as libc::c_int as libc::c_double + 2.57368075E2f64 * U
                    + 3.41448018E3f64 * V) * U);
        } else {
            RANLAN = (1.00001538f64 + 6.07514119E3f64 * U + 7.34266409E5f64 * V)
                / ((1 as libc::c_int as libc::c_double + 6.06511919E3f64 * U
                    + 6.94021044E5f64 * V) * U);
        }
    }
    return RANLAN;
}
