#![allow(
    dead_code,
    mutable_transmutes,
    non_camel_case_types,
    non_snake_case,
    non_upper_case_globals,
    unused_assignments,
    unused_mut
)]
pub type uint32_t = __uint32_t;
pub type __uint32_t = u32;
pub type size_t = u64;
pub type uint8_t = __uint8_t;
pub type __uint8_t = u8;
pub type uint64_t = __uint64_t;
pub type __uint64_t = u64;
static mut crc32tab: [uint32_t; 256] = [
    0 as i32 as uint32_t,
    0x77073096 as i32 as uint32_t,
    0xee0e612c as u32,
    0x990951ba as u32,
    0x76dc419 as i32 as uint32_t,
    0x706af48f as i32 as uint32_t,
    0xe963a535 as u32,
    0x9e6495a3 as u32,
    0xedb8832 as i32 as uint32_t,
    0x79dcb8a4 as i32 as uint32_t,
    0xe0d5e91e as u32,
    0x97d2d988 as u32,
    0x9b64c2b as i32 as uint32_t,
    0x7eb17cbd as i32 as uint32_t,
    0xe7b82d07 as u32,
    0x90bf1d91 as u32,
    0x1db71064 as i32 as uint32_t,
    0x6ab020f2 as i32 as uint32_t,
    0xf3b97148 as u32,
    0x84be41de as u32,
    0x1adad47d as i32 as uint32_t,
    0x6ddde4eb as i32 as uint32_t,
    0xf4d4b551 as u32,
    0x83d385c7 as u32,
    0x136c9856 as i32 as uint32_t,
    0x646ba8c0 as i32 as uint32_t,
    0xfd62f97a as u32,
    0x8a65c9ec as u32,
    0x14015c4f as i32 as uint32_t,
    0x63066cd9 as i32 as uint32_t,
    0xfa0f3d63 as u32,
    0x8d080df5 as u32,
    0x3b6e20c8 as i32 as uint32_t,
    0x4c69105e as i32 as uint32_t,
    0xd56041e4 as u32,
    0xa2677172 as u32,
    0x3c03e4d1 as i32 as uint32_t,
    0x4b04d447 as i32 as uint32_t,
    0xd20d85fd as u32,
    0xa50ab56b as u32,
    0x35b5a8fa as i32 as uint32_t,
    0x42b2986c as i32 as uint32_t,
    0xdbbbc9d6 as u32,
    0xacbcf940 as u32,
    0x32d86ce3 as i32 as uint32_t,
    0x45df5c75 as i32 as uint32_t,
    0xdcd60dcf as u32,
    0xabd13d59 as u32,
    0x26d930ac as i32 as uint32_t,
    0x51de003a as i32 as uint32_t,
    0xc8d75180 as u32,
    0xbfd06116 as u32,
    0x21b4f4b5 as i32 as uint32_t,
    0x56b3c423 as i32 as uint32_t,
    0xcfba9599 as u32,
    0xb8bda50f as u32,
    0x2802b89e as i32 as uint32_t,
    0x5f058808 as i32 as uint32_t,
    0xc60cd9b2 as u32,
    0xb10be924 as u32,
    0x2f6f7c87 as i32 as uint32_t,
    0x58684c11 as i32 as uint32_t,
    0xc1611dab as u32,
    0xb6662d3d as u32,
    0x76dc4190 as i32 as uint32_t,
    0x1db7106 as i32 as uint32_t,
    0x98d220bc as u32,
    0xefd5102a as u32,
    0x71b18589 as i32 as uint32_t,
    0x6b6b51f as i32 as uint32_t,
    0x9fbfe4a5 as u32,
    0xe8b8d433 as u32,
    0x7807c9a2 as i32 as uint32_t,
    0xf00f934 as i32 as uint32_t,
    0x9609a88e as u32,
    0xe10e9818 as u32,
    0x7f6a0dbb as i32 as uint32_t,
    0x86d3d2d as i32 as uint32_t,
    0x91646c97 as u32,
    0xe6635c01 as u32,
    0x6b6b51f4 as i32 as uint32_t,
    0x1c6c6162 as i32 as uint32_t,
    0x856530d8 as u32,
    0xf262004e as u32,
    0x6c0695ed as i32 as uint32_t,
    0x1b01a57b as i32 as uint32_t,
    0x8208f4c1 as u32,
    0xf50fc457 as u32,
    0x65b0d9c6 as i32 as uint32_t,
    0x12b7e950 as i32 as uint32_t,
    0x8bbeb8ea as u32,
    0xfcb9887c as u32,
    0x62dd1ddf as i32 as uint32_t,
    0x15da2d49 as i32 as uint32_t,
    0x8cd37cf3 as u32,
    0xfbd44c65 as u32,
    0x4db26158 as i32 as uint32_t,
    0x3ab551ce as i32 as uint32_t,
    0xa3bc0074 as u32,
    0xd4bb30e2 as u32,
    0x4adfa541 as i32 as uint32_t,
    0x3dd895d7 as i32 as uint32_t,
    0xa4d1c46d as u32,
    0xd3d6f4fb as u32,
    0x4369e96a as i32 as uint32_t,
    0x346ed9fc as i32 as uint32_t,
    0xad678846 as u32,
    0xda60b8d0 as u32,
    0x44042d73 as i32 as uint32_t,
    0x33031de5 as i32 as uint32_t,
    0xaa0a4c5f as u32,
    0xdd0d7cc9 as u32,
    0x5005713c as i32 as uint32_t,
    0x270241aa as i32 as uint32_t,
    0xbe0b1010 as u32,
    0xc90c2086 as u32,
    0x5768b525 as i32 as uint32_t,
    0x206f85b3 as i32 as uint32_t,
    0xb966d409 as u32,
    0xce61e49f as u32,
    0x5edef90e as i32 as uint32_t,
    0x29d9c998 as i32 as uint32_t,
    0xb0d09822 as u32,
    0xc7d7a8b4 as u32,
    0x59b33d17 as i32 as uint32_t,
    0x2eb40d81 as i32 as uint32_t,
    0xb7bd5c3b as u32,
    0xc0ba6cad as u32,
    0xedb88320 as u32,
    0x9abfb3b6 as u32,
    0x3b6e20c as i32 as uint32_t,
    0x74b1d29a as i32 as uint32_t,
    0xead54739 as u32,
    0x9dd277af as u32,
    0x4db2615 as i32 as uint32_t,
    0x73dc1683 as i32 as uint32_t,
    0xe3630b12 as u32,
    0x94643b84 as u32,
    0xd6d6a3e as i32 as uint32_t,
    0x7a6a5aa8 as i32 as uint32_t,
    0xe40ecf0b as u32,
    0x9309ff9d as u32,
    0xa00ae27 as i32 as uint32_t,
    0x7d079eb1 as i32 as uint32_t,
    0xf00f9344 as u32,
    0x8708a3d2 as u32,
    0x1e01f268 as i32 as uint32_t,
    0x6906c2fe as i32 as uint32_t,
    0xf762575d as u32,
    0x806567cb as u32,
    0x196c3671 as i32 as uint32_t,
    0x6e6b06e7 as i32 as uint32_t,
    0xfed41b76 as u32,
    0x89d32be0 as u32,
    0x10da7a5a as i32 as uint32_t,
    0x67dd4acc as i32 as uint32_t,
    0xf9b9df6f as u32,
    0x8ebeeff9 as u32,
    0x17b7be43 as i32 as uint32_t,
    0x60b08ed5 as i32 as uint32_t,
    0xd6d6a3e8 as u32,
    0xa1d1937e as u32,
    0x38d8c2c4 as i32 as uint32_t,
    0x4fdff252 as i32 as uint32_t,
    0xd1bb67f1 as u32,
    0xa6bc5767 as u32,
    0x3fb506dd as i32 as uint32_t,
    0x48b2364b as i32 as uint32_t,
    0xd80d2bda as u32,
    0xaf0a1b4c as u32,
    0x36034af6 as i32 as uint32_t,
    0x41047a60 as i32 as uint32_t,
    0xdf60efc3 as u32,
    0xa867df55 as u32,
    0x316e8eef as i32 as uint32_t,
    0x4669be79 as i32 as uint32_t,
    0xcb61b38c as u32,
    0xbc66831a as u32,
    0x256fd2a0 as i32 as uint32_t,
    0x5268e236 as i32 as uint32_t,
    0xcc0c7795 as u32,
    0xbb0b4703 as u32,
    0x220216b9 as i32 as uint32_t,
    0x5505262f as i32 as uint32_t,
    0xc5ba3bbe as u32,
    0xb2bd0b28 as u32,
    0x2bb45a92 as i32 as uint32_t,
    0x5cb36a04 as i32 as uint32_t,
    0xc2d7ffa7 as u32,
    0xb5d0cf31 as u32,
    0x2cd99e8b as i32 as uint32_t,
    0x5bdeae1d as i32 as uint32_t,
    0x9b64c2b0 as u32,
    0xec63f226 as u32,
    0x756aa39c as i32 as uint32_t,
    0x26d930a as i32 as uint32_t,
    0x9c0906a9 as u32,
    0xeb0e363f as u32,
    0x72076785 as i32 as uint32_t,
    0x5005713 as i32 as uint32_t,
    0x95bf4a82 as u32,
    0xe2b87a14 as u32,
    0x7bb12bae as i32 as uint32_t,
    0xcb61b38 as i32 as uint32_t,
    0x92d28e9b as u32,
    0xe5d5be0d as u32,
    0x7cdcefb7 as i32 as uint32_t,
    0xbdbdf21 as i32 as uint32_t,
    0x86d3d2d4 as u32,
    0xf1d4e242 as u32,
    0x68ddb3f8 as i32 as uint32_t,
    0x1fda836e as i32 as uint32_t,
    0x81be16cd as u32,
    0xf6b9265b as u32,
    0x6fb077e1 as i32 as uint32_t,
    0x18b74777 as i32 as uint32_t,
    0x88085ae6 as u32,
    0xff0f6a70 as u32,
    0x66063bca as i32 as uint32_t,
    0x11010b5c as i32 as uint32_t,
    0x8f659eff as u32,
    0xf862ae69 as u32,
    0x616bffd3 as i32 as uint32_t,
    0x166ccf45 as i32 as uint32_t,
    0xa00ae278 as u32,
    0xd70dd2ee as u32,
    0x4e048354 as i32 as uint32_t,
    0x3903b3c2 as i32 as uint32_t,
    0xa7672661 as u32,
    0xd06016f7 as u32,
    0x4969474d as i32 as uint32_t,
    0x3e6e77db as i32 as uint32_t,
    0xaed16a4a as u32,
    0xd9d65adc as u32,
    0x40df0b66 as i32 as uint32_t,
    0x37d83bf0 as i32 as uint32_t,
    0xa9bcae53 as u32,
    0xdebb9ec5 as u32,
    0x47b2cf7f as i32 as uint32_t,
    0x30b5ffe9 as i32 as uint32_t,
    0xbdbdf21c as u32,
    0xcabac28a as u32,
    0x53b39330 as i32 as uint32_t,
    0x24b4a3a6 as i32 as uint32_t,
    0xbad03605 as u32,
    0xcdd70693 as u32,
    0x54de5729 as i32 as uint32_t,
    0x23d967bf as i32 as uint32_t,
    0xb3667a2e as u32,
    0xc4614ab8 as u32,
    0x5d681b02 as i32 as uint32_t,
    0x2a6f2b94 as i32 as uint32_t,
    0xb40bbe37 as u32,
    0xc30c8ea1 as u32,
    0x5a05df1b as i32 as uint32_t,
    0x2d02ef8d as i32 as uint32_t,
];
#[no_mangle]
pub unsafe extern "C" fn hash_crc32(
    mut key: *const i8,
    mut key_length: size_t,
) -> uint32_t {
    let mut x: uint64_t = 0;
    let mut crc: uint32_t = 4294967295 as u32;
    x = 0 as i32 as uint64_t;
    while x < key_length {
        crc = crc >> 8 as i32
            ^ crc32tab[((crc as u64 ^ *key.offset(x as isize) as uint64_t)
                & 0xff as i32 as u64) as usize];
        x = x.wrapping_add(1);
        x;
    }
    return !crc >> 16 as i32 & 0x7fff as i32 as u32;
}
#[no_mangle]
pub unsafe extern "C" fn hash_crc32a(
    mut key: *const i8,
    mut key_length: size_t,
) -> uint32_t {
    let mut p: *const uint8_t = key as *const uint8_t;
    let mut crc: uint32_t = 0;
    crc = !(0 as u32);
    loop {
        let fresh0 = key_length;
        key_length = key_length.wrapping_sub(1);
        if !(fresh0 != 0) {
            break;
        }
        let fresh1 = p;
        p = p.offset(1);
        crc = crc32tab[((crc ^ *fresh1 as u32) & 0xff as i32 as u32) as usize]
            ^ crc >> 8 as i32;
    }
    return crc ^ !(0 as u32);
}