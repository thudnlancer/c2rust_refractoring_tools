#![allow(
    dead_code,
    mutable_transmutes,
    non_camel_case_types,
    non_snake_case,
    non_upper_case_globals,
    unused_assignments,
    unused_mut
)]
pub type __uint32_t = u32;
pub type uint32_t = __uint32_t;
pub type ucs4_t = uint32_t;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed {
    pub header: [i32; 1],
    pub level1: [i32; 15],
    pub level2: [libc::c_short; 384],
    pub level3: [u32; 880],
}
#[inline]
unsafe extern "C" fn bitmap_lookup(
    mut table: *const libc::c_void,
    mut uc: ucs4_t,
) -> i32 {
    let mut index1: u32 = uc >> 16 as i32;
    if index1 < *(table as *const i32).offset(0 as i32 as isize) as u32 {
        let mut lookup1: i32 = *(table as *const i32)
            .offset((1 as i32 as u32).wrapping_add(index1) as isize);
        if lookup1 >= 0 as i32 {
            let mut index2: u32 = uc >> 9 as i32 & 127 as i32 as u32;
            let mut lookup2: i32 = *(table as *const libc::c_short)
                .offset((lookup1 as u32).wrapping_add(index2) as isize) as i32;
            if lookup2 >= 0 as i32 {
                let mut index3: u32 = uc >> 5 as i32 & 15 as i32 as u32;
                let mut lookup3: u32 = *(table as *const u32)
                    .offset((lookup2 as u32).wrapping_add(index3) as isize);
                return (lookup3 >> (uc & 0x1f as i32 as u32) & 1 as i32 as u32) as i32;
            }
        }
    }
    return 0 as i32;
}
static mut u_casing_property_case_ignorable: C2RustUnnamed = C2RustUnnamed {
    header: [0; 1],
    level1: [0; 15],
    level2: [0; 384],
    level3: [0; 880],
};
#[no_mangle]
pub unsafe extern "C" fn uc_is_case_ignorable(mut uc: ucs4_t) -> bool {
    return bitmap_lookup(
        &u_casing_property_case_ignorable as *const C2RustUnnamed as *const libc::c_void,
        uc,
    ) != 0;
}
unsafe extern "C" fn run_static_initializers() {
    u_casing_property_case_ignorable = {
        let mut init = C2RustUnnamed {
            header: [15 as i32],
            level1: [
                (16 as i32 as u64)
                    .wrapping_mul(::core::mem::size_of::<i32>() as u64)
                    .wrapping_div(::core::mem::size_of::<libc::c_short>() as u64)
                    .wrapping_add(0 as i32 as u64) as i32,
                (16 as i32 as u64)
                    .wrapping_mul(::core::mem::size_of::<i32>() as u64)
                    .wrapping_div(::core::mem::size_of::<libc::c_short>() as u64)
                    .wrapping_add(128 as i32 as u64) as i32,
                -(1 as i32),
                -(1 as i32),
                -(1 as i32),
                -(1 as i32),
                -(1 as i32),
                -(1 as i32),
                -(1 as i32),
                -(1 as i32),
                -(1 as i32),
                -(1 as i32),
                -(1 as i32),
                -(1 as i32),
                (16 as i32 as u64)
                    .wrapping_mul(::core::mem::size_of::<i32>() as u64)
                    .wrapping_div(::core::mem::size_of::<libc::c_short>() as u64)
                    .wrapping_add(256 as i32 as u64) as i32,
            ],
            level2: [
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(0 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(16 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(32 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(48 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(64 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(80 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(96 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(112 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(128 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(144 as i32 as u64) as libc::c_short,
                -(1 as i32) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(160 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(176 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(192 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(208 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(224 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(240 as i32 as u64) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(256 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(272 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(288 as i32 as u64) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(304 as i32 as u64) as libc::c_short,
                -(1 as i32) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(320 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(336 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(352 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(368 as i32 as u64) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(384 as i32 as u64) as libc::c_short,
                -(1 as i32) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(400 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(416 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(432 as i32 as u64) as libc::c_short,
                -(1 as i32) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(448 as i32 as u64) as libc::c_short,
                -(1 as i32) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(464 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(480 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(496 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(512 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(528 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(544 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(560 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(576 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(592 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(608 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(624 as i32 as u64) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(640 as i32 as u64) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(656 as i32 as u64) as libc::c_short,
                -(1 as i32) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(672 as i32 as u64) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(688 as i32 as u64) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(704 as i32 as u64) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(720 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(736 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(752 as i32 as u64) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(768 as i32 as u64) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(784 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(800 as i32 as u64) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(816 as i32 as u64) as libc::c_short,
                -(1 as i32) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(832 as i32 as u64) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(848 as i32 as u64) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                (16 as i32 as u64)
                    .wrapping_add(
                        (384 as i32 as u64)
                            .wrapping_mul(::core::mem::size_of::<libc::c_short>() as u64)
                            .wrapping_div(::core::mem::size_of::<i32>() as u64),
                    )
                    .wrapping_add(864 as i32 as u64) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
                -(1 as i32) as libc::c_short,
            ],
            level3: [
                0 as u32,
                0x4004000 as u32,
                0x40000000 as u32,
                0x1 as u32,
                0 as u32,
                0x190a100 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0xfe000000 as u32,
                0xfffffffc as u32,
                0xffffffe0 as u32,
                0xffffffff as u32,
                0xffffffff as u32,
                0xffffffdf as u32,
                0x30ffff as u32,
                0xb0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x3f8 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x82000000 as u32,
                0 as u32,
                0xfffe0000 as u32,
                0xbfffffff as u32,
                0xb6 as u32,
                0x100000 as u32,
                0x17ff003f as u32,
                0 as u32,
                0xfffff801 as u32,
                0x10000 as u32,
                0 as u32,
                0 as u32,
                0xbfc00000 as u32,
                0x3dff as u32,
                0x28000 as u32,
                0xffff0000 as u32,
                0x7ff as u32,
                0 as u32,
                0 as u32,
                0x1ffc0 as u32,
                0 as u32,
                0x243ff800 as u32,
                0xffc00000 as u32,
                0x3fff as u32,
                0xe000000 as u32,
                0 as u32,
                0xff030100 as u32,
                0 as u32,
                0xfffffe00 as u32,
                0xffffffff as u32,
                0x7 as u32,
                0x14000000 as u32,
                0xfe21fe as u32,
                0x2000c as u32,
                0x2 as u32,
                0x10000000 as u32,
                0x201e as u32,
                0x4000000c as u32,
                0x6 as u32,
                0x10000000 as u32,
                0x23986 as u32,
                0x230000 as u32,
                0x6 as u32,
                0x10000000 as u32,
                0x21be as u32,
                0xfc00000c as u32,
                0x2 as u32,
                0x90000000 as u32,
                0x60201e as u32,
                0xc as u32,
                0x4 as u32,
                0 as u32,
                0x2001 as u32,
                0 as u32,
                0x11 as u32,
                0xd0000000 as u32,
                0x603dc1 as u32,
                0xc as u32,
                0x2 as u32,
                0x90000000 as u32,
                0x3040 as u32,
                0xc as u32,
                0x3 as u32,
                0x18000000 as u32,
                0x201e as u32,
                0xc as u32,
                0x2 as u32,
                0 as u32,
                0x5c0400 as u32,
                0 as u32,
                0 as u32,
                0x7f20000 as u32,
                0x7fc0 as u32,
                0 as u32,
                0 as u32,
                0x1ff20000 as u32,
                0x7f40 as u32,
                0 as u32,
                0x3000000 as u32,
                0x2a00000 as u32,
                0 as u32,
                0x7ffe0000 as u32,
                0xfeffe0df as u32,
                0x1fffffff as u32,
                0x40 as u32,
                0 as u32,
                0 as u32,
                0x66fde000 as u32,
                0xc3000000 as u32,
                0x1e0001 as u32,
                0x20002064 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0xe0000000 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x1c0000 as u32,
                0xc0000 as u32,
                0xc0000 as u32,
                0xc0000 as u32,
                0 as u32,
                0x3fb00000 as u32,
                0x208ffe40 as u32,
                0 as u32,
                0xf800 as u32,
                0 as u32,
                0x8 as u32,
                0 as u32,
                0x60 as u32,
                0x200 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0xe040187 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x9800000 as u32,
                0 as u32,
                0x7f400000 as u32,
                0x9ff81fe5 as u32,
                0 as u32,
                0xffff0080 as u32,
                0x7fff as u32,
                0 as u32,
                0xf as u32,
                0x17d00000 as u32,
                0x4 as u32,
                0xff800 as u32,
                0x3 as u32,
                0x3b3c as u32,
                0 as u32,
                0x3a340 as u32,
                0 as u32,
                0xcff000 as u32,
                0 as u32,
                0x3f000000 as u32,
                0 as u32,
                0 as u32,
                0xfff70000 as u32,
                0x31021fd as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0xffffffff as u32,
                0xffffffff as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0xa0000000 as u32,
                0xe000e003 as u32,
                0x6000e000 as u32,
                0x300f800 as u32,
                0x7c90 as u32,
                0 as u32,
                0xffdf as u32,
                0 as u32,
                0 as u32,
                0xffff0000 as u32,
                0x1ffff as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x38000 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x80008000 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0xffffffff as u32,
                0 as u32,
                0x8000 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x20 as u32,
                0x83e3c00 as u32,
                0 as u32,
                0 as u32,
                0x7e000000 as u32,
                0 as u32,
                0 as u32,
                0x70000000 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x200000 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x3f000000 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x1000 as u32,
                0 as u32,
                0 as u32,
                0xbff78000 as u32,
                0xc0000000 as u32,
                0 as u32,
                0 as u32,
                0x30000 as u32,
                0xffffffff as u32,
                0x3 as u32,
                0 as u32,
                0 as u32,
                0x700 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x844 as u32,
                0x1060 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x30 as u32,
                0x8003ffff as u32,
                0 as u32,
                0x3fc0 as u32,
                0x3ff80 as u32,
                0 as u32,
                0x7 as u32,
                0x33c80000 as u32,
                0x8000 as u32,
                0x60 as u32,
                0 as u32,
                0x667e00 as u32,
                0x1008 as u32,
                0x10010000 as u32,
                0 as u32,
                0xc19d0000 as u32,
                0x20000002 as u32,
                0x583000 as u32,
                0 as u32,
                0 as u32,
                0x8000000 as u32,
                0xc00 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x2120 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x40000000 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0xfffc0000 as u32,
                0x7 as u32,
                0 as u32,
                0x8ffff as u32,
                0xffff as u32,
                0x240000 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x80000000 as u32,
                0x4004080 as u32,
                0x40000000 as u32,
                0x1 as u32,
                0x10000 as u32,
                0xc0000000 as u32,
                0 as u32,
                0 as u32,
                0xe000008 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x20000000 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x1 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x7c00000 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x6 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0xf06e as u32,
                0x87000000 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x60 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0xf0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x1800 as u32,
                0 as u32,
                0xe0000000 as u32,
                0 as u32,
                0 as u32,
                0x1ffc0 as u32,
                0 as u32,
                0x3c as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x2 as u32,
                0xff000000 as u32,
                0x7f as u32,
                0x80190000 as u32,
                0x3 as u32,
                0x26780000 as u32,
                0x2004 as u32,
                0 as u32,
                0x7 as u32,
                0x1fef80 as u32,
                0 as u32,
                0x80000 as u32,
                0x3 as u32,
                0x7fc00000 as u32,
                0x9e00 as u32,
                0 as u32,
                0 as u32,
                0x40d38000 as u32,
                0x2 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x80000000 as u32,
                0x7f8 as u32,
                0x3 as u32,
                0x18000000 as u32,
                0x1 as u32,
                0x1f1fc0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0xff000000 as u32,
                0x4000005c as u32,
                0 as u32,
                0 as u32,
                0x85f80000 as u32,
                0xd as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0xb03c0000 as u32,
                0x30000001 as u32,
                0 as u32,
                0 as u32,
                0xa7f80000 as u32,
                0x1 as u32,
                0 as u32,
                0 as u32,
                0xbf2800 as u32,
                0 as u32,
                0 as u32,
                0xe0000000 as u32,
                0xfbc as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x6ff8000 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x58000000 as u32,
                0x8 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0xcf00000 as u32,
                0x1 as u32,
                0x7fe as u32,
                0x79f80000 as u32,
                0xe7e0080 as u32,
                0 as u32,
                0x37ffc00 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0xbf7f0000 as u32,
                0 as u32,
                0 as u32,
                0xfffc0000 as u32,
                0x6dfcff as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0xb47e0000 as u32,
                0xbf as u32,
                0 as u32,
                0xa30000 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x180000 as u32,
                0x3 as u32,
                0x7c00000 as u32,
                0x5 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0xffff0000 as u32,
                0x3fff81 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x1f0000 as u32,
                0 as u32,
                0x7f0000 as u32,
                0xf as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x8000 as u32,
                0 as u32,
                0xffff8000 as u32,
                0 as u32,
                0 as u32,
                0x1b as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x6fef0000 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x60000000 as u32,
                0xf as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0xffffffff as u32,
                0xffff3fff as u32,
                0x7f as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0xfff80380 as u32,
                0xfe7 as u32,
                0x3c00 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x1c as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0xffffffff as u32,
                0xf87fffff as u32,
                0xffffffff as u32,
                0x201fff as u32,
                0xf8000010 as u32,
                0xfffe as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0xf9ffff7f as u32,
                0x7db as u32,
                0 as u32,
                0 as u32,
                0x8000 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x3fff0000 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x4000 as u32,
                0 as u32,
                0xf000 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0xf800 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0x7f0000 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0xff0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0xf8000000 as u32,
                0x2 as u32,
                0xffffffff as u32,
                0xffffffff as u32,
                0xffffffff as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0 as u32,
                0xffffffff as u32,
                0xffffffff as u32,
                0xffffffff as u32,
                0xffffffff as u32,
                0xffffffff as u32,
                0xffffffff as u32,
                0xffffffff as u32,
                0xffff as u32,
            ],
        };
        init
    };
}
#[used]
#[cfg_attr(target_os = "linux", link_section = ".init_array")]
#[cfg_attr(target_os = "windows", link_section = ".CRT$XIB")]
#[cfg_attr(target_os = "macos", link_section = "__DATA,__mod_init_func")]
static INIT_ARRAY: [unsafe extern "C" fn(); 1] = [run_static_initializers];