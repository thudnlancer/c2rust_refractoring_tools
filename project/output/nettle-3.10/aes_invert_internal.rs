#![allow(
    dead_code,
    mutable_transmutes,
    non_camel_case_types,
    non_snake_case,
    non_upper_case_globals,
    unused_assignments,
    unused_mut
)]
pub type __uint32_t = u32;
pub type uint32_t = __uint32_t;
static mut mtable: [uint32_t; 256] = [
    0 as i32 as uint32_t,
    0xb0d090e as i32 as uint32_t,
    0x161a121c as i32 as uint32_t,
    0x1d171b12 as i32 as uint32_t,
    0x2c342438 as i32 as uint32_t,
    0x27392d36 as i32 as uint32_t,
    0x3a2e3624 as i32 as uint32_t,
    0x31233f2a as i32 as uint32_t,
    0x58684870 as i32 as uint32_t,
    0x5365417e as i32 as uint32_t,
    0x4e725a6c as i32 as uint32_t,
    0x457f5362 as i32 as uint32_t,
    0x745c6c48 as i32 as uint32_t,
    0x7f516546 as i32 as uint32_t,
    0x62467e54 as i32 as uint32_t,
    0x694b775a as i32 as uint32_t,
    0xb0d090e0 as u32,
    0xbbdd99ee as u32,
    0xa6ca82fc as u32,
    0xadc78bf2 as u32,
    0x9ce4b4d8 as u32,
    0x97e9bdd6 as u32,
    0x8afea6c4 as u32,
    0x81f3afca as u32,
    0xe8b8d890 as u32,
    0xe3b5d19e as u32,
    0xfea2ca8c as u32,
    0xf5afc382 as u32,
    0xc48cfca8 as u32,
    0xcf81f5a6 as u32,
    0xd296eeb4 as u32,
    0xd99be7ba as u32,
    0x7bbb3bdb as i32 as uint32_t,
    0x70b632d5 as i32 as uint32_t,
    0x6da129c7 as i32 as uint32_t,
    0x66ac20c9 as i32 as uint32_t,
    0x578f1fe3 as i32 as uint32_t,
    0x5c8216ed as i32 as uint32_t,
    0x41950dff as i32 as uint32_t,
    0x4a9804f1 as i32 as uint32_t,
    0x23d373ab as i32 as uint32_t,
    0x28de7aa5 as i32 as uint32_t,
    0x35c961b7 as i32 as uint32_t,
    0x3ec468b9 as i32 as uint32_t,
    0xfe75793 as i32 as uint32_t,
    0x4ea5e9d as i32 as uint32_t,
    0x19fd458f as i32 as uint32_t,
    0x12f04c81 as i32 as uint32_t,
    0xcb6bab3b as u32,
    0xc066a235 as u32,
    0xdd71b927 as u32,
    0xd67cb029 as u32,
    0xe75f8f03 as u32,
    0xec52860d as u32,
    0xf1459d1f as u32,
    0xfa489411 as u32,
    0x9303e34b as u32,
    0x980eea45 as u32,
    0x8519f157 as u32,
    0x8e14f859 as u32,
    0xbf37c773 as u32,
    0xb43ace7d as u32,
    0xa92dd56f as u32,
    0xa220dc61 as u32,
    0xf66d76ad as u32,
    0xfd607fa3 as u32,
    0xe07764b1 as u32,
    0xeb7a6dbf as u32,
    0xda595295 as u32,
    0xd1545b9b as u32,
    0xcc434089 as u32,
    0xc74e4987 as u32,
    0xae053edd as u32,
    0xa50837d3 as u32,
    0xb81f2cc1 as u32,
    0xb31225cf as u32,
    0x82311ae5 as u32,
    0x893c13eb as u32,
    0x942b08f9 as u32,
    0x9f2601f7 as u32,
    0x46bde64d as i32 as uint32_t,
    0x4db0ef43 as i32 as uint32_t,
    0x50a7f451 as i32 as uint32_t,
    0x5baafd5f as i32 as uint32_t,
    0x6a89c275 as i32 as uint32_t,
    0x6184cb7b as i32 as uint32_t,
    0x7c93d069 as i32 as uint32_t,
    0x779ed967 as i32 as uint32_t,
    0x1ed5ae3d as i32 as uint32_t,
    0x15d8a733 as i32 as uint32_t,
    0x8cfbc21 as i32 as uint32_t,
    0x3c2b52f as i32 as uint32_t,
    0x32e18a05 as i32 as uint32_t,
    0x39ec830b as i32 as uint32_t,
    0x24fb9819 as i32 as uint32_t,
    0x2ff69117 as i32 as uint32_t,
    0x8dd64d76 as u32,
    0x86db4478 as u32,
    0x9bcc5f6a as u32,
    0x90c15664 as u32,
    0xa1e2694e as u32,
    0xaaef6040 as u32,
    0xb7f87b52 as u32,
    0xbcf5725c as u32,
    0xd5be0506 as u32,
    0xdeb30c08 as u32,
    0xc3a4171a as u32,
    0xc8a91e14 as u32,
    0xf98a213e as u32,
    0xf2872830 as u32,
    0xef903322 as u32,
    0xe49d3a2c as u32,
    0x3d06dd96 as i32 as uint32_t,
    0x360bd498 as i32 as uint32_t,
    0x2b1ccf8a as i32 as uint32_t,
    0x2011c684 as i32 as uint32_t,
    0x1132f9ae as i32 as uint32_t,
    0x1a3ff0a0 as i32 as uint32_t,
    0x728ebb2 as i32 as uint32_t,
    0xc25e2bc as i32 as uint32_t,
    0x656e95e6 as i32 as uint32_t,
    0x6e639ce8 as i32 as uint32_t,
    0x737487fa as i32 as uint32_t,
    0x78798ef4 as i32 as uint32_t,
    0x495ab1de as i32 as uint32_t,
    0x4257b8d0 as i32 as uint32_t,
    0x5f40a3c2 as i32 as uint32_t,
    0x544daacc as i32 as uint32_t,
    0xf7daec41 as u32,
    0xfcd7e54f as u32,
    0xe1c0fe5d as u32,
    0xeacdf753 as u32,
    0xdbeec879 as u32,
    0xd0e3c177 as u32,
    0xcdf4da65 as u32,
    0xc6f9d36b as u32,
    0xafb2a431 as u32,
    0xa4bfad3f as u32,
    0xb9a8b62d as u32,
    0xb2a5bf23 as u32,
    0x83868009 as u32,
    0x888b8907 as u32,
    0x959c9215 as u32,
    0x9e919b1b as u32,
    0x470a7ca1 as i32 as uint32_t,
    0x4c0775af as i32 as uint32_t,
    0x51106ebd as i32 as uint32_t,
    0x5a1d67b3 as i32 as uint32_t,
    0x6b3e5899 as i32 as uint32_t,
    0x60335197 as i32 as uint32_t,
    0x7d244a85 as i32 as uint32_t,
    0x7629438b as i32 as uint32_t,
    0x1f6234d1 as i32 as uint32_t,
    0x146f3ddf as i32 as uint32_t,
    0x97826cd as i32 as uint32_t,
    0x2752fc3 as i32 as uint32_t,
    0x335610e9 as i32 as uint32_t,
    0x385b19e7 as i32 as uint32_t,
    0x254c02f5 as i32 as uint32_t,
    0x2e410bfb as i32 as uint32_t,
    0x8c61d79a as u32,
    0x876cde94 as u32,
    0x9a7bc586 as u32,
    0x9176cc88 as u32,
    0xa055f3a2 as u32,
    0xab58faac as u32,
    0xb64fe1be as u32,
    0xbd42e8b0 as u32,
    0xd4099fea as u32,
    0xdf0496e4 as u32,
    0xc2138df6 as u32,
    0xc91e84f8 as u32,
    0xf83dbbd2 as u32,
    0xf330b2dc as u32,
    0xee27a9ce as u32,
    0xe52aa0c0 as u32,
    0x3cb1477a as i32 as uint32_t,
    0x37bc4e74 as i32 as uint32_t,
    0x2aab5566 as i32 as uint32_t,
    0x21a65c68 as i32 as uint32_t,
    0x10856342 as i32 as uint32_t,
    0x1b886a4c as i32 as uint32_t,
    0x69f715e as i32 as uint32_t,
    0xd927850 as i32 as uint32_t,
    0x64d90f0a as i32 as uint32_t,
    0x6fd40604 as i32 as uint32_t,
    0x72c31d16 as i32 as uint32_t,
    0x79ce1418 as i32 as uint32_t,
    0x48ed2b32 as i32 as uint32_t,
    0x43e0223c as i32 as uint32_t,
    0x5ef7392e as i32 as uint32_t,
    0x55fa3020 as i32 as uint32_t,
    0x1b79aec as i32 as uint32_t,
    0xaba93e2 as i32 as uint32_t,
    0x17ad88f0 as i32 as uint32_t,
    0x1ca081fe as i32 as uint32_t,
    0x2d83bed4 as i32 as uint32_t,
    0x268eb7da as i32 as uint32_t,
    0x3b99acc8 as i32 as uint32_t,
    0x3094a5c6 as i32 as uint32_t,
    0x59dfd29c as i32 as uint32_t,
    0x52d2db92 as i32 as uint32_t,
    0x4fc5c080 as i32 as uint32_t,
    0x44c8c98e as i32 as uint32_t,
    0x75ebf6a4 as i32 as uint32_t,
    0x7ee6ffaa as i32 as uint32_t,
    0x63f1e4b8 as i32 as uint32_t,
    0x68fcedb6 as i32 as uint32_t,
    0xb1670a0c as u32,
    0xba6a0302 as u32,
    0xa77d1810 as u32,
    0xac70111e as u32,
    0x9d532e34 as u32,
    0x965e273a as u32,
    0x8b493c28 as u32,
    0x80443526 as u32,
    0xe90f427c as u32,
    0xe2024b72 as u32,
    0xff155060 as u32,
    0xf418596e as u32,
    0xc53b6644 as u32,
    0xce366f4a as u32,
    0xd3217458 as u32,
    0xd82c7d56 as u32,
    0x7a0ca137 as i32 as uint32_t,
    0x7101a839 as i32 as uint32_t,
    0x6c16b32b as i32 as uint32_t,
    0x671bba25 as i32 as uint32_t,
    0x5638850f as i32 as uint32_t,
    0x5d358c01 as i32 as uint32_t,
    0x40229713 as i32 as uint32_t,
    0x4b2f9e1d as i32 as uint32_t,
    0x2264e947 as i32 as uint32_t,
    0x2969e049 as i32 as uint32_t,
    0x347efb5b as i32 as uint32_t,
    0x3f73f255 as i32 as uint32_t,
    0xe50cd7f as i32 as uint32_t,
    0x55dc471 as i32 as uint32_t,
    0x184adf63 as i32 as uint32_t,
    0x1347d66d as i32 as uint32_t,
    0xcadc31d7 as u32,
    0xc1d138d9 as u32,
    0xdcc623cb as u32,
    0xd7cb2ac5 as u32,
    0xe6e815ef as u32,
    0xede51ce1 as u32,
    0xf0f207f3 as u32,
    0xfbff0efd as u32,
    0x92b479a7 as u32,
    0x99b970a9 as u32,
    0x84ae6bbb as u32,
    0x8fa362b5 as u32,
    0xbe805d9f as u32,
    0xb58d5491 as u32,
    0xa89a4f83 as u32,
    0xa397468d as u32,
];
#[no_mangle]
pub unsafe extern "C" fn _nettle_aes_invert(
    mut rounds: u32,
    mut dst: *mut uint32_t,
    mut src: *const uint32_t,
) {
    let mut i: u32 = 0;
    i = 4 as i32 as u32;
    while i < (4 as i32 as u32).wrapping_mul(rounds) {
        let mut _k: uint32_t = 0;
        let mut _nk: uint32_t = 0;
        let mut _t: uint32_t = 0;
        _k = *src.offset(i as isize);
        _nk = mtable[(_k & 0xff as i32 as u32) as usize];
        _k >>= 8 as i32;
        _t = mtable[(_k & 0xff as i32 as u32) as usize];
        _nk ^= _t << 8 as i32 | _t >> (-(8 as i32) & 31 as i32);
        _k >>= 8 as i32;
        _t = mtable[(_k & 0xff as i32 as u32) as usize];
        _nk ^= _t << 16 as i32 | _t >> (-(16 as i32) & 31 as i32);
        _k >>= 8 as i32;
        _t = mtable[(_k & 0xff as i32 as u32) as usize];
        _nk ^= _t << 24 as i32 | _t >> (-(24 as i32) & 31 as i32);
        *dst.offset(i as isize) = _nk;
        i = i.wrapping_add(1);
        i;
    }
    if src != dst {
        *dst.offset(0 as i32 as isize) = *src.offset(0 as i32 as isize);
        *dst.offset(1 as i32 as isize) = *src.offset(1 as i32 as isize);
        *dst.offset(2 as i32 as isize) = *src.offset(2 as i32 as isize);
        *dst.offset(3 as i32 as isize) = *src.offset(3 as i32 as isize);
        *dst.offset(i as isize) = *src.offset(i as isize);
        *dst.offset(i.wrapping_add(1 as i32 as u32) as isize) = *src
            .offset(i.wrapping_add(1 as i32 as u32) as isize);
        *dst.offset(i.wrapping_add(2 as i32 as u32) as isize) = *src
            .offset(i.wrapping_add(2 as i32 as u32) as isize);
        *dst.offset(i.wrapping_add(3 as i32 as u32) as isize) = *src
            .offset(i.wrapping_add(3 as i32 as u32) as isize);
    }
}