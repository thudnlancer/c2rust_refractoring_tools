#![allow(
    dead_code,
    mutable_transmutes,
    non_camel_case_types,
    non_snake_case,
    non_upper_case_globals,
    unused_assignments,
    unused_mut
)]
#[derive(Copy, Clone)]
#[repr(C)]
pub struct base64_decode_ctx {
    pub table: *const libc::c_schar,
    pub word: libc::c_ushort,
    pub bits: u8,
    pub padding: u8,
}
#[no_mangle]
pub unsafe extern "C" fn nettle_base64url_decode_init(mut ctx: *mut base64_decode_ctx) {
    static mut base64url_decode_table: [libc::c_schar; 256] = [
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(2 as i32) as libc::c_schar,
        -(2 as i32) as libc::c_schar,
        -(2 as i32) as libc::c_schar,
        -(2 as i32) as libc::c_schar,
        -(2 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(2 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        62 as i32 as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        52 as i32 as libc::c_schar,
        53 as i32 as libc::c_schar,
        54 as i32 as libc::c_schar,
        55 as i32 as libc::c_schar,
        56 as i32 as libc::c_schar,
        57 as i32 as libc::c_schar,
        58 as i32 as libc::c_schar,
        59 as i32 as libc::c_schar,
        60 as i32 as libc::c_schar,
        61 as i32 as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(3 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        0 as i32 as libc::c_schar,
        1 as i32 as libc::c_schar,
        2 as i32 as libc::c_schar,
        3 as i32 as libc::c_schar,
        4 as i32 as libc::c_schar,
        5 as i32 as libc::c_schar,
        6 as i32 as libc::c_schar,
        7 as i32 as libc::c_schar,
        8 as i32 as libc::c_schar,
        9 as i32 as libc::c_schar,
        10 as i32 as libc::c_schar,
        11 as i32 as libc::c_schar,
        12 as i32 as libc::c_schar,
        13 as i32 as libc::c_schar,
        14 as i32 as libc::c_schar,
        15 as i32 as libc::c_schar,
        16 as i32 as libc::c_schar,
        17 as i32 as libc::c_schar,
        18 as i32 as libc::c_schar,
        19 as i32 as libc::c_schar,
        20 as i32 as libc::c_schar,
        21 as i32 as libc::c_schar,
        22 as i32 as libc::c_schar,
        23 as i32 as libc::c_schar,
        24 as i32 as libc::c_schar,
        25 as i32 as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        63 as i32 as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        26 as i32 as libc::c_schar,
        27 as i32 as libc::c_schar,
        28 as i32 as libc::c_schar,
        29 as i32 as libc::c_schar,
        30 as i32 as libc::c_schar,
        31 as i32 as libc::c_schar,
        32 as i32 as libc::c_schar,
        33 as i32 as libc::c_schar,
        34 as i32 as libc::c_schar,
        35 as i32 as libc::c_schar,
        36 as i32 as libc::c_schar,
        37 as i32 as libc::c_schar,
        38 as i32 as libc::c_schar,
        39 as i32 as libc::c_schar,
        40 as i32 as libc::c_schar,
        41 as i32 as libc::c_schar,
        42 as i32 as libc::c_schar,
        43 as i32 as libc::c_schar,
        44 as i32 as libc::c_schar,
        45 as i32 as libc::c_schar,
        46 as i32 as libc::c_schar,
        47 as i32 as libc::c_schar,
        48 as i32 as libc::c_schar,
        49 as i32 as libc::c_schar,
        50 as i32 as libc::c_schar,
        51 as i32 as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
        -(1 as i32) as libc::c_schar,
    ];
    (*ctx).padding = 0 as i32 as u8;
    (*ctx).bits = (*ctx).padding;
    (*ctx).word = (*ctx).bits as libc::c_ushort;
    (*ctx).table = base64url_decode_table.as_ptr();
}