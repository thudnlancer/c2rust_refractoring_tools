
use std::ops::{Add, AddAssign, Sub, SubAssign, Mul, MulAssign, Div, DivAssign, Rem, RemAssign};
use ::libc;
use ::c2rust_bitfields;
extern "C" {
    fn free(__ptr: *mut libc::c_void);
    fn malloc(_: libc::c_ulong) -> *mut libc::c_void;
    fn realloc(_: *mut libc::c_void, _: libc::c_ulong) -> *mut libc::c_void;
    fn abort() -> !;
    fn memcpy(
        _: *mut libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    fn memset(
        _: *mut libc::c_void,
        _: libc::c_int,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    fn memcmp(
        _: *const libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> libc::c_int;
    fn strcpy(_: *mut libc::c_char, _: *const libc::c_char) -> *mut libc::c_char;
    fn strncpy(
        _: *mut libc::c_char,
        _: *const libc::c_char,
        _: libc::c_ulong,
    ) -> *mut libc::c_char;
    fn strcmp(_: *const libc::c_char, _: *const libc::c_char) -> libc::c_int;
    fn strlen(_: *const libc::c_char) -> libc::c_ulong;
    fn __ctype_b_loc() -> *mut *const libc::c_ushort;
    fn __ctype_tolower_loc() -> *mut *const __int32_t;
}
pub type size_t = libc::c_ulong;
pub type __int32_t = libc::c_int;
pub type s_reg_t = libc::c_long;
pub type active_reg_t = libc::c_ulong;
pub type reg_syntax_t = libc::c_ulong;
#[derive(PartialEq, Eq, PartialOrd, Ord, Debug, Clone, Copy)]
#[repr(C)]
pub enum reg_errcode_t {
    REG_NOERROR = 0,
    REG_NOMATCH,
    REG_BADPAT,
    REG_ECOLLATE,
    REG_ECTYPE,
    REG_EESCAPE,
    REG_ESUBREG,
    REG_EBRACK,
    REG_EPAREN,
    REG_EBRACE,
    REG_BADBR,
    REG_ERANGE,
    REG_ESPACE,
    REG_BADRPT,
    REG_EEND,
    REG_ESIZE,
    REG_ERPAREN,
}
impl reg_errcode_t {
    fn to_libc_c_uint(self) -> libc::c_uint {
        match self {
            reg_errcode_t::REG_NOERROR => 0,
            reg_errcode_t::REG_NOMATCH => 1,
            reg_errcode_t::REG_BADPAT => 2,
            reg_errcode_t::REG_ECOLLATE => 3,
            reg_errcode_t::REG_ECTYPE => 4,
            reg_errcode_t::REG_EESCAPE => 5,
            reg_errcode_t::REG_ESUBREG => 6,
            reg_errcode_t::REG_EBRACK => 7,
            reg_errcode_t::REG_EPAREN => 8,
            reg_errcode_t::REG_EBRACE => 9,
            reg_errcode_t::REG_BADBR => 10,
            reg_errcode_t::REG_ERANGE => 11,
            reg_errcode_t::REG_ESPACE => 12,
            reg_errcode_t::REG_BADRPT => 13,
            reg_errcode_t::REG_EEND => 14,
            reg_errcode_t::REG_ESIZE => 15,
            reg_errcode_t::REG_ERPAREN => 16,
        }
    }
    fn from_libc_c_uint(value: libc::c_uint) -> reg_errcode_t {
        match value {
            0 => reg_errcode_t::REG_NOERROR,
            1 => reg_errcode_t::REG_NOMATCH,
            2 => reg_errcode_t::REG_BADPAT,
            3 => reg_errcode_t::REG_ECOLLATE,
            4 => reg_errcode_t::REG_ECTYPE,
            5 => reg_errcode_t::REG_EESCAPE,
            6 => reg_errcode_t::REG_ESUBREG,
            7 => reg_errcode_t::REG_EBRACK,
            8 => reg_errcode_t::REG_EPAREN,
            9 => reg_errcode_t::REG_EBRACE,
            10 => reg_errcode_t::REG_BADBR,
            11 => reg_errcode_t::REG_ERANGE,
            12 => reg_errcode_t::REG_ESPACE,
            13 => reg_errcode_t::REG_BADRPT,
            14 => reg_errcode_t::REG_EEND,
            15 => reg_errcode_t::REG_ESIZE,
            16 => reg_errcode_t::REG_ERPAREN,
            _ => panic!("Invalid value for reg_errcode_t: {}", value),
        }
    }
}
impl AddAssign<u32> for reg_errcode_t {
    fn add_assign(&mut self, rhs: u32) {
        *self = reg_errcode_t::from_libc_c_uint(self.to_libc_c_uint() + rhs);
    }
}
impl SubAssign<u32> for reg_errcode_t {
    fn sub_assign(&mut self, rhs: u32) {
        *self = reg_errcode_t::from_libc_c_uint(self.to_libc_c_uint() - rhs);
    }
}
impl MulAssign<u32> for reg_errcode_t {
    fn mul_assign(&mut self, rhs: u32) {
        *self = reg_errcode_t::from_libc_c_uint(self.to_libc_c_uint() * rhs);
    }
}
impl DivAssign<u32> for reg_errcode_t {
    fn div_assign(&mut self, rhs: u32) {
        *self = reg_errcode_t::from_libc_c_uint(self.to_libc_c_uint() / rhs);
    }
}
impl RemAssign<u32> for reg_errcode_t {
    fn rem_assign(&mut self, rhs: u32) {
        *self = reg_errcode_t::from_libc_c_uint(self.to_libc_c_uint() % rhs);
    }
}
impl Add<u32> for reg_errcode_t {
    type Output = reg_errcode_t;
    fn add(self, rhs: u32) -> reg_errcode_t {
        reg_errcode_t::from_libc_c_uint(self.to_libc_c_uint() + rhs)
    }
}
impl Sub<u32> for reg_errcode_t {
    type Output = reg_errcode_t;
    fn sub(self, rhs: u32) -> reg_errcode_t {
        reg_errcode_t::from_libc_c_uint(self.to_libc_c_uint() - rhs)
    }
}
impl Mul<u32> for reg_errcode_t {
    type Output = reg_errcode_t;
    fn mul(self, rhs: u32) -> reg_errcode_t {
        reg_errcode_t::from_libc_c_uint(self.to_libc_c_uint() * rhs)
    }
}
impl Div<u32> for reg_errcode_t {
    type Output = reg_errcode_t;
    fn div(self, rhs: u32) -> reg_errcode_t {
        reg_errcode_t::from_libc_c_uint(self.to_libc_c_uint() / rhs)
    }
}
impl Rem<u32> for reg_errcode_t {
    type Output = reg_errcode_t;
    fn rem(self, rhs: u32) -> reg_errcode_t {
        reg_errcode_t::from_libc_c_uint(self.to_libc_c_uint() % rhs)
    }
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct re_pattern_buffer {
    pub buffer: *mut libc::c_uchar,
    pub allocated: libc::c_ulong,
    pub used: libc::c_ulong,
    pub syntax: reg_syntax_t,
    pub fastmap: *mut libc::c_char,
    pub translate: *mut libc::c_char,
    pub re_nsub: size_t,
    #[bitfield(name = "can_be_null", ty = "libc::c_uint", bits = "0..=0")]
    #[bitfield(name = "regs_allocated", ty = "libc::c_uint", bits = "1..=2")]
    #[bitfield(name = "fastmap_accurate", ty = "libc::c_uint", bits = "3..=3")]
    #[bitfield(name = "no_sub", ty = "libc::c_uint", bits = "4..=4")]
    #[bitfield(name = "not_bol", ty = "libc::c_uint", bits = "5..=5")]
    #[bitfield(name = "not_eol", ty = "libc::c_uint", bits = "6..=6")]
    #[bitfield(name = "newline_anchor", ty = "libc::c_uint", bits = "7..=7")]
    pub can_be_null_regs_allocated_fastmap_accurate_no_sub_not_bol_not_eol_newline_anchor: [u8; 1],
    #[bitfield(padding)]
    pub c2rust_padding: [u8; 7],
}
pub type regex_t = re_pattern_buffer;
pub type regoff_t = libc::c_int;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct re_registers {
    pub num_regs: libc::c_uint,
    pub start: *mut regoff_t,
    pub end: *mut regoff_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct regmatch_t {
    pub rm_so: regoff_t,
    pub rm_eo: regoff_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct compile_stack_elt_t {
    pub begalt_offset: pattern_offset_t,
    pub fixup_alt_jump: pattern_offset_t,
    pub inner_group_offset: pattern_offset_t,
    pub laststart_offset: pattern_offset_t,
    pub regnum: regnum_t,
}
pub type regnum_t = libc::c_uint;
pub type pattern_offset_t = libc::c_long;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct compile_stack_type {
    pub stack: *mut compile_stack_elt_t,
    pub size: libc::c_uint,
    pub avail: libc::c_uint,
}
#[derive(PartialEq, Eq, PartialOrd, Ord, Debug, Clone, Copy)]
#[repr(C)]
pub enum re_opcode_t {
    no_op = 0,
    succeed,
    exactn,
    anychar,
    charset,
    charset_not,
    start_memory,
    stop_memory,
    duplicate,
    begline,
    endline,
    begbuf,
    endbuf,
    jump,
    jump_past_alt,
    on_failure_jump,
    on_failure_keep_string_jump,
    pop_failure_jump,
    maybe_pop_jump,
    dummy_failure_jump,
    push_dummy_failure,
    succeed_n,
    jump_n,
    set_number_at,
    wordchar,
    notwordchar,
    wordbeg,
    wordend,
    wordbound,
    notwordbound,
}
impl re_opcode_t {
    fn to_libc_c_uint(self) -> libc::c_uint {
        match self {
            re_opcode_t::no_op => 0,
            re_opcode_t::succeed => 1,
            re_opcode_t::exactn => 2,
            re_opcode_t::anychar => 3,
            re_opcode_t::charset => 4,
            re_opcode_t::charset_not => 5,
            re_opcode_t::start_memory => 6,
            re_opcode_t::stop_memory => 7,
            re_opcode_t::duplicate => 8,
            re_opcode_t::begline => 9,
            re_opcode_t::endline => 10,
            re_opcode_t::begbuf => 11,
            re_opcode_t::endbuf => 12,
            re_opcode_t::jump => 13,
            re_opcode_t::jump_past_alt => 14,
            re_opcode_t::on_failure_jump => 15,
            re_opcode_t::on_failure_keep_string_jump => 16,
            re_opcode_t::pop_failure_jump => 17,
            re_opcode_t::maybe_pop_jump => 18,
            re_opcode_t::dummy_failure_jump => 19,
            re_opcode_t::push_dummy_failure => 20,
            re_opcode_t::succeed_n => 21,
            re_opcode_t::jump_n => 22,
            re_opcode_t::set_number_at => 23,
            re_opcode_t::wordchar => 24,
            re_opcode_t::notwordchar => 25,
            re_opcode_t::wordbeg => 26,
            re_opcode_t::wordend => 27,
            re_opcode_t::wordbound => 28,
            re_opcode_t::notwordbound => 29,
        }
    }
    fn from_libc_c_uint(value: libc::c_uint) -> re_opcode_t {
        match value {
            0 => re_opcode_t::no_op,
            1 => re_opcode_t::succeed,
            2 => re_opcode_t::exactn,
            3 => re_opcode_t::anychar,
            4 => re_opcode_t::charset,
            5 => re_opcode_t::charset_not,
            6 => re_opcode_t::start_memory,
            7 => re_opcode_t::stop_memory,
            8 => re_opcode_t::duplicate,
            9 => re_opcode_t::begline,
            10 => re_opcode_t::endline,
            11 => re_opcode_t::begbuf,
            12 => re_opcode_t::endbuf,
            13 => re_opcode_t::jump,
            14 => re_opcode_t::jump_past_alt,
            15 => re_opcode_t::on_failure_jump,
            16 => re_opcode_t::on_failure_keep_string_jump,
            17 => re_opcode_t::pop_failure_jump,
            18 => re_opcode_t::maybe_pop_jump,
            19 => re_opcode_t::dummy_failure_jump,
            20 => re_opcode_t::push_dummy_failure,
            21 => re_opcode_t::succeed_n,
            22 => re_opcode_t::jump_n,
            23 => re_opcode_t::set_number_at,
            24 => re_opcode_t::wordchar,
            25 => re_opcode_t::notwordchar,
            26 => re_opcode_t::wordbeg,
            27 => re_opcode_t::wordend,
            28 => re_opcode_t::wordbound,
            29 => re_opcode_t::notwordbound,
            _ => panic!("Invalid value for re_opcode_t: {}", value),
        }
    }
}
impl AddAssign<u32> for re_opcode_t {
    fn add_assign(&mut self, rhs: u32) {
        *self = re_opcode_t::from_libc_c_uint(self.to_libc_c_uint() + rhs);
    }
}
impl SubAssign<u32> for re_opcode_t {
    fn sub_assign(&mut self, rhs: u32) {
        *self = re_opcode_t::from_libc_c_uint(self.to_libc_c_uint() - rhs);
    }
}
impl MulAssign<u32> for re_opcode_t {
    fn mul_assign(&mut self, rhs: u32) {
        *self = re_opcode_t::from_libc_c_uint(self.to_libc_c_uint() * rhs);
    }
}
impl DivAssign<u32> for re_opcode_t {
    fn div_assign(&mut self, rhs: u32) {
        *self = re_opcode_t::from_libc_c_uint(self.to_libc_c_uint() / rhs);
    }
}
impl RemAssign<u32> for re_opcode_t {
    fn rem_assign(&mut self, rhs: u32) {
        *self = re_opcode_t::from_libc_c_uint(self.to_libc_c_uint() % rhs);
    }
}
impl Add<u32> for re_opcode_t {
    type Output = re_opcode_t;
    fn add(self, rhs: u32) -> re_opcode_t {
        re_opcode_t::from_libc_c_uint(self.to_libc_c_uint() + rhs)
    }
}
impl Sub<u32> for re_opcode_t {
    type Output = re_opcode_t;
    fn sub(self, rhs: u32) -> re_opcode_t {
        re_opcode_t::from_libc_c_uint(self.to_libc_c_uint() - rhs)
    }
}
impl Mul<u32> for re_opcode_t {
    type Output = re_opcode_t;
    fn mul(self, rhs: u32) -> re_opcode_t {
        re_opcode_t::from_libc_c_uint(self.to_libc_c_uint() * rhs)
    }
}
impl Div<u32> for re_opcode_t {
    type Output = re_opcode_t;
    fn div(self, rhs: u32) -> re_opcode_t {
        re_opcode_t::from_libc_c_uint(self.to_libc_c_uint() / rhs)
    }
}
impl Rem<u32> for re_opcode_t {
    type Output = re_opcode_t;
    fn rem(self, rhs: u32) -> re_opcode_t {
        re_opcode_t::from_libc_c_uint(self.to_libc_c_uint() % rhs)
    }
}
pub type boolean = libc::c_char;
#[derive(PartialEq, Eq, PartialOrd, Ord, Debug, Clone, Copy)]
#[repr(C)]
pub enum C2RustUnnamed_0 {
    _ISdigit = 2048,
    _ISlower = 512,
    _ISupper = 256,
    _ISxdigit = 4096,
    _ISspace = 8192,
    _ISpunct = 4,
    _ISprint = 16384,
    _ISgraph = 32768,
    _IScntrl = 2,
    _ISblank = 1,
    _ISalpha = 1024,
    _ISalnum = 8,
}
impl C2RustUnnamed_0 {
    fn to_libc_c_uint(self) -> libc::c_uint {
        match self {
            C2RustUnnamed_0::_ISdigit => 2048,
            C2RustUnnamed_0::_ISlower => 512,
            C2RustUnnamed_0::_ISupper => 256,
            C2RustUnnamed_0::_ISxdigit => 4096,
            C2RustUnnamed_0::_ISspace => 8192,
            C2RustUnnamed_0::_ISpunct => 4,
            C2RustUnnamed_0::_ISprint => 16384,
            C2RustUnnamed_0::_ISgraph => 32768,
            C2RustUnnamed_0::_IScntrl => 2,
            C2RustUnnamed_0::_ISblank => 1,
            C2RustUnnamed_0::_ISalpha => 1024,
            C2RustUnnamed_0::_ISalnum => 8,
        }
    }
    fn from_libc_c_uint(value: libc::c_uint) -> C2RustUnnamed_0 {
        match value {
            2048 => C2RustUnnamed_0::_ISdigit,
            512 => C2RustUnnamed_0::_ISlower,
            256 => C2RustUnnamed_0::_ISupper,
            4096 => C2RustUnnamed_0::_ISxdigit,
            8192 => C2RustUnnamed_0::_ISspace,
            4 => C2RustUnnamed_0::_ISpunct,
            16384 => C2RustUnnamed_0::_ISprint,
            32768 => C2RustUnnamed_0::_ISgraph,
            2 => C2RustUnnamed_0::_IScntrl,
            1 => C2RustUnnamed_0::_ISblank,
            1024 => C2RustUnnamed_0::_ISalpha,
            8 => C2RustUnnamed_0::_ISalnum,
            _ => panic!("Invalid value for C2RustUnnamed_0: {}", value),
        }
    }
}
impl AddAssign<u32> for C2RustUnnamed_0 {
    fn add_assign(&mut self, rhs: u32) {
        *self = C2RustUnnamed_0::from_libc_c_uint(self.to_libc_c_uint() + rhs);
    }
}
impl SubAssign<u32> for C2RustUnnamed_0 {
    fn sub_assign(&mut self, rhs: u32) {
        *self = C2RustUnnamed_0::from_libc_c_uint(self.to_libc_c_uint() - rhs);
    }
}
impl MulAssign<u32> for C2RustUnnamed_0 {
    fn mul_assign(&mut self, rhs: u32) {
        *self = C2RustUnnamed_0::from_libc_c_uint(self.to_libc_c_uint() * rhs);
    }
}
impl DivAssign<u32> for C2RustUnnamed_0 {
    fn div_assign(&mut self, rhs: u32) {
        *self = C2RustUnnamed_0::from_libc_c_uint(self.to_libc_c_uint() / rhs);
    }
}
impl RemAssign<u32> for C2RustUnnamed_0 {
    fn rem_assign(&mut self, rhs: u32) {
        *self = C2RustUnnamed_0::from_libc_c_uint(self.to_libc_c_uint() % rhs);
    }
}
impl Add<u32> for C2RustUnnamed_0 {
    type Output = C2RustUnnamed_0;
    fn add(self, rhs: u32) -> C2RustUnnamed_0 {
        C2RustUnnamed_0::from_libc_c_uint(self.to_libc_c_uint() + rhs)
    }
}
impl Sub<u32> for C2RustUnnamed_0 {
    type Output = C2RustUnnamed_0;
    fn sub(self, rhs: u32) -> C2RustUnnamed_0 {
        C2RustUnnamed_0::from_libc_c_uint(self.to_libc_c_uint() - rhs)
    }
}
impl Mul<u32> for C2RustUnnamed_0 {
    type Output = C2RustUnnamed_0;
    fn mul(self, rhs: u32) -> C2RustUnnamed_0 {
        C2RustUnnamed_0::from_libc_c_uint(self.to_libc_c_uint() * rhs)
    }
}
impl Div<u32> for C2RustUnnamed_0 {
    type Output = C2RustUnnamed_0;
    fn div(self, rhs: u32) -> C2RustUnnamed_0 {
        C2RustUnnamed_0::from_libc_c_uint(self.to_libc_c_uint() / rhs)
    }
}
impl Rem<u32> for C2RustUnnamed_0 {
    type Output = C2RustUnnamed_0;
    fn rem(self, rhs: u32) -> C2RustUnnamed_0 {
        C2RustUnnamed_0::from_libc_c_uint(self.to_libc_c_uint() % rhs)
    }
}
pub type fail_stack_elt_t = fail_stack_elt;
#[derive(Copy, Clone)]
#[repr(C)]
pub union fail_stack_elt {
    pub pointer: *mut libc::c_uchar,
    pub integer: libc::c_int,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct fail_stack_type {
    pub stack: *mut fail_stack_elt_t,
    pub size: libc::c_uint,
    pub avail: libc::c_uint,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union register_info_type {
    pub word: fail_stack_elt_t,
    pub bits: C2RustUnnamed,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct C2RustUnnamed {
    #[bitfield(name = "match_null_string_p", ty = "libc::c_uint", bits = "0..=1")]
    #[bitfield(name = "is_active", ty = "libc::c_uint", bits = "2..=2")]
    #[bitfield(name = "matched_something", ty = "libc::c_uint", bits = "3..=3")]
    #[bitfield(name = "ever_matched_something", ty = "libc::c_uint", bits = "4..=4")]
    pub match_null_string_p_is_active_matched_something_ever_matched_something: [u8; 1],
    #[bitfield(padding)]
    pub c2rust_padding: [u8; 3],
}
static mut re_syntax_table: [libc::c_char; 256] = [0; 256];
unsafe extern "C" fn init_syntax_once() {
    let mut c: libc::c_int = 0;
    static mut done: libc::c_int = 0 as libc::c_int;
    if done != 0 {
        return;
    }
    memset(
        re_syntax_table.as_mut_ptr() as *mut libc::c_void,
        0 as libc::c_int,
        ::core::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
    );
    c = 'a' as i32;
    while c <= 'z' as i32 {
        re_syntax_table[c as usize] = 1 as libc::c_int as libc::c_char;
        c += 1;
        c;
    }
    c = 'A' as i32;
    while c <= 'Z' as i32 {
        re_syntax_table[c as usize] = 1 as libc::c_int as libc::c_char;
        c += 1;
        c;
    }
    c = '0' as i32;
    while c <= '9' as i32 {
        re_syntax_table[c as usize] = 1 as libc::c_int as libc::c_char;
        c += 1;
        c;
    }
    re_syntax_table['_' as i32 as usize] = 1 as libc::c_int as libc::c_char;
    done = 1 as libc::c_int;
}
#[inline]
unsafe extern "C" fn tolower(mut __c: libc::c_int) -> libc::c_int {
    return if __c >= -(128 as libc::c_int) && __c < 256 as libc::c_int {
        *(*__ctype_tolower_loc()).offset(__c as isize)
    } else {
        __c
    };
}
#[no_mangle]
pub static mut re_syntax_options: reg_syntax_t = 0;
#[no_mangle]
pub unsafe extern "C" fn re_set_syntax(mut syntax: reg_syntax_t) -> reg_syntax_t {
    let mut ret: reg_syntax_t = re_syntax_options;
    re_syntax_options = syntax;
    return ret;
}
#[no_mangle]
pub unsafe extern "C" fn re_set_character_syntax(
    mut ch: libc::c_uchar,
    mut syntax: libc::c_char,
) {
    init_syntax_once();
    match syntax as libc::c_int {
        119 => {
            re_syntax_table[ch as usize] = 1 as libc::c_int as libc::c_char;
        }
        32 => {
            re_syntax_table[ch as usize] = 0 as libc::c_int as libc::c_char;
        }
        _ => {}
    };
}
static mut re_error_msgid: [*const libc::c_char; 17] = [
    b"Success\0" as *const u8 as *const libc::c_char,
    b"No match\0" as *const u8 as *const libc::c_char,
    b"Invalid regular expression\0" as *const u8 as *const libc::c_char,
    b"Invalid collation character\0" as *const u8 as *const libc::c_char,
    b"Invalid character class name\0" as *const u8 as *const libc::c_char,
    b"Trailing backslash\0" as *const u8 as *const libc::c_char,
    b"Invalid back reference\0" as *const u8 as *const libc::c_char,
    b"Unmatched [ or [^\0" as *const u8 as *const libc::c_char,
    b"Unmatched ( or \\(\0" as *const u8 as *const libc::c_char,
    b"Unmatched \\{\0" as *const u8 as *const libc::c_char,
    b"Invalid content of \\{\\}\0" as *const u8 as *const libc::c_char,
    b"Invalid range end\0" as *const u8 as *const libc::c_char,
    b"Memory exhausted\0" as *const u8 as *const libc::c_char,
    b"Invalid preceding regular expression\0" as *const u8 as *const libc::c_char,
    b"Premature end of regular expression\0" as *const u8 as *const libc::c_char,
    b"Regular expression too big\0" as *const u8 as *const libc::c_char,
    b"Unmatched ) or \\)\0" as *const u8 as *const libc::c_char,
];
#[no_mangle]
pub static mut re_max_failures: libc::c_int = 20000 as libc::c_int;
static mut reg_unset_dummy: libc::c_char = 0;
unsafe extern "C" fn regex_compile(
    mut pattern: *const libc::c_char,
    mut size: size_t,
    mut syntax: reg_syntax_t,
    mut bufp: *mut re_pattern_buffer,
) -> reg_errcode_t {
    let mut current_block: u64;
    let mut c: libc::c_uchar = 0;
    let mut c1: libc::c_uchar = 0;
    let mut p1: *const libc::c_char = 0 as *const libc::c_char;
    let mut b: *mut libc::c_uchar = 0 as *mut libc::c_uchar;
    let mut compile_stack: compile_stack_type = compile_stack_type {
        stack: 0 as *mut compile_stack_elt_t,
        size: 0,
        avail: 0,
    };
    let mut p: *const libc::c_char = pattern;
    let mut pend: *const libc::c_char = pattern.offset(size as isize);
    let mut translate: *mut libc::c_char = (*bufp).translate;
    let mut pending_exact: *mut libc::c_uchar = 0 as *mut libc::c_uchar;
    let mut laststart: *mut libc::c_uchar = 0 as *mut libc::c_uchar;
    let mut begalt: *mut libc::c_uchar = 0 as *mut libc::c_uchar;
    let mut beg_interval: *const libc::c_char = 0 as *const libc::c_char;
    let mut fixup_alt_jump: *mut libc::c_uchar = 0 as *mut libc::c_uchar;
    let mut regnum: regnum_t = 0 as libc::c_int as regnum_t;
    compile_stack.stack = malloc(
        (32 as libc::c_int as libc::c_ulong)
            .wrapping_mul(::core::mem::size_of::<compile_stack_elt_t>() as libc::c_ulong),
    ) as *mut compile_stack_elt_t;
    if (compile_stack.stack).is_null() {
        return reg_errcode_t::REG_ESPACE;
    }
    compile_stack.size = 32 as libc::c_int as libc::c_uint;
    compile_stack.avail = 0 as libc::c_int as libc::c_uint;
    (*bufp).syntax = syntax;
    (*bufp).set_fastmap_accurate(0 as libc::c_int as libc::c_uint);
    (*bufp).set_not_eol(0 as libc::c_int as libc::c_uint);
    (*bufp).set_not_bol((*bufp).not_eol());
    (*bufp).used = 0 as libc::c_int as libc::c_ulong;
    (*bufp).re_nsub = 0 as libc::c_int as size_t;
    init_syntax_once();
    if (*bufp).allocated == 0 as libc::c_int as libc::c_ulong {
        if !((*bufp).buffer).is_null() {
            (*bufp).buffer = realloc(
                (*bufp).buffer as *mut libc::c_void,
                (32 as libc::c_int as libc::c_ulong)
                    .wrapping_mul(
                        ::core::mem::size_of::<libc::c_uchar>() as libc::c_ulong,
                    ),
            ) as *mut libc::c_uchar;
        } else {
            (*bufp).buffer = malloc(
                (32 as libc::c_int as libc::c_ulong)
                    .wrapping_mul(
                        ::core::mem::size_of::<libc::c_uchar>() as libc::c_ulong,
                    ),
            ) as *mut libc::c_uchar;
        }
        if ((*bufp).buffer).is_null() {
            free(compile_stack.stack as *mut libc::c_void);
            return reg_errcode_t::from_libc_c_uint(
                reg_errcode_t::REG_ESPACE as libc::c_int as u32,
            );
        }
        (*bufp).allocated = 32 as libc::c_int as libc::c_ulong;
    }
    b = (*bufp).buffer;
    begalt = b;
    while p != pend {
        if p == pend {
            return reg_errcode_t::REG_EEND;
        }
        let fresh0 = p;
        p = p.offset(1);
        c = *fresh0 as libc::c_uchar;
        if !translate.is_null() {
            c = *translate.offset(c as isize) as libc::c_uchar;
        }
        match c as libc::c_int {
            94 => {
                if p == pattern.offset(1 as libc::c_int as isize)
                    || syntax
                        & (((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int != 0
                    || at_begline_loc_p(pattern, p, syntax) as libc::c_int != 0
                {
                    while (b.offset_from((*bufp).buffer) as libc::c_long
                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                        > (*bufp).allocated
                    {
                        let mut old_buffer: *mut libc::c_uchar = (*bufp).buffer;
                        if (*bufp).allocated
                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                as libc::c_ulong
                        {
                            return reg_errcode_t::REG_ESIZE;
                        }
                        (*bufp).allocated <<= 1 as libc::c_int;
                        if (*bufp).allocated
                            > ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                        {
                            (*bufp).allocated = ((1 as libc::c_long)
                                << 16 as libc::c_int) as libc::c_ulong;
                        }
                        (*bufp).buffer = realloc(
                            (*bufp).buffer as *mut libc::c_void,
                            (*bufp).allocated,
                        ) as *mut libc::c_uchar;
                        if ((*bufp).buffer).is_null() {
                            return reg_errcode_t::REG_ESPACE;
                        }
                        if old_buffer != (*bufp).buffer {
                            b = ((*bufp).buffer)
                                .offset(b.offset_from(old_buffer) as libc::c_long as isize);
                            begalt = ((*bufp).buffer)
                                .offset(
                                    begalt.offset_from(old_buffer) as libc::c_long as isize,
                                );
                            if !fixup_alt_jump.is_null() {
                                fixup_alt_jump = ((*bufp).buffer)
                                    .offset(
                                        fixup_alt_jump.offset_from(old_buffer) as libc::c_long
                                            as isize,
                                    );
                            }
                            if !laststart.is_null() {
                                laststart = ((*bufp).buffer)
                                    .offset(
                                        laststart.offset_from(old_buffer) as libc::c_long as isize,
                                    );
                            }
                            if !pending_exact.is_null() {
                                pending_exact = ((*bufp).buffer)
                                    .offset(
                                        pending_exact.offset_from(old_buffer) as libc::c_long
                                            as isize,
                                    );
                            }
                        }
                    }
                    let fresh1 = b;
                    b = b.offset(1);
                    *fresh1 = re_opcode_t::begline as libc::c_int as libc::c_uchar;
                    continue;
                } else {
                    current_block = 9887592654468655139;
                }
            }
            36 => {
                if p == pend
                    || syntax
                        & (((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int != 0
                    || at_endline_loc_p(p, pend, syntax) as libc::c_int != 0
                {
                    while (b.offset_from((*bufp).buffer) as libc::c_long
                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                        > (*bufp).allocated
                    {
                        let mut old_buffer_0: *mut libc::c_uchar = (*bufp).buffer;
                        if (*bufp).allocated
                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                as libc::c_ulong
                        {
                            return reg_errcode_t::REG_ESIZE;
                        }
                        (*bufp).allocated <<= 1 as libc::c_int;
                        if (*bufp).allocated
                            > ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                        {
                            (*bufp).allocated = ((1 as libc::c_long)
                                << 16 as libc::c_int) as libc::c_ulong;
                        }
                        (*bufp).buffer = realloc(
                            (*bufp).buffer as *mut libc::c_void,
                            (*bufp).allocated,
                        ) as *mut libc::c_uchar;
                        if ((*bufp).buffer).is_null() {
                            return reg_errcode_t::REG_ESPACE;
                        }
                        if old_buffer_0 != (*bufp).buffer {
                            b = ((*bufp).buffer)
                                .offset(
                                    b.offset_from(old_buffer_0) as libc::c_long as isize,
                                );
                            begalt = ((*bufp).buffer)
                                .offset(
                                    begalt.offset_from(old_buffer_0) as libc::c_long as isize,
                                );
                            if !fixup_alt_jump.is_null() {
                                fixup_alt_jump = ((*bufp).buffer)
                                    .offset(
                                        fixup_alt_jump.offset_from(old_buffer_0) as libc::c_long
                                            as isize,
                                    );
                            }
                            if !laststart.is_null() {
                                laststart = ((*bufp).buffer)
                                    .offset(
                                        laststart.offset_from(old_buffer_0) as libc::c_long as isize,
                                    );
                            }
                            if !pending_exact.is_null() {
                                pending_exact = ((*bufp).buffer)
                                    .offset(
                                        pending_exact.offset_from(old_buffer_0) as libc::c_long
                                            as isize,
                                    );
                            }
                        }
                    }
                    let fresh2 = b;
                    b = b.offset(1);
                    *fresh2 = re_opcode_t::endline as libc::c_int as libc::c_uchar;
                    continue;
                } else {
                    current_block = 9887592654468655139;
                }
            }
            43 | 63 => {
                if syntax & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int != 0
                    || syntax
                        & ((((((((((1 as libc::c_int as libc::c_ulong)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int != 0
                {
                    current_block = 9887592654468655139;
                } else {
                    current_block = 390529185191362524;
                }
            }
            42 => {
                current_block = 390529185191362524;
            }
            46 => {
                laststart = b;
                while (b.offset_from((*bufp).buffer) as libc::c_long
                    + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                    > (*bufp).allocated
                {
                    let mut old_buffer_4: *mut libc::c_uchar = (*bufp).buffer;
                    if (*bufp).allocated
                        == ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                    {
                        return reg_errcode_t::REG_ESIZE;
                    }
                    (*bufp).allocated <<= 1 as libc::c_int;
                    if (*bufp).allocated
                        > ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                    {
                        (*bufp).allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                            as libc::c_ulong;
                    }
                    (*bufp).buffer = realloc(
                        (*bufp).buffer as *mut libc::c_void,
                        (*bufp).allocated,
                    ) as *mut libc::c_uchar;
                    if ((*bufp).buffer).is_null() {
                        return reg_errcode_t::REG_ESPACE;
                    }
                    if old_buffer_4 != (*bufp).buffer {
                        b = ((*bufp).buffer)
                            .offset(
                                b.offset_from(old_buffer_4) as libc::c_long as isize,
                            );
                        begalt = ((*bufp).buffer)
                            .offset(
                                begalt.offset_from(old_buffer_4) as libc::c_long as isize,
                            );
                        if !fixup_alt_jump.is_null() {
                            fixup_alt_jump = ((*bufp).buffer)
                                .offset(
                                    fixup_alt_jump.offset_from(old_buffer_4) as libc::c_long
                                        as isize,
                                );
                        }
                        if !laststart.is_null() {
                            laststart = ((*bufp).buffer)
                                .offset(
                                    laststart.offset_from(old_buffer_4) as libc::c_long as isize,
                                );
                        }
                        if !pending_exact.is_null() {
                            pending_exact = ((*bufp).buffer)
                                .offset(
                                    pending_exact.offset_from(old_buffer_4) as libc::c_long
                                        as isize,
                                );
                        }
                    }
                }
                let fresh5 = b;
                b = b.offset(1);
                *fresh5 = re_opcode_t::anychar as libc::c_int as libc::c_uchar;
                continue;
            }
            91 => {
                let mut had_char_class: boolean = 0 as libc::c_int as boolean;
                if p == pend {
                    free(compile_stack.stack as *mut libc::c_void);
                    return reg_errcode_t::from_libc_c_uint(
                        reg_errcode_t::REG_EBRACK as libc::c_int as u32,
                    );
                }
                while (b.offset_from((*bufp).buffer) as libc::c_long
                    + 34 as libc::c_int as libc::c_long) as libc::c_ulong
                    > (*bufp).allocated
                {
                    let mut old_buffer_5: *mut libc::c_uchar = (*bufp).buffer;
                    if (*bufp).allocated
                        == ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                    {
                        return reg_errcode_t::REG_ESIZE;
                    }
                    (*bufp).allocated <<= 1 as libc::c_int;
                    if (*bufp).allocated
                        > ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                    {
                        (*bufp).allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                            as libc::c_ulong;
                    }
                    (*bufp).buffer = realloc(
                        (*bufp).buffer as *mut libc::c_void,
                        (*bufp).allocated,
                    ) as *mut libc::c_uchar;
                    if ((*bufp).buffer).is_null() {
                        return reg_errcode_t::REG_ESPACE;
                    }
                    if old_buffer_5 != (*bufp).buffer {
                        b = ((*bufp).buffer)
                            .offset(
                                b.offset_from(old_buffer_5) as libc::c_long as isize,
                            );
                        begalt = ((*bufp).buffer)
                            .offset(
                                begalt.offset_from(old_buffer_5) as libc::c_long as isize,
                            );
                        if !fixup_alt_jump.is_null() {
                            fixup_alt_jump = ((*bufp).buffer)
                                .offset(
                                    fixup_alt_jump.offset_from(old_buffer_5) as libc::c_long
                                        as isize,
                                );
                        }
                        if !laststart.is_null() {
                            laststart = ((*bufp).buffer)
                                .offset(
                                    laststart.offset_from(old_buffer_5) as libc::c_long as isize,
                                );
                        }
                        if !pending_exact.is_null() {
                            pending_exact = ((*bufp).buffer)
                                .offset(
                                    pending_exact.offset_from(old_buffer_5) as libc::c_long
                                        as isize,
                                );
                        }
                    }
                }
                laststart = b;
                while (b.offset_from((*bufp).buffer) as libc::c_long
                    + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                    > (*bufp).allocated
                {
                    let mut old_buffer_6: *mut libc::c_uchar = (*bufp).buffer;
                    if (*bufp).allocated
                        == ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                    {
                        return reg_errcode_t::REG_ESIZE;
                    }
                    (*bufp).allocated <<= 1 as libc::c_int;
                    if (*bufp).allocated
                        > ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                    {
                        (*bufp).allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                            as libc::c_ulong;
                    }
                    (*bufp).buffer = realloc(
                        (*bufp).buffer as *mut libc::c_void,
                        (*bufp).allocated,
                    ) as *mut libc::c_uchar;
                    if ((*bufp).buffer).is_null() {
                        return reg_errcode_t::REG_ESPACE;
                    }
                    if old_buffer_6 != (*bufp).buffer {
                        b = ((*bufp).buffer)
                            .offset(
                                b.offset_from(old_buffer_6) as libc::c_long as isize,
                            );
                        begalt = ((*bufp).buffer)
                            .offset(
                                begalt.offset_from(old_buffer_6) as libc::c_long as isize,
                            );
                        if !fixup_alt_jump.is_null() {
                            fixup_alt_jump = ((*bufp).buffer)
                                .offset(
                                    fixup_alt_jump.offset_from(old_buffer_6) as libc::c_long
                                        as isize,
                                );
                        }
                        if !laststart.is_null() {
                            laststart = ((*bufp).buffer)
                                .offset(
                                    laststart.offset_from(old_buffer_6) as libc::c_long as isize,
                                );
                        }
                        if !pending_exact.is_null() {
                            pending_exact = ((*bufp).buffer)
                                .offset(
                                    pending_exact.offset_from(old_buffer_6) as libc::c_long
                                        as isize,
                                );
                        }
                    }
                }
                let fresh6 = b;
                b = b.offset(1);
                *fresh6 = (if *p as libc::c_int == '^' as i32 {
                    re_opcode_t::charset_not as libc::c_int
                } else {
                    re_opcode_t::charset as libc::c_int
                }) as libc::c_uchar;
                if *p as libc::c_int == '^' as i32 {
                    p = p.offset(1);
                    p;
                }
                p1 = p;
                while (b.offset_from((*bufp).buffer) as libc::c_long
                    + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                    > (*bufp).allocated
                {
                    let mut old_buffer_7: *mut libc::c_uchar = (*bufp).buffer;
                    if (*bufp).allocated
                        == ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                    {
                        return reg_errcode_t::REG_ESIZE;
                    }
                    (*bufp).allocated <<= 1 as libc::c_int;
                    if (*bufp).allocated
                        > ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                    {
                        (*bufp).allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                            as libc::c_ulong;
                    }
                    (*bufp).buffer = realloc(
                        (*bufp).buffer as *mut libc::c_void,
                        (*bufp).allocated,
                    ) as *mut libc::c_uchar;
                    if ((*bufp).buffer).is_null() {
                        return reg_errcode_t::REG_ESPACE;
                    }
                    if old_buffer_7 != (*bufp).buffer {
                        b = ((*bufp).buffer)
                            .offset(
                                b.offset_from(old_buffer_7) as libc::c_long as isize,
                            );
                        begalt = ((*bufp).buffer)
                            .offset(
                                begalt.offset_from(old_buffer_7) as libc::c_long as isize,
                            );
                        if !fixup_alt_jump.is_null() {
                            fixup_alt_jump = ((*bufp).buffer)
                                .offset(
                                    fixup_alt_jump.offset_from(old_buffer_7) as libc::c_long
                                        as isize,
                                );
                        }
                        if !laststart.is_null() {
                            laststart = ((*bufp).buffer)
                                .offset(
                                    laststart.offset_from(old_buffer_7) as libc::c_long as isize,
                                );
                        }
                        if !pending_exact.is_null() {
                            pending_exact = ((*bufp).buffer)
                                .offset(
                                    pending_exact.offset_from(old_buffer_7) as libc::c_long
                                        as isize,
                                );
                        }
                    }
                }
                let fresh7 = b;
                b = b.offset(1);
                *fresh7 = (((1 as libc::c_int) << 8 as libc::c_int) / 8 as libc::c_int)
                    as libc::c_uchar;
                memset(
                    b as *mut libc::c_void,
                    0 as libc::c_int,
                    (((1 as libc::c_int) << 8 as libc::c_int) / 8 as libc::c_int)
                        as libc::c_ulong,
                );
                if re_opcode_t::from_libc_c_uint(
                    *b.offset(-(2 as libc::c_int) as isize) as u32,
                ) as libc::c_uint
                    == re_opcode_t::charset_not as libc::c_int as libc::c_uint
                    && syntax
                        & ((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int
                        != 0
                {
                    let ref mut fresh8 = *b
                        .offset(
                            ('\n' as i32 as libc::c_uchar as libc::c_int
                                / 8 as libc::c_int) as isize,
                        );
                    *fresh8 = (*fresh8 as libc::c_int
                        | (1 as libc::c_int)
                            << '\n' as i32 as libc::c_uchar as libc::c_int
                                % 8 as libc::c_int) as libc::c_uchar;
                }
                loop {
                    if p == pend {
                        free(compile_stack.stack as *mut libc::c_void);
                        return reg_errcode_t::from_libc_c_uint(
                            reg_errcode_t::REG_EBRACK as libc::c_int as u32,
                        );
                    }
                    if p == pend {
                        return reg_errcode_t::REG_EEND;
                    }
                    let fresh9 = p;
                    p = p.offset(1);
                    c = *fresh9 as libc::c_uchar;
                    if !translate.is_null() {
                        c = *translate.offset(c as isize) as libc::c_uchar;
                    }
                    if syntax & 1 as libc::c_int as libc::c_ulong != 0
                        && c as libc::c_int == '\\' as i32
                    {
                        if p == pend {
                            free(compile_stack.stack as *mut libc::c_void);
                            return reg_errcode_t::from_libc_c_uint(
                                reg_errcode_t::REG_EESCAPE as libc::c_int as u32,
                            );
                        }
                        if p == pend {
                            return reg_errcode_t::REG_EEND;
                        }
                        let fresh10 = p;
                        p = p.offset(1);
                        c1 = *fresh10 as libc::c_uchar;
                        if !translate.is_null() {
                            c1 = *translate.offset(c1 as isize) as libc::c_uchar;
                        }
                        let ref mut fresh11 = *b
                            .offset((c1 as libc::c_int / 8 as libc::c_int) as isize);
                        *fresh11 = (*fresh11 as libc::c_int
                            | (1 as libc::c_int) << c1 as libc::c_int % 8 as libc::c_int)
                            as libc::c_uchar;
                    } else {
                        if c as libc::c_int == ']' as i32
                            && p != p1.offset(1 as libc::c_int as isize)
                        {
                            break;
                        }
                        if had_char_class as libc::c_int != 0
                            && c as libc::c_int == '-' as i32
                            && *p as libc::c_int != ']' as i32
                        {
                            free(compile_stack.stack as *mut libc::c_void);
                            return reg_errcode_t::from_libc_c_uint(
                                reg_errcode_t::REG_ERANGE as libc::c_int as u32,
                            );
                        }
                        if c as libc::c_int == '-' as i32
                            && !(p.offset(-(2 as libc::c_int as isize)) >= pattern
                                && *p.offset(-(2 as libc::c_int) as isize) as libc::c_int
                                    == '[' as i32)
                            && !(p.offset(-(3 as libc::c_int as isize)) >= pattern
                                && *p.offset(-(3 as libc::c_int) as isize) as libc::c_int
                                    == '[' as i32
                                && *p.offset(-(2 as libc::c_int) as isize) as libc::c_int
                                    == '^' as i32) && *p as libc::c_int != ']' as i32
                        {
                            let mut ret: reg_errcode_t = compile_range(
                                &mut p,
                                pend,
                                translate,
                                syntax,
                                b,
                            );
                            if ret as libc::c_uint
                                != reg_errcode_t::REG_NOERROR as libc::c_int as libc::c_uint
                            {
                                free(compile_stack.stack as *mut libc::c_void);
                                return ret;
                            }
                        } else if *p.offset(0 as libc::c_int as isize) as libc::c_int
                            == '-' as i32
                            && *p.offset(1 as libc::c_int as isize) as libc::c_int
                                != ']' as i32
                        {
                            let mut ret_0: reg_errcode_t = reg_errcode_t::REG_NOERROR;
                            if p == pend {
                                return reg_errcode_t::REG_EEND;
                            }
                            let fresh12 = p;
                            p = p.offset(1);
                            c1 = *fresh12 as libc::c_uchar;
                            if !translate.is_null() {
                                c1 = *translate.offset(c1 as isize) as libc::c_uchar;
                            }
                            ret_0 = compile_range(&mut p, pend, translate, syntax, b);
                            if ret_0 as libc::c_uint
                                != reg_errcode_t::REG_NOERROR as libc::c_int as libc::c_uint
                            {
                                free(compile_stack.stack as *mut libc::c_void);
                                return ret_0;
                            }
                        } else if syntax
                            & ((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                                << 1 as libc::c_int != 0 && c as libc::c_int == '[' as i32
                            && *p as libc::c_int == ':' as i32
                        {
                            let mut str: [libc::c_char; 7] = [0; 7];
                            if p == pend {
                                return reg_errcode_t::REG_EEND;
                            }
                            let fresh13 = p;
                            p = p.offset(1);
                            c = *fresh13 as libc::c_uchar;
                            if !translate.is_null() {
                                c = *translate.offset(c as isize) as libc::c_uchar;
                            }
                            c1 = 0 as libc::c_int as libc::c_uchar;
                            if p == pend {
                                free(compile_stack.stack as *mut libc::c_void);
                                return reg_errcode_t::from_libc_c_uint(
                                    reg_errcode_t::REG_EBRACK as libc::c_int as u32,
                                );
                            }
                            loop {
                                if p == pend {
                                    return reg_errcode_t::REG_EEND;
                                }
                                let fresh14 = p;
                                p = p.offset(1);
                                c = *fresh14 as libc::c_uchar;
                                if !translate.is_null() {
                                    c = *translate.offset(c as isize) as libc::c_uchar;
                                }
                                if c as libc::c_int == ':' as i32
                                    || c as libc::c_int == ']' as i32 || p == pend
                                    || c1 as libc::c_int == 6 as libc::c_int
                                {
                                    break;
                                }
                                let fresh15 = c1;
                                c1 = c1.wrapping_add(1);
                                str[fresh15 as usize] = c as libc::c_char;
                            }
                            str[c1 as usize] = '\0' as i32 as libc::c_char;
                            if c as libc::c_int == ':' as i32
                                && *p as libc::c_int == ']' as i32
                            {
                                let mut ch: libc::c_int = 0;
                                let mut is_alnum: boolean = (strcmp(
                                    str.as_mut_ptr(),
                                    b"alnum\0" as *const u8 as *const libc::c_char,
                                ) == 0 as libc::c_int) as libc::c_int as boolean;
                                let mut is_alpha: boolean = (strcmp(
                                    str.as_mut_ptr(),
                                    b"alpha\0" as *const u8 as *const libc::c_char,
                                ) == 0 as libc::c_int) as libc::c_int as boolean;
                                let mut is_blank: boolean = (strcmp(
                                    str.as_mut_ptr(),
                                    b"blank\0" as *const u8 as *const libc::c_char,
                                ) == 0 as libc::c_int) as libc::c_int as boolean;
                                let mut is_cntrl: boolean = (strcmp(
                                    str.as_mut_ptr(),
                                    b"cntrl\0" as *const u8 as *const libc::c_char,
                                ) == 0 as libc::c_int) as libc::c_int as boolean;
                                let mut is_digit: boolean = (strcmp(
                                    str.as_mut_ptr(),
                                    b"digit\0" as *const u8 as *const libc::c_char,
                                ) == 0 as libc::c_int) as libc::c_int as boolean;
                                let mut is_graph: boolean = (strcmp(
                                    str.as_mut_ptr(),
                                    b"graph\0" as *const u8 as *const libc::c_char,
                                ) == 0 as libc::c_int) as libc::c_int as boolean;
                                let mut is_lower: boolean = (strcmp(
                                    str.as_mut_ptr(),
                                    b"lower\0" as *const u8 as *const libc::c_char,
                                ) == 0 as libc::c_int) as libc::c_int as boolean;
                                let mut is_print: boolean = (strcmp(
                                    str.as_mut_ptr(),
                                    b"print\0" as *const u8 as *const libc::c_char,
                                ) == 0 as libc::c_int) as libc::c_int as boolean;
                                let mut is_punct: boolean = (strcmp(
                                    str.as_mut_ptr(),
                                    b"punct\0" as *const u8 as *const libc::c_char,
                                ) == 0 as libc::c_int) as libc::c_int as boolean;
                                let mut is_space: boolean = (strcmp(
                                    str.as_mut_ptr(),
                                    b"space\0" as *const u8 as *const libc::c_char,
                                ) == 0 as libc::c_int) as libc::c_int as boolean;
                                let mut is_upper: boolean = (strcmp(
                                    str.as_mut_ptr(),
                                    b"upper\0" as *const u8 as *const libc::c_char,
                                ) == 0 as libc::c_int) as libc::c_int as boolean;
                                let mut is_xdigit: boolean = (strcmp(
                                    str.as_mut_ptr(),
                                    b"xdigit\0" as *const u8 as *const libc::c_char,
                                ) == 0 as libc::c_int) as libc::c_int as boolean;
                                if !(strcmp(
                                    str.as_mut_ptr(),
                                    b"alpha\0" as *const u8 as *const libc::c_char,
                                ) == 0 as libc::c_int
                                    || strcmp(
                                        str.as_mut_ptr(),
                                        b"upper\0" as *const u8 as *const libc::c_char,
                                    ) == 0 as libc::c_int
                                    || strcmp(
                                        str.as_mut_ptr(),
                                        b"lower\0" as *const u8 as *const libc::c_char,
                                    ) == 0 as libc::c_int
                                    || strcmp(
                                        str.as_mut_ptr(),
                                        b"digit\0" as *const u8 as *const libc::c_char,
                                    ) == 0 as libc::c_int
                                    || strcmp(
                                        str.as_mut_ptr(),
                                        b"alnum\0" as *const u8 as *const libc::c_char,
                                    ) == 0 as libc::c_int
                                    || strcmp(
                                        str.as_mut_ptr(),
                                        b"xdigit\0" as *const u8 as *const libc::c_char,
                                    ) == 0 as libc::c_int
                                    || strcmp(
                                        str.as_mut_ptr(),
                                        b"space\0" as *const u8 as *const libc::c_char,
                                    ) == 0 as libc::c_int
                                    || strcmp(
                                        str.as_mut_ptr(),
                                        b"print\0" as *const u8 as *const libc::c_char,
                                    ) == 0 as libc::c_int
                                    || strcmp(
                                        str.as_mut_ptr(),
                                        b"punct\0" as *const u8 as *const libc::c_char,
                                    ) == 0 as libc::c_int
                                    || strcmp(
                                        str.as_mut_ptr(),
                                        b"graph\0" as *const u8 as *const libc::c_char,
                                    ) == 0 as libc::c_int
                                    || strcmp(
                                        str.as_mut_ptr(),
                                        b"cntrl\0" as *const u8 as *const libc::c_char,
                                    ) == 0 as libc::c_int
                                    || strcmp(
                                        str.as_mut_ptr(),
                                        b"blank\0" as *const u8 as *const libc::c_char,
                                    ) == 0 as libc::c_int)
                                {
                                    free(compile_stack.stack as *mut libc::c_void);
                                    return reg_errcode_t::from_libc_c_uint(
                                        reg_errcode_t::REG_ECTYPE as libc::c_int as u32,
                                    );
                                }
                                if p == pend {
                                    return reg_errcode_t::REG_EEND;
                                }
                                let fresh16 = p;
                                p = p.offset(1);
                                c = *fresh16 as libc::c_uchar;
                                if !translate.is_null() {
                                    c = *translate.offset(c as isize) as libc::c_uchar;
                                }
                                if p == pend {
                                    free(compile_stack.stack as *mut libc::c_void);
                                    return reg_errcode_t::from_libc_c_uint(
                                        reg_errcode_t::REG_EBRACK as libc::c_int as u32,
                                    );
                                }
                                ch = 0 as libc::c_int;
                                while ch < (1 as libc::c_int) << 8 as libc::c_int {
                                    if is_alnum as libc::c_int != 0
                                        && (1 as libc::c_int != 0
                                            && *(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
                                                & C2RustUnnamed_0::_ISalnum as libc::c_int as libc::c_ushort
                                                    as libc::c_int != 0)
                                        || is_alpha as libc::c_int != 0
                                            && (1 as libc::c_int != 0
                                                && *(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
                                                    & C2RustUnnamed_0::_ISalpha as libc::c_int as libc::c_ushort
                                                        as libc::c_int != 0)
                                        || is_blank as libc::c_int != 0
                                            && (1 as libc::c_int != 0
                                                && *(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
                                                    & C2RustUnnamed_0::_ISblank as libc::c_int as libc::c_ushort
                                                        as libc::c_int != 0)
                                        || is_cntrl as libc::c_int != 0
                                            && (1 as libc::c_int != 0
                                                && *(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
                                                    & C2RustUnnamed_0::_IScntrl as libc::c_int as libc::c_ushort
                                                        as libc::c_int != 0)
                                    {
                                        let ref mut fresh17 = *b
                                            .offset(
                                                (ch as libc::c_uchar as libc::c_int / 8 as libc::c_int)
                                                    as isize,
                                            );
                                        *fresh17 = (*fresh17 as libc::c_int
                                            | (1 as libc::c_int)
                                                << ch as libc::c_uchar as libc::c_int % 8 as libc::c_int)
                                            as libc::c_uchar;
                                    }
                                    if is_digit as libc::c_int != 0
                                        && (1 as libc::c_int != 0
                                            && *(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
                                                & C2RustUnnamed_0::_ISdigit as libc::c_int as libc::c_ushort
                                                    as libc::c_int != 0)
                                        || is_graph as libc::c_int != 0
                                            && (1 as libc::c_int != 0
                                                && *(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
                                                    & C2RustUnnamed_0::_ISgraph as libc::c_int as libc::c_ushort
                                                        as libc::c_int != 0)
                                        || is_lower as libc::c_int != 0
                                            && (1 as libc::c_int != 0
                                                && *(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
                                                    & C2RustUnnamed_0::_ISlower as libc::c_int as libc::c_ushort
                                                        as libc::c_int != 0)
                                        || is_print as libc::c_int != 0
                                            && (1 as libc::c_int != 0
                                                && *(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
                                                    & C2RustUnnamed_0::_ISprint as libc::c_int as libc::c_ushort
                                                        as libc::c_int != 0)
                                    {
                                        let ref mut fresh18 = *b
                                            .offset(
                                                (ch as libc::c_uchar as libc::c_int / 8 as libc::c_int)
                                                    as isize,
                                            );
                                        *fresh18 = (*fresh18 as libc::c_int
                                            | (1 as libc::c_int)
                                                << ch as libc::c_uchar as libc::c_int % 8 as libc::c_int)
                                            as libc::c_uchar;
                                    }
                                    if is_punct as libc::c_int != 0
                                        && (1 as libc::c_int != 0
                                            && *(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
                                                & C2RustUnnamed_0::_ISpunct as libc::c_int as libc::c_ushort
                                                    as libc::c_int != 0)
                                        || is_space as libc::c_int != 0
                                            && (1 as libc::c_int != 0
                                                && *(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
                                                    & C2RustUnnamed_0::_ISspace as libc::c_int as libc::c_ushort
                                                        as libc::c_int != 0)
                                        || is_upper as libc::c_int != 0
                                            && (1 as libc::c_int != 0
                                                && *(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
                                                    & C2RustUnnamed_0::_ISupper as libc::c_int as libc::c_ushort
                                                        as libc::c_int != 0)
                                        || is_xdigit as libc::c_int != 0
                                            && (1 as libc::c_int != 0
                                                && *(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
                                                    & C2RustUnnamed_0::_ISxdigit as libc::c_int
                                                        as libc::c_ushort as libc::c_int != 0)
                                    {
                                        let ref mut fresh19 = *b
                                            .offset(
                                                (ch as libc::c_uchar as libc::c_int / 8 as libc::c_int)
                                                    as isize,
                                            );
                                        *fresh19 = (*fresh19 as libc::c_int
                                            | (1 as libc::c_int)
                                                << ch as libc::c_uchar as libc::c_int % 8 as libc::c_int)
                                            as libc::c_uchar;
                                    }
                                    if !translate.is_null()
                                        && (is_upper as libc::c_int != 0
                                            || is_lower as libc::c_int != 0)
                                        && (1 as libc::c_int != 0
                                            && *(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
                                                & C2RustUnnamed_0::_ISupper as libc::c_int as libc::c_ushort
                                                    as libc::c_int != 0
                                            || 1 as libc::c_int != 0
                                                && *(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
                                                    & C2RustUnnamed_0::_ISlower as libc::c_int as libc::c_ushort
                                                        as libc::c_int != 0)
                                    {
                                        let ref mut fresh20 = *b
                                            .offset(
                                                (ch as libc::c_uchar as libc::c_int / 8 as libc::c_int)
                                                    as isize,
                                            );
                                        *fresh20 = (*fresh20 as libc::c_int
                                            | (1 as libc::c_int)
                                                << ch as libc::c_uchar as libc::c_int % 8 as libc::c_int)
                                            as libc::c_uchar;
                                    }
                                    ch += 1;
                                    ch;
                                }
                                had_char_class = 1 as libc::c_int as boolean;
                            } else {
                                c1 = c1.wrapping_add(1);
                                c1;
                                loop {
                                    let fresh21 = c1;
                                    c1 = c1.wrapping_sub(1);
                                    if !(fresh21 != 0) {
                                        break;
                                    }
                                    p = p.offset(-1);
                                    p;
                                }
                                let ref mut fresh22 = *b
                                    .offset(
                                        ('[' as i32 as libc::c_uchar as libc::c_int
                                            / 8 as libc::c_int) as isize,
                                    );
                                *fresh22 = (*fresh22 as libc::c_int
                                    | (1 as libc::c_int)
                                        << '[' as i32 as libc::c_uchar as libc::c_int
                                            % 8 as libc::c_int) as libc::c_uchar;
                                let ref mut fresh23 = *b
                                    .offset(
                                        (':' as i32 as libc::c_uchar as libc::c_int
                                            / 8 as libc::c_int) as isize,
                                    );
                                *fresh23 = (*fresh23 as libc::c_int
                                    | (1 as libc::c_int)
                                        << ':' as i32 as libc::c_uchar as libc::c_int
                                            % 8 as libc::c_int) as libc::c_uchar;
                                had_char_class = 0 as libc::c_int as boolean;
                            }
                        } else {
                            had_char_class = 0 as libc::c_int as boolean;
                            let ref mut fresh24 = *b
                                .offset((c as libc::c_int / 8 as libc::c_int) as isize);
                            *fresh24 = (*fresh24 as libc::c_int
                                | (1 as libc::c_int) << c as libc::c_int % 8 as libc::c_int)
                                as libc::c_uchar;
                        }
                    }
                }
                while *b.offset(-(1 as libc::c_int) as isize) as libc::c_int
                    > 0 as libc::c_int
                    && *b
                        .offset(
                            (*b.offset(-(1 as libc::c_int) as isize) as libc::c_int
                                - 1 as libc::c_int) as isize,
                        ) as libc::c_int == 0 as libc::c_int
                {
                    let ref mut fresh25 = *b.offset(-(1 as libc::c_int) as isize);
                    *fresh25 = (*fresh25).wrapping_sub(1);
                    *fresh25;
                }
                b = b
                    .offset(
                        *b.offset(-(1 as libc::c_int) as isize) as libc::c_int as isize,
                    );
                continue;
            }
            40 => {
                if syntax
                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int != 0
                {
                    current_block = 12924337694122082779;
                } else {
                    current_block = 9887592654468655139;
                }
            }
            41 => {
                if syntax
                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int != 0
                {
                    current_block = 4872567246065702152;
                } else {
                    current_block = 9887592654468655139;
                }
            }
            10 => {
                if syntax
                    & (((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int != 0
                {
                    current_block = 18405110941157351894;
                } else {
                    current_block = 9887592654468655139;
                }
            }
            124 => {
                if syntax
                    & (((((((((((((((1 as libc::c_int as libc::c_ulong)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int
                    != 0
                {
                    current_block = 18405110941157351894;
                } else {
                    current_block = 9887592654468655139;
                }
            }
            123 => {
                if syntax
                    & (((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                    && syntax
                        & ((((((((((((1 as libc::c_int as libc::c_ulong)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int != 0
                {
                    current_block = 9217721635109559143;
                } else {
                    current_block = 9887592654468655139;
                }
            }
            92 => {
                if p == pend {
                    free(compile_stack.stack as *mut libc::c_void);
                    return reg_errcode_t::from_libc_c_uint(
                        reg_errcode_t::REG_EESCAPE as libc::c_int as u32,
                    );
                }
                if p == pend {
                    return reg_errcode_t::REG_EEND;
                }
                let fresh26 = p;
                p = p.offset(1);
                c = *fresh26 as libc::c_uchar;
                match c as libc::c_int {
                    40 => {
                        current_block = 9497405096675874836;
                        match current_block {
                            8126495812788240094 => {
                                if syntax
                                    & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                    != 0
                                {
                                    current_block = 390529185191362524;
                                } else {
                                    current_block = 3962563478812244436;
                                }
                            }
                            18389040574536762539 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_16: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_16 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_16) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_16) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh41 = b;
                                    b = b.offset(1);
                                    *fresh41 = re_opcode_t::notwordchar as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            4092966239614665407 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_15: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_15 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_15) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_15) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh40 = b;
                                    b = b.offset(1);
                                    *fresh40 = re_opcode_t::wordchar as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            14831581286765265411 => {
                                if syntax
                                    & (((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int == 0
                                    || syntax
                                        & (((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                        && syntax
                                            & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || p.offset(-(2 as libc::c_int as isize)) == pattern
                                        && p == pend
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 9217721635109559143;
                                }
                            }
                            6723035467051578708 => {
                                if syntax
                                    & ((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || syntax
                                        & (((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 18405110941157351894;
                                }
                            }
                            13862862630540390946 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else if compile_stack.avail
                                    == 0 as libc::c_int as libc::c_uint
                                {
                                    if syntax
                                        & (((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                    {
                                        current_block = 3962563478812244436;
                                    } else {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return reg_errcode_t::from_libc_c_uint(
                                            reg_errcode_t::REG_ERPAREN as libc::c_int as u32,
                                        );
                                    }
                                } else {
                                    current_block = 4872567246065702152;
                                }
                            }
                            9497405096675874836 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 12924337694122082779;
                                }
                            }
                            13842607660749849617 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_18: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_18 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_18) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_18) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh43 = b;
                                    b = b.offset(1);
                                    *fresh43 = re_opcode_t::wordend as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            14518978060224207180 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_19: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_19 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_19) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_19) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh44 = b;
                                    b = b.offset(1);
                                    *fresh44 = re_opcode_t::wordbound as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            15263135129429906152 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_20: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_20 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_20) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_20) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh45 = b;
                                    b = b.offset(1);
                                    *fresh45 = re_opcode_t::notwordbound as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            2064595280536116385 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_21: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_21 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_21) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_21) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh46 = b;
                                    b = b.offset(1);
                                    *fresh46 = re_opcode_t::begbuf as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            9244997493990970786 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_22: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_22 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_22) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_22) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh47 = b;
                                    b = b.offset(1);
                                    *fresh47 = re_opcode_t::endbuf as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            2357893510580286616 => {
                                if syntax
                                    & ((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    c1 = (c as libc::c_int - '0' as i32) as libc::c_uchar;
                                    if c1 as libc::c_uint > regnum {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return reg_errcode_t::from_libc_c_uint(
                                            reg_errcode_t::REG_ESUBREG as libc::c_int as u32,
                                        );
                                    }
                                    if group_in_compile_stack(compile_stack, c1 as regnum_t)
                                        != 0
                                    {
                                        current_block = 9887592654468655139;
                                    } else {
                                        laststart = b;
                                        while (b.offset_from((*bufp).buffer) as libc::c_long
                                            + 2 as libc::c_int as libc::c_long) as libc::c_ulong
                                            > (*bufp).allocated
                                        {
                                            let mut old_buffer_23: *mut libc::c_uchar = (*bufp).buffer;
                                            if (*bufp).allocated
                                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                return reg_errcode_t::REG_ESIZE;
                                            }
                                            (*bufp).allocated <<= 1 as libc::c_int;
                                            if (*bufp).allocated
                                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                (*bufp).allocated = ((1 as libc::c_long)
                                                    << 16 as libc::c_int) as libc::c_ulong;
                                            }
                                            (*bufp).buffer = realloc(
                                                (*bufp).buffer as *mut libc::c_void,
                                                (*bufp).allocated,
                                            ) as *mut libc::c_uchar;
                                            if ((*bufp).buffer).is_null() {
                                                return reg_errcode_t::REG_ESPACE;
                                            }
                                            if old_buffer_23 != (*bufp).buffer {
                                                b = ((*bufp).buffer)
                                                    .offset(
                                                        b.offset_from(old_buffer_23) as libc::c_long as isize,
                                                    );
                                                begalt = ((*bufp).buffer)
                                                    .offset(
                                                        begalt.offset_from(old_buffer_23) as libc::c_long as isize,
                                                    );
                                                if !fixup_alt_jump.is_null() {
                                                    fixup_alt_jump = ((*bufp).buffer)
                                                        .offset(
                                                            fixup_alt_jump.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !laststart.is_null() {
                                                    laststart = ((*bufp).buffer)
                                                        .offset(
                                                            laststart.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !pending_exact.is_null() {
                                                    pending_exact = ((*bufp).buffer)
                                                        .offset(
                                                            pending_exact.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                            }
                                        }
                                        let fresh48 = b;
                                        b = b.offset(1);
                                        *fresh48 = re_opcode_t::duplicate as libc::c_int
                                            as libc::c_uchar;
                                        let fresh49 = b;
                                        b = b.offset(1);
                                        *fresh49 = c1;
                                        continue;
                                    }
                                }
                            }
                            _ => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_17: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_17 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_17) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_17) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh42 = b;
                                    b = b.offset(1);
                                    *fresh42 = re_opcode_t::wordbeg as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                        }
                    }
                    41 => {
                        current_block = 13862862630540390946;
                        match current_block {
                            8126495812788240094 => {
                                if syntax
                                    & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                    != 0
                                {
                                    current_block = 390529185191362524;
                                } else {
                                    current_block = 3962563478812244436;
                                }
                            }
                            18389040574536762539 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_16: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_16 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_16) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_16) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh41 = b;
                                    b = b.offset(1);
                                    *fresh41 = re_opcode_t::notwordchar as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            4092966239614665407 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_15: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_15 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_15) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_15) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh40 = b;
                                    b = b.offset(1);
                                    *fresh40 = re_opcode_t::wordchar as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            14831581286765265411 => {
                                if syntax
                                    & (((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int == 0
                                    || syntax
                                        & (((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                        && syntax
                                            & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || p.offset(-(2 as libc::c_int as isize)) == pattern
                                        && p == pend
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 9217721635109559143;
                                }
                            }
                            6723035467051578708 => {
                                if syntax
                                    & ((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || syntax
                                        & (((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 18405110941157351894;
                                }
                            }
                            13862862630540390946 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else if compile_stack.avail
                                    == 0 as libc::c_int as libc::c_uint
                                {
                                    if syntax
                                        & (((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                    {
                                        current_block = 3962563478812244436;
                                    } else {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return reg_errcode_t::from_libc_c_uint(
                                            reg_errcode_t::REG_ERPAREN as libc::c_int as u32,
                                        );
                                    }
                                } else {
                                    current_block = 4872567246065702152;
                                }
                            }
                            9497405096675874836 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 12924337694122082779;
                                }
                            }
                            13842607660749849617 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_18: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_18 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_18) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_18) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh43 = b;
                                    b = b.offset(1);
                                    *fresh43 = re_opcode_t::wordend as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            14518978060224207180 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_19: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_19 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_19) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_19) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh44 = b;
                                    b = b.offset(1);
                                    *fresh44 = re_opcode_t::wordbound as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            15263135129429906152 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_20: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_20 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_20) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_20) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh45 = b;
                                    b = b.offset(1);
                                    *fresh45 = re_opcode_t::notwordbound as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            2064595280536116385 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_21: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_21 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_21) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_21) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh46 = b;
                                    b = b.offset(1);
                                    *fresh46 = re_opcode_t::begbuf as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            9244997493990970786 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_22: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_22 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_22) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_22) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh47 = b;
                                    b = b.offset(1);
                                    *fresh47 = re_opcode_t::endbuf as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            2357893510580286616 => {
                                if syntax
                                    & ((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    c1 = (c as libc::c_int - '0' as i32) as libc::c_uchar;
                                    if c1 as libc::c_uint > regnum {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return reg_errcode_t::from_libc_c_uint(
                                            reg_errcode_t::REG_ESUBREG as libc::c_int as u32,
                                        );
                                    }
                                    if group_in_compile_stack(compile_stack, c1 as regnum_t)
                                        != 0
                                    {
                                        current_block = 9887592654468655139;
                                    } else {
                                        laststart = b;
                                        while (b.offset_from((*bufp).buffer) as libc::c_long
                                            + 2 as libc::c_int as libc::c_long) as libc::c_ulong
                                            > (*bufp).allocated
                                        {
                                            let mut old_buffer_23: *mut libc::c_uchar = (*bufp).buffer;
                                            if (*bufp).allocated
                                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                return reg_errcode_t::REG_ESIZE;
                                            }
                                            (*bufp).allocated <<= 1 as libc::c_int;
                                            if (*bufp).allocated
                                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                (*bufp).allocated = ((1 as libc::c_long)
                                                    << 16 as libc::c_int) as libc::c_ulong;
                                            }
                                            (*bufp).buffer = realloc(
                                                (*bufp).buffer as *mut libc::c_void,
                                                (*bufp).allocated,
                                            ) as *mut libc::c_uchar;
                                            if ((*bufp).buffer).is_null() {
                                                return reg_errcode_t::REG_ESPACE;
                                            }
                                            if old_buffer_23 != (*bufp).buffer {
                                                b = ((*bufp).buffer)
                                                    .offset(
                                                        b.offset_from(old_buffer_23) as libc::c_long as isize,
                                                    );
                                                begalt = ((*bufp).buffer)
                                                    .offset(
                                                        begalt.offset_from(old_buffer_23) as libc::c_long as isize,
                                                    );
                                                if !fixup_alt_jump.is_null() {
                                                    fixup_alt_jump = ((*bufp).buffer)
                                                        .offset(
                                                            fixup_alt_jump.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !laststart.is_null() {
                                                    laststart = ((*bufp).buffer)
                                                        .offset(
                                                            laststart.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !pending_exact.is_null() {
                                                    pending_exact = ((*bufp).buffer)
                                                        .offset(
                                                            pending_exact.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                            }
                                        }
                                        let fresh48 = b;
                                        b = b.offset(1);
                                        *fresh48 = re_opcode_t::duplicate as libc::c_int
                                            as libc::c_uchar;
                                        let fresh49 = b;
                                        b = b.offset(1);
                                        *fresh49 = c1;
                                        continue;
                                    }
                                }
                            }
                            _ => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_17: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_17 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_17) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_17) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh42 = b;
                                    b = b.offset(1);
                                    *fresh42 = re_opcode_t::wordbeg as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                        }
                    }
                    124 => {
                        current_block = 6723035467051578708;
                        match current_block {
                            8126495812788240094 => {
                                if syntax
                                    & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                    != 0
                                {
                                    current_block = 390529185191362524;
                                } else {
                                    current_block = 3962563478812244436;
                                }
                            }
                            18389040574536762539 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_16: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_16 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_16) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_16) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh41 = b;
                                    b = b.offset(1);
                                    *fresh41 = re_opcode_t::notwordchar as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            4092966239614665407 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_15: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_15 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_15) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_15) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh40 = b;
                                    b = b.offset(1);
                                    *fresh40 = re_opcode_t::wordchar as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            14831581286765265411 => {
                                if syntax
                                    & (((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int == 0
                                    || syntax
                                        & (((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                        && syntax
                                            & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || p.offset(-(2 as libc::c_int as isize)) == pattern
                                        && p == pend
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 9217721635109559143;
                                }
                            }
                            6723035467051578708 => {
                                if syntax
                                    & ((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || syntax
                                        & (((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 18405110941157351894;
                                }
                            }
                            13862862630540390946 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else if compile_stack.avail
                                    == 0 as libc::c_int as libc::c_uint
                                {
                                    if syntax
                                        & (((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                    {
                                        current_block = 3962563478812244436;
                                    } else {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return reg_errcode_t::from_libc_c_uint(
                                            reg_errcode_t::REG_ERPAREN as libc::c_int as u32,
                                        );
                                    }
                                } else {
                                    current_block = 4872567246065702152;
                                }
                            }
                            9497405096675874836 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 12924337694122082779;
                                }
                            }
                            13842607660749849617 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_18: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_18 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_18) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_18) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh43 = b;
                                    b = b.offset(1);
                                    *fresh43 = re_opcode_t::wordend as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            14518978060224207180 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_19: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_19 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_19) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_19) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh44 = b;
                                    b = b.offset(1);
                                    *fresh44 = re_opcode_t::wordbound as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            15263135129429906152 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_20: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_20 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_20) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_20) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh45 = b;
                                    b = b.offset(1);
                                    *fresh45 = re_opcode_t::notwordbound as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            2064595280536116385 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_21: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_21 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_21) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_21) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh46 = b;
                                    b = b.offset(1);
                                    *fresh46 = re_opcode_t::begbuf as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            9244997493990970786 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_22: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_22 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_22) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_22) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh47 = b;
                                    b = b.offset(1);
                                    *fresh47 = re_opcode_t::endbuf as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            2357893510580286616 => {
                                if syntax
                                    & ((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    c1 = (c as libc::c_int - '0' as i32) as libc::c_uchar;
                                    if c1 as libc::c_uint > regnum {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return reg_errcode_t::from_libc_c_uint(
                                            reg_errcode_t::REG_ESUBREG as libc::c_int as u32,
                                        );
                                    }
                                    if group_in_compile_stack(compile_stack, c1 as regnum_t)
                                        != 0
                                    {
                                        current_block = 9887592654468655139;
                                    } else {
                                        laststart = b;
                                        while (b.offset_from((*bufp).buffer) as libc::c_long
                                            + 2 as libc::c_int as libc::c_long) as libc::c_ulong
                                            > (*bufp).allocated
                                        {
                                            let mut old_buffer_23: *mut libc::c_uchar = (*bufp).buffer;
                                            if (*bufp).allocated
                                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                return reg_errcode_t::REG_ESIZE;
                                            }
                                            (*bufp).allocated <<= 1 as libc::c_int;
                                            if (*bufp).allocated
                                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                (*bufp).allocated = ((1 as libc::c_long)
                                                    << 16 as libc::c_int) as libc::c_ulong;
                                            }
                                            (*bufp).buffer = realloc(
                                                (*bufp).buffer as *mut libc::c_void,
                                                (*bufp).allocated,
                                            ) as *mut libc::c_uchar;
                                            if ((*bufp).buffer).is_null() {
                                                return reg_errcode_t::REG_ESPACE;
                                            }
                                            if old_buffer_23 != (*bufp).buffer {
                                                b = ((*bufp).buffer)
                                                    .offset(
                                                        b.offset_from(old_buffer_23) as libc::c_long as isize,
                                                    );
                                                begalt = ((*bufp).buffer)
                                                    .offset(
                                                        begalt.offset_from(old_buffer_23) as libc::c_long as isize,
                                                    );
                                                if !fixup_alt_jump.is_null() {
                                                    fixup_alt_jump = ((*bufp).buffer)
                                                        .offset(
                                                            fixup_alt_jump.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !laststart.is_null() {
                                                    laststart = ((*bufp).buffer)
                                                        .offset(
                                                            laststart.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !pending_exact.is_null() {
                                                    pending_exact = ((*bufp).buffer)
                                                        .offset(
                                                            pending_exact.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                            }
                                        }
                                        let fresh48 = b;
                                        b = b.offset(1);
                                        *fresh48 = re_opcode_t::duplicate as libc::c_int
                                            as libc::c_uchar;
                                        let fresh49 = b;
                                        b = b.offset(1);
                                        *fresh49 = c1;
                                        continue;
                                    }
                                }
                            }
                            _ => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_17: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_17 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_17) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_17) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh42 = b;
                                    b = b.offset(1);
                                    *fresh42 = re_opcode_t::wordbeg as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                        }
                    }
                    123 => {
                        current_block = 14831581286765265411;
                        match current_block {
                            8126495812788240094 => {
                                if syntax
                                    & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                    != 0
                                {
                                    current_block = 390529185191362524;
                                } else {
                                    current_block = 3962563478812244436;
                                }
                            }
                            18389040574536762539 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_16: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_16 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_16) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_16) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh41 = b;
                                    b = b.offset(1);
                                    *fresh41 = re_opcode_t::notwordchar as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            4092966239614665407 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_15: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_15 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_15) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_15) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh40 = b;
                                    b = b.offset(1);
                                    *fresh40 = re_opcode_t::wordchar as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            14831581286765265411 => {
                                if syntax
                                    & (((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int == 0
                                    || syntax
                                        & (((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                        && syntax
                                            & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || p.offset(-(2 as libc::c_int as isize)) == pattern
                                        && p == pend
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 9217721635109559143;
                                }
                            }
                            6723035467051578708 => {
                                if syntax
                                    & ((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || syntax
                                        & (((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 18405110941157351894;
                                }
                            }
                            13862862630540390946 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else if compile_stack.avail
                                    == 0 as libc::c_int as libc::c_uint
                                {
                                    if syntax
                                        & (((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                    {
                                        current_block = 3962563478812244436;
                                    } else {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return reg_errcode_t::from_libc_c_uint(
                                            reg_errcode_t::REG_ERPAREN as libc::c_int as u32,
                                        );
                                    }
                                } else {
                                    current_block = 4872567246065702152;
                                }
                            }
                            9497405096675874836 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 12924337694122082779;
                                }
                            }
                            13842607660749849617 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_18: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_18 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_18) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_18) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh43 = b;
                                    b = b.offset(1);
                                    *fresh43 = re_opcode_t::wordend as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            14518978060224207180 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_19: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_19 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_19) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_19) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh44 = b;
                                    b = b.offset(1);
                                    *fresh44 = re_opcode_t::wordbound as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            15263135129429906152 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_20: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_20 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_20) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_20) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh45 = b;
                                    b = b.offset(1);
                                    *fresh45 = re_opcode_t::notwordbound as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            2064595280536116385 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_21: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_21 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_21) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_21) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh46 = b;
                                    b = b.offset(1);
                                    *fresh46 = re_opcode_t::begbuf as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            9244997493990970786 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_22: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_22 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_22) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_22) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh47 = b;
                                    b = b.offset(1);
                                    *fresh47 = re_opcode_t::endbuf as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            2357893510580286616 => {
                                if syntax
                                    & ((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    c1 = (c as libc::c_int - '0' as i32) as libc::c_uchar;
                                    if c1 as libc::c_uint > regnum {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return reg_errcode_t::from_libc_c_uint(
                                            reg_errcode_t::REG_ESUBREG as libc::c_int as u32,
                                        );
                                    }
                                    if group_in_compile_stack(compile_stack, c1 as regnum_t)
                                        != 0
                                    {
                                        current_block = 9887592654468655139;
                                    } else {
                                        laststart = b;
                                        while (b.offset_from((*bufp).buffer) as libc::c_long
                                            + 2 as libc::c_int as libc::c_long) as libc::c_ulong
                                            > (*bufp).allocated
                                        {
                                            let mut old_buffer_23: *mut libc::c_uchar = (*bufp).buffer;
                                            if (*bufp).allocated
                                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                return reg_errcode_t::REG_ESIZE;
                                            }
                                            (*bufp).allocated <<= 1 as libc::c_int;
                                            if (*bufp).allocated
                                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                (*bufp).allocated = ((1 as libc::c_long)
                                                    << 16 as libc::c_int) as libc::c_ulong;
                                            }
                                            (*bufp).buffer = realloc(
                                                (*bufp).buffer as *mut libc::c_void,
                                                (*bufp).allocated,
                                            ) as *mut libc::c_uchar;
                                            if ((*bufp).buffer).is_null() {
                                                return reg_errcode_t::REG_ESPACE;
                                            }
                                            if old_buffer_23 != (*bufp).buffer {
                                                b = ((*bufp).buffer)
                                                    .offset(
                                                        b.offset_from(old_buffer_23) as libc::c_long as isize,
                                                    );
                                                begalt = ((*bufp).buffer)
                                                    .offset(
                                                        begalt.offset_from(old_buffer_23) as libc::c_long as isize,
                                                    );
                                                if !fixup_alt_jump.is_null() {
                                                    fixup_alt_jump = ((*bufp).buffer)
                                                        .offset(
                                                            fixup_alt_jump.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !laststart.is_null() {
                                                    laststart = ((*bufp).buffer)
                                                        .offset(
                                                            laststart.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !pending_exact.is_null() {
                                                    pending_exact = ((*bufp).buffer)
                                                        .offset(
                                                            pending_exact.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                            }
                                        }
                                        let fresh48 = b;
                                        b = b.offset(1);
                                        *fresh48 = re_opcode_t::duplicate as libc::c_int
                                            as libc::c_uchar;
                                        let fresh49 = b;
                                        b = b.offset(1);
                                        *fresh49 = c1;
                                        continue;
                                    }
                                }
                            }
                            _ => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_17: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_17 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_17) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_17) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh42 = b;
                                    b = b.offset(1);
                                    *fresh42 = re_opcode_t::wordbeg as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                        }
                    }
                    119 => {
                        current_block = 4092966239614665407;
                        match current_block {
                            8126495812788240094 => {
                                if syntax
                                    & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                    != 0
                                {
                                    current_block = 390529185191362524;
                                } else {
                                    current_block = 3962563478812244436;
                                }
                            }
                            18389040574536762539 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_16: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_16 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_16) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_16) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh41 = b;
                                    b = b.offset(1);
                                    *fresh41 = re_opcode_t::notwordchar as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            4092966239614665407 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_15: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_15 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_15) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_15) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh40 = b;
                                    b = b.offset(1);
                                    *fresh40 = re_opcode_t::wordchar as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            14831581286765265411 => {
                                if syntax
                                    & (((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int == 0
                                    || syntax
                                        & (((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                        && syntax
                                            & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || p.offset(-(2 as libc::c_int as isize)) == pattern
                                        && p == pend
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 9217721635109559143;
                                }
                            }
                            6723035467051578708 => {
                                if syntax
                                    & ((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || syntax
                                        & (((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 18405110941157351894;
                                }
                            }
                            13862862630540390946 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else if compile_stack.avail
                                    == 0 as libc::c_int as libc::c_uint
                                {
                                    if syntax
                                        & (((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                    {
                                        current_block = 3962563478812244436;
                                    } else {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return reg_errcode_t::from_libc_c_uint(
                                            reg_errcode_t::REG_ERPAREN as libc::c_int as u32,
                                        );
                                    }
                                } else {
                                    current_block = 4872567246065702152;
                                }
                            }
                            9497405096675874836 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 12924337694122082779;
                                }
                            }
                            13842607660749849617 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_18: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_18 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_18) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_18) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh43 = b;
                                    b = b.offset(1);
                                    *fresh43 = re_opcode_t::wordend as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            14518978060224207180 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_19: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_19 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_19) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_19) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh44 = b;
                                    b = b.offset(1);
                                    *fresh44 = re_opcode_t::wordbound as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            15263135129429906152 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_20: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_20 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_20) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_20) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh45 = b;
                                    b = b.offset(1);
                                    *fresh45 = re_opcode_t::notwordbound as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            2064595280536116385 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_21: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_21 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_21) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_21) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh46 = b;
                                    b = b.offset(1);
                                    *fresh46 = re_opcode_t::begbuf as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            9244997493990970786 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_22: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_22 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_22) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_22) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh47 = b;
                                    b = b.offset(1);
                                    *fresh47 = re_opcode_t::endbuf as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            2357893510580286616 => {
                                if syntax
                                    & ((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    c1 = (c as libc::c_int - '0' as i32) as libc::c_uchar;
                                    if c1 as libc::c_uint > regnum {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return reg_errcode_t::from_libc_c_uint(
                                            reg_errcode_t::REG_ESUBREG as libc::c_int as u32,
                                        );
                                    }
                                    if group_in_compile_stack(compile_stack, c1 as regnum_t)
                                        != 0
                                    {
                                        current_block = 9887592654468655139;
                                    } else {
                                        laststart = b;
                                        while (b.offset_from((*bufp).buffer) as libc::c_long
                                            + 2 as libc::c_int as libc::c_long) as libc::c_ulong
                                            > (*bufp).allocated
                                        {
                                            let mut old_buffer_23: *mut libc::c_uchar = (*bufp).buffer;
                                            if (*bufp).allocated
                                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                return reg_errcode_t::REG_ESIZE;
                                            }
                                            (*bufp).allocated <<= 1 as libc::c_int;
                                            if (*bufp).allocated
                                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                (*bufp).allocated = ((1 as libc::c_long)
                                                    << 16 as libc::c_int) as libc::c_ulong;
                                            }
                                            (*bufp).buffer = realloc(
                                                (*bufp).buffer as *mut libc::c_void,
                                                (*bufp).allocated,
                                            ) as *mut libc::c_uchar;
                                            if ((*bufp).buffer).is_null() {
                                                return reg_errcode_t::REG_ESPACE;
                                            }
                                            if old_buffer_23 != (*bufp).buffer {
                                                b = ((*bufp).buffer)
                                                    .offset(
                                                        b.offset_from(old_buffer_23) as libc::c_long as isize,
                                                    );
                                                begalt = ((*bufp).buffer)
                                                    .offset(
                                                        begalt.offset_from(old_buffer_23) as libc::c_long as isize,
                                                    );
                                                if !fixup_alt_jump.is_null() {
                                                    fixup_alt_jump = ((*bufp).buffer)
                                                        .offset(
                                                            fixup_alt_jump.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !laststart.is_null() {
                                                    laststart = ((*bufp).buffer)
                                                        .offset(
                                                            laststart.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !pending_exact.is_null() {
                                                    pending_exact = ((*bufp).buffer)
                                                        .offset(
                                                            pending_exact.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                            }
                                        }
                                        let fresh48 = b;
                                        b = b.offset(1);
                                        *fresh48 = re_opcode_t::duplicate as libc::c_int
                                            as libc::c_uchar;
                                        let fresh49 = b;
                                        b = b.offset(1);
                                        *fresh49 = c1;
                                        continue;
                                    }
                                }
                            }
                            _ => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_17: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_17 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_17) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_17) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh42 = b;
                                    b = b.offset(1);
                                    *fresh42 = re_opcode_t::wordbeg as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                        }
                    }
                    87 => {
                        current_block = 18389040574536762539;
                        match current_block {
                            8126495812788240094 => {
                                if syntax
                                    & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                    != 0
                                {
                                    current_block = 390529185191362524;
                                } else {
                                    current_block = 3962563478812244436;
                                }
                            }
                            18389040574536762539 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_16: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_16 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_16) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_16) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh41 = b;
                                    b = b.offset(1);
                                    *fresh41 = re_opcode_t::notwordchar as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            4092966239614665407 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_15: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_15 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_15) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_15) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh40 = b;
                                    b = b.offset(1);
                                    *fresh40 = re_opcode_t::wordchar as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            14831581286765265411 => {
                                if syntax
                                    & (((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int == 0
                                    || syntax
                                        & (((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                        && syntax
                                            & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || p.offset(-(2 as libc::c_int as isize)) == pattern
                                        && p == pend
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 9217721635109559143;
                                }
                            }
                            6723035467051578708 => {
                                if syntax
                                    & ((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || syntax
                                        & (((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 18405110941157351894;
                                }
                            }
                            13862862630540390946 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else if compile_stack.avail
                                    == 0 as libc::c_int as libc::c_uint
                                {
                                    if syntax
                                        & (((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                    {
                                        current_block = 3962563478812244436;
                                    } else {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return reg_errcode_t::from_libc_c_uint(
                                            reg_errcode_t::REG_ERPAREN as libc::c_int as u32,
                                        );
                                    }
                                } else {
                                    current_block = 4872567246065702152;
                                }
                            }
                            9497405096675874836 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 12924337694122082779;
                                }
                            }
                            13842607660749849617 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_18: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_18 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_18) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_18) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh43 = b;
                                    b = b.offset(1);
                                    *fresh43 = re_opcode_t::wordend as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            14518978060224207180 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_19: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_19 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_19) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_19) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh44 = b;
                                    b = b.offset(1);
                                    *fresh44 = re_opcode_t::wordbound as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            15263135129429906152 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_20: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_20 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_20) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_20) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh45 = b;
                                    b = b.offset(1);
                                    *fresh45 = re_opcode_t::notwordbound as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            2064595280536116385 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_21: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_21 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_21) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_21) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh46 = b;
                                    b = b.offset(1);
                                    *fresh46 = re_opcode_t::begbuf as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            9244997493990970786 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_22: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_22 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_22) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_22) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh47 = b;
                                    b = b.offset(1);
                                    *fresh47 = re_opcode_t::endbuf as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            2357893510580286616 => {
                                if syntax
                                    & ((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    c1 = (c as libc::c_int - '0' as i32) as libc::c_uchar;
                                    if c1 as libc::c_uint > regnum {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return reg_errcode_t::from_libc_c_uint(
                                            reg_errcode_t::REG_ESUBREG as libc::c_int as u32,
                                        );
                                    }
                                    if group_in_compile_stack(compile_stack, c1 as regnum_t)
                                        != 0
                                    {
                                        current_block = 9887592654468655139;
                                    } else {
                                        laststart = b;
                                        while (b.offset_from((*bufp).buffer) as libc::c_long
                                            + 2 as libc::c_int as libc::c_long) as libc::c_ulong
                                            > (*bufp).allocated
                                        {
                                            let mut old_buffer_23: *mut libc::c_uchar = (*bufp).buffer;
                                            if (*bufp).allocated
                                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                return reg_errcode_t::REG_ESIZE;
                                            }
                                            (*bufp).allocated <<= 1 as libc::c_int;
                                            if (*bufp).allocated
                                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                (*bufp).allocated = ((1 as libc::c_long)
                                                    << 16 as libc::c_int) as libc::c_ulong;
                                            }
                                            (*bufp).buffer = realloc(
                                                (*bufp).buffer as *mut libc::c_void,
                                                (*bufp).allocated,
                                            ) as *mut libc::c_uchar;
                                            if ((*bufp).buffer).is_null() {
                                                return reg_errcode_t::REG_ESPACE;
                                            }
                                            if old_buffer_23 != (*bufp).buffer {
                                                b = ((*bufp).buffer)
                                                    .offset(
                                                        b.offset_from(old_buffer_23) as libc::c_long as isize,
                                                    );
                                                begalt = ((*bufp).buffer)
                                                    .offset(
                                                        begalt.offset_from(old_buffer_23) as libc::c_long as isize,
                                                    );
                                                if !fixup_alt_jump.is_null() {
                                                    fixup_alt_jump = ((*bufp).buffer)
                                                        .offset(
                                                            fixup_alt_jump.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !laststart.is_null() {
                                                    laststart = ((*bufp).buffer)
                                                        .offset(
                                                            laststart.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !pending_exact.is_null() {
                                                    pending_exact = ((*bufp).buffer)
                                                        .offset(
                                                            pending_exact.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                            }
                                        }
                                        let fresh48 = b;
                                        b = b.offset(1);
                                        *fresh48 = re_opcode_t::duplicate as libc::c_int
                                            as libc::c_uchar;
                                        let fresh49 = b;
                                        b = b.offset(1);
                                        *fresh49 = c1;
                                        continue;
                                    }
                                }
                            }
                            _ => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_17: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_17 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_17) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_17) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh42 = b;
                                    b = b.offset(1);
                                    *fresh42 = re_opcode_t::wordbeg as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                        }
                    }
                    60 => {
                        current_block = 10401831275666622796;
                        match current_block {
                            8126495812788240094 => {
                                if syntax
                                    & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                    != 0
                                {
                                    current_block = 390529185191362524;
                                } else {
                                    current_block = 3962563478812244436;
                                }
                            }
                            18389040574536762539 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_16: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_16 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_16) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_16) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh41 = b;
                                    b = b.offset(1);
                                    *fresh41 = re_opcode_t::notwordchar as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            4092966239614665407 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_15: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_15 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_15) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_15) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh40 = b;
                                    b = b.offset(1);
                                    *fresh40 = re_opcode_t::wordchar as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            14831581286765265411 => {
                                if syntax
                                    & (((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int == 0
                                    || syntax
                                        & (((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                        && syntax
                                            & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || p.offset(-(2 as libc::c_int as isize)) == pattern
                                        && p == pend
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 9217721635109559143;
                                }
                            }
                            6723035467051578708 => {
                                if syntax
                                    & ((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || syntax
                                        & (((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 18405110941157351894;
                                }
                            }
                            13862862630540390946 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else if compile_stack.avail
                                    == 0 as libc::c_int as libc::c_uint
                                {
                                    if syntax
                                        & (((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                    {
                                        current_block = 3962563478812244436;
                                    } else {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return reg_errcode_t::from_libc_c_uint(
                                            reg_errcode_t::REG_ERPAREN as libc::c_int as u32,
                                        );
                                    }
                                } else {
                                    current_block = 4872567246065702152;
                                }
                            }
                            9497405096675874836 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 12924337694122082779;
                                }
                            }
                            13842607660749849617 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_18: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_18 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_18) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_18) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh43 = b;
                                    b = b.offset(1);
                                    *fresh43 = re_opcode_t::wordend as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            14518978060224207180 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_19: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_19 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_19) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_19) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh44 = b;
                                    b = b.offset(1);
                                    *fresh44 = re_opcode_t::wordbound as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            15263135129429906152 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_20: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_20 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_20) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_20) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh45 = b;
                                    b = b.offset(1);
                                    *fresh45 = re_opcode_t::notwordbound as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            2064595280536116385 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_21: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_21 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_21) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_21) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh46 = b;
                                    b = b.offset(1);
                                    *fresh46 = re_opcode_t::begbuf as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            9244997493990970786 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_22: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_22 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_22) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_22) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh47 = b;
                                    b = b.offset(1);
                                    *fresh47 = re_opcode_t::endbuf as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            2357893510580286616 => {
                                if syntax
                                    & ((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    c1 = (c as libc::c_int - '0' as i32) as libc::c_uchar;
                                    if c1 as libc::c_uint > regnum {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return reg_errcode_t::from_libc_c_uint(
                                            reg_errcode_t::REG_ESUBREG as libc::c_int as u32,
                                        );
                                    }
                                    if group_in_compile_stack(compile_stack, c1 as regnum_t)
                                        != 0
                                    {
                                        current_block = 9887592654468655139;
                                    } else {
                                        laststart = b;
                                        while (b.offset_from((*bufp).buffer) as libc::c_long
                                            + 2 as libc::c_int as libc::c_long) as libc::c_ulong
                                            > (*bufp).allocated
                                        {
                                            let mut old_buffer_23: *mut libc::c_uchar = (*bufp).buffer;
                                            if (*bufp).allocated
                                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                return reg_errcode_t::REG_ESIZE;
                                            }
                                            (*bufp).allocated <<= 1 as libc::c_int;
                                            if (*bufp).allocated
                                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                (*bufp).allocated = ((1 as libc::c_long)
                                                    << 16 as libc::c_int) as libc::c_ulong;
                                            }
                                            (*bufp).buffer = realloc(
                                                (*bufp).buffer as *mut libc::c_void,
                                                (*bufp).allocated,
                                            ) as *mut libc::c_uchar;
                                            if ((*bufp).buffer).is_null() {
                                                return reg_errcode_t::REG_ESPACE;
                                            }
                                            if old_buffer_23 != (*bufp).buffer {
                                                b = ((*bufp).buffer)
                                                    .offset(
                                                        b.offset_from(old_buffer_23) as libc::c_long as isize,
                                                    );
                                                begalt = ((*bufp).buffer)
                                                    .offset(
                                                        begalt.offset_from(old_buffer_23) as libc::c_long as isize,
                                                    );
                                                if !fixup_alt_jump.is_null() {
                                                    fixup_alt_jump = ((*bufp).buffer)
                                                        .offset(
                                                            fixup_alt_jump.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !laststart.is_null() {
                                                    laststart = ((*bufp).buffer)
                                                        .offset(
                                                            laststart.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !pending_exact.is_null() {
                                                    pending_exact = ((*bufp).buffer)
                                                        .offset(
                                                            pending_exact.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                            }
                                        }
                                        let fresh48 = b;
                                        b = b.offset(1);
                                        *fresh48 = re_opcode_t::duplicate as libc::c_int
                                            as libc::c_uchar;
                                        let fresh49 = b;
                                        b = b.offset(1);
                                        *fresh49 = c1;
                                        continue;
                                    }
                                }
                            }
                            _ => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_17: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_17 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_17) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_17) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh42 = b;
                                    b = b.offset(1);
                                    *fresh42 = re_opcode_t::wordbeg as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                        }
                    }
                    62 => {
                        current_block = 13842607660749849617;
                        match current_block {
                            8126495812788240094 => {
                                if syntax
                                    & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                    != 0
                                {
                                    current_block = 390529185191362524;
                                } else {
                                    current_block = 3962563478812244436;
                                }
                            }
                            18389040574536762539 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_16: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_16 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_16) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_16) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh41 = b;
                                    b = b.offset(1);
                                    *fresh41 = re_opcode_t::notwordchar as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            4092966239614665407 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_15: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_15 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_15) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_15) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh40 = b;
                                    b = b.offset(1);
                                    *fresh40 = re_opcode_t::wordchar as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            14831581286765265411 => {
                                if syntax
                                    & (((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int == 0
                                    || syntax
                                        & (((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                        && syntax
                                            & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || p.offset(-(2 as libc::c_int as isize)) == pattern
                                        && p == pend
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 9217721635109559143;
                                }
                            }
                            6723035467051578708 => {
                                if syntax
                                    & ((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || syntax
                                        & (((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 18405110941157351894;
                                }
                            }
                            13862862630540390946 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else if compile_stack.avail
                                    == 0 as libc::c_int as libc::c_uint
                                {
                                    if syntax
                                        & (((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                    {
                                        current_block = 3962563478812244436;
                                    } else {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return reg_errcode_t::from_libc_c_uint(
                                            reg_errcode_t::REG_ERPAREN as libc::c_int as u32,
                                        );
                                    }
                                } else {
                                    current_block = 4872567246065702152;
                                }
                            }
                            9497405096675874836 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 12924337694122082779;
                                }
                            }
                            13842607660749849617 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_18: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_18 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_18) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_18) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh43 = b;
                                    b = b.offset(1);
                                    *fresh43 = re_opcode_t::wordend as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            14518978060224207180 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_19: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_19 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_19) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_19) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh44 = b;
                                    b = b.offset(1);
                                    *fresh44 = re_opcode_t::wordbound as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            15263135129429906152 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_20: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_20 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_20) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_20) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh45 = b;
                                    b = b.offset(1);
                                    *fresh45 = re_opcode_t::notwordbound as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            2064595280536116385 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_21: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_21 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_21) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_21) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh46 = b;
                                    b = b.offset(1);
                                    *fresh46 = re_opcode_t::begbuf as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            9244997493990970786 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_22: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_22 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_22) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_22) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh47 = b;
                                    b = b.offset(1);
                                    *fresh47 = re_opcode_t::endbuf as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            2357893510580286616 => {
                                if syntax
                                    & ((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    c1 = (c as libc::c_int - '0' as i32) as libc::c_uchar;
                                    if c1 as libc::c_uint > regnum {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return reg_errcode_t::from_libc_c_uint(
                                            reg_errcode_t::REG_ESUBREG as libc::c_int as u32,
                                        );
                                    }
                                    if group_in_compile_stack(compile_stack, c1 as regnum_t)
                                        != 0
                                    {
                                        current_block = 9887592654468655139;
                                    } else {
                                        laststart = b;
                                        while (b.offset_from((*bufp).buffer) as libc::c_long
                                            + 2 as libc::c_int as libc::c_long) as libc::c_ulong
                                            > (*bufp).allocated
                                        {
                                            let mut old_buffer_23: *mut libc::c_uchar = (*bufp).buffer;
                                            if (*bufp).allocated
                                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                return reg_errcode_t::REG_ESIZE;
                                            }
                                            (*bufp).allocated <<= 1 as libc::c_int;
                                            if (*bufp).allocated
                                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                (*bufp).allocated = ((1 as libc::c_long)
                                                    << 16 as libc::c_int) as libc::c_ulong;
                                            }
                                            (*bufp).buffer = realloc(
                                                (*bufp).buffer as *mut libc::c_void,
                                                (*bufp).allocated,
                                            ) as *mut libc::c_uchar;
                                            if ((*bufp).buffer).is_null() {
                                                return reg_errcode_t::REG_ESPACE;
                                            }
                                            if old_buffer_23 != (*bufp).buffer {
                                                b = ((*bufp).buffer)
                                                    .offset(
                                                        b.offset_from(old_buffer_23) as libc::c_long as isize,
                                                    );
                                                begalt = ((*bufp).buffer)
                                                    .offset(
                                                        begalt.offset_from(old_buffer_23) as libc::c_long as isize,
                                                    );
                                                if !fixup_alt_jump.is_null() {
                                                    fixup_alt_jump = ((*bufp).buffer)
                                                        .offset(
                                                            fixup_alt_jump.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !laststart.is_null() {
                                                    laststart = ((*bufp).buffer)
                                                        .offset(
                                                            laststart.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !pending_exact.is_null() {
                                                    pending_exact = ((*bufp).buffer)
                                                        .offset(
                                                            pending_exact.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                            }
                                        }
                                        let fresh48 = b;
                                        b = b.offset(1);
                                        *fresh48 = re_opcode_t::duplicate as libc::c_int
                                            as libc::c_uchar;
                                        let fresh49 = b;
                                        b = b.offset(1);
                                        *fresh49 = c1;
                                        continue;
                                    }
                                }
                            }
                            _ => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_17: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_17 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_17) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_17) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh42 = b;
                                    b = b.offset(1);
                                    *fresh42 = re_opcode_t::wordbeg as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                        }
                    }
                    98 => {
                        current_block = 14518978060224207180;
                        match current_block {
                            8126495812788240094 => {
                                if syntax
                                    & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                    != 0
                                {
                                    current_block = 390529185191362524;
                                } else {
                                    current_block = 3962563478812244436;
                                }
                            }
                            18389040574536762539 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_16: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_16 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_16) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_16) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh41 = b;
                                    b = b.offset(1);
                                    *fresh41 = re_opcode_t::notwordchar as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            4092966239614665407 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_15: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_15 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_15) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_15) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh40 = b;
                                    b = b.offset(1);
                                    *fresh40 = re_opcode_t::wordchar as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            14831581286765265411 => {
                                if syntax
                                    & (((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int == 0
                                    || syntax
                                        & (((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                        && syntax
                                            & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || p.offset(-(2 as libc::c_int as isize)) == pattern
                                        && p == pend
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 9217721635109559143;
                                }
                            }
                            6723035467051578708 => {
                                if syntax
                                    & ((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || syntax
                                        & (((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 18405110941157351894;
                                }
                            }
                            13862862630540390946 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else if compile_stack.avail
                                    == 0 as libc::c_int as libc::c_uint
                                {
                                    if syntax
                                        & (((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                    {
                                        current_block = 3962563478812244436;
                                    } else {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return reg_errcode_t::from_libc_c_uint(
                                            reg_errcode_t::REG_ERPAREN as libc::c_int as u32,
                                        );
                                    }
                                } else {
                                    current_block = 4872567246065702152;
                                }
                            }
                            9497405096675874836 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 12924337694122082779;
                                }
                            }
                            13842607660749849617 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_18: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_18 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_18) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_18) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh43 = b;
                                    b = b.offset(1);
                                    *fresh43 = re_opcode_t::wordend as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            14518978060224207180 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_19: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_19 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_19) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_19) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh44 = b;
                                    b = b.offset(1);
                                    *fresh44 = re_opcode_t::wordbound as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            15263135129429906152 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_20: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_20 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_20) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_20) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh45 = b;
                                    b = b.offset(1);
                                    *fresh45 = re_opcode_t::notwordbound as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            2064595280536116385 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_21: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_21 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_21) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_21) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh46 = b;
                                    b = b.offset(1);
                                    *fresh46 = re_opcode_t::begbuf as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            9244997493990970786 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_22: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_22 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_22) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_22) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh47 = b;
                                    b = b.offset(1);
                                    *fresh47 = re_opcode_t::endbuf as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            2357893510580286616 => {
                                if syntax
                                    & ((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    c1 = (c as libc::c_int - '0' as i32) as libc::c_uchar;
                                    if c1 as libc::c_uint > regnum {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return reg_errcode_t::from_libc_c_uint(
                                            reg_errcode_t::REG_ESUBREG as libc::c_int as u32,
                                        );
                                    }
                                    if group_in_compile_stack(compile_stack, c1 as regnum_t)
                                        != 0
                                    {
                                        current_block = 9887592654468655139;
                                    } else {
                                        laststart = b;
                                        while (b.offset_from((*bufp).buffer) as libc::c_long
                                            + 2 as libc::c_int as libc::c_long) as libc::c_ulong
                                            > (*bufp).allocated
                                        {
                                            let mut old_buffer_23: *mut libc::c_uchar = (*bufp).buffer;
                                            if (*bufp).allocated
                                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                return reg_errcode_t::REG_ESIZE;
                                            }
                                            (*bufp).allocated <<= 1 as libc::c_int;
                                            if (*bufp).allocated
                                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                (*bufp).allocated = ((1 as libc::c_long)
                                                    << 16 as libc::c_int) as libc::c_ulong;
                                            }
                                            (*bufp).buffer = realloc(
                                                (*bufp).buffer as *mut libc::c_void,
                                                (*bufp).allocated,
                                            ) as *mut libc::c_uchar;
                                            if ((*bufp).buffer).is_null() {
                                                return reg_errcode_t::REG_ESPACE;
                                            }
                                            if old_buffer_23 != (*bufp).buffer {
                                                b = ((*bufp).buffer)
                                                    .offset(
                                                        b.offset_from(old_buffer_23) as libc::c_long as isize,
                                                    );
                                                begalt = ((*bufp).buffer)
                                                    .offset(
                                                        begalt.offset_from(old_buffer_23) as libc::c_long as isize,
                                                    );
                                                if !fixup_alt_jump.is_null() {
                                                    fixup_alt_jump = ((*bufp).buffer)
                                                        .offset(
                                                            fixup_alt_jump.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !laststart.is_null() {
                                                    laststart = ((*bufp).buffer)
                                                        .offset(
                                                            laststart.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !pending_exact.is_null() {
                                                    pending_exact = ((*bufp).buffer)
                                                        .offset(
                                                            pending_exact.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                            }
                                        }
                                        let fresh48 = b;
                                        b = b.offset(1);
                                        *fresh48 = re_opcode_t::duplicate as libc::c_int
                                            as libc::c_uchar;
                                        let fresh49 = b;
                                        b = b.offset(1);
                                        *fresh49 = c1;
                                        continue;
                                    }
                                }
                            }
                            _ => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_17: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_17 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_17) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_17) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh42 = b;
                                    b = b.offset(1);
                                    *fresh42 = re_opcode_t::wordbeg as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                        }
                    }
                    66 => {
                        current_block = 15263135129429906152;
                        match current_block {
                            8126495812788240094 => {
                                if syntax
                                    & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                    != 0
                                {
                                    current_block = 390529185191362524;
                                } else {
                                    current_block = 3962563478812244436;
                                }
                            }
                            18389040574536762539 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_16: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_16 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_16) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_16) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh41 = b;
                                    b = b.offset(1);
                                    *fresh41 = re_opcode_t::notwordchar as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            4092966239614665407 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_15: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_15 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_15) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_15) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh40 = b;
                                    b = b.offset(1);
                                    *fresh40 = re_opcode_t::wordchar as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            14831581286765265411 => {
                                if syntax
                                    & (((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int == 0
                                    || syntax
                                        & (((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                        && syntax
                                            & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || p.offset(-(2 as libc::c_int as isize)) == pattern
                                        && p == pend
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 9217721635109559143;
                                }
                            }
                            6723035467051578708 => {
                                if syntax
                                    & ((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || syntax
                                        & (((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 18405110941157351894;
                                }
                            }
                            13862862630540390946 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else if compile_stack.avail
                                    == 0 as libc::c_int as libc::c_uint
                                {
                                    if syntax
                                        & (((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                    {
                                        current_block = 3962563478812244436;
                                    } else {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return reg_errcode_t::from_libc_c_uint(
                                            reg_errcode_t::REG_ERPAREN as libc::c_int as u32,
                                        );
                                    }
                                } else {
                                    current_block = 4872567246065702152;
                                }
                            }
                            9497405096675874836 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 12924337694122082779;
                                }
                            }
                            13842607660749849617 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_18: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_18 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_18) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_18) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh43 = b;
                                    b = b.offset(1);
                                    *fresh43 = re_opcode_t::wordend as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            14518978060224207180 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_19: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_19 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_19) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_19) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh44 = b;
                                    b = b.offset(1);
                                    *fresh44 = re_opcode_t::wordbound as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            15263135129429906152 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_20: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_20 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_20) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_20) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh45 = b;
                                    b = b.offset(1);
                                    *fresh45 = re_opcode_t::notwordbound as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            2064595280536116385 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_21: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_21 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_21) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_21) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh46 = b;
                                    b = b.offset(1);
                                    *fresh46 = re_opcode_t::begbuf as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            9244997493990970786 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_22: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_22 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_22) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_22) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh47 = b;
                                    b = b.offset(1);
                                    *fresh47 = re_opcode_t::endbuf as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            2357893510580286616 => {
                                if syntax
                                    & ((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    c1 = (c as libc::c_int - '0' as i32) as libc::c_uchar;
                                    if c1 as libc::c_uint > regnum {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return reg_errcode_t::from_libc_c_uint(
                                            reg_errcode_t::REG_ESUBREG as libc::c_int as u32,
                                        );
                                    }
                                    if group_in_compile_stack(compile_stack, c1 as regnum_t)
                                        != 0
                                    {
                                        current_block = 9887592654468655139;
                                    } else {
                                        laststart = b;
                                        while (b.offset_from((*bufp).buffer) as libc::c_long
                                            + 2 as libc::c_int as libc::c_long) as libc::c_ulong
                                            > (*bufp).allocated
                                        {
                                            let mut old_buffer_23: *mut libc::c_uchar = (*bufp).buffer;
                                            if (*bufp).allocated
                                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                return reg_errcode_t::REG_ESIZE;
                                            }
                                            (*bufp).allocated <<= 1 as libc::c_int;
                                            if (*bufp).allocated
                                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                (*bufp).allocated = ((1 as libc::c_long)
                                                    << 16 as libc::c_int) as libc::c_ulong;
                                            }
                                            (*bufp).buffer = realloc(
                                                (*bufp).buffer as *mut libc::c_void,
                                                (*bufp).allocated,
                                            ) as *mut libc::c_uchar;
                                            if ((*bufp).buffer).is_null() {
                                                return reg_errcode_t::REG_ESPACE;
                                            }
                                            if old_buffer_23 != (*bufp).buffer {
                                                b = ((*bufp).buffer)
                                                    .offset(
                                                        b.offset_from(old_buffer_23) as libc::c_long as isize,
                                                    );
                                                begalt = ((*bufp).buffer)
                                                    .offset(
                                                        begalt.offset_from(old_buffer_23) as libc::c_long as isize,
                                                    );
                                                if !fixup_alt_jump.is_null() {
                                                    fixup_alt_jump = ((*bufp).buffer)
                                                        .offset(
                                                            fixup_alt_jump.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !laststart.is_null() {
                                                    laststart = ((*bufp).buffer)
                                                        .offset(
                                                            laststart.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !pending_exact.is_null() {
                                                    pending_exact = ((*bufp).buffer)
                                                        .offset(
                                                            pending_exact.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                            }
                                        }
                                        let fresh48 = b;
                                        b = b.offset(1);
                                        *fresh48 = re_opcode_t::duplicate as libc::c_int
                                            as libc::c_uchar;
                                        let fresh49 = b;
                                        b = b.offset(1);
                                        *fresh49 = c1;
                                        continue;
                                    }
                                }
                            }
                            _ => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_17: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_17 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_17) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_17) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh42 = b;
                                    b = b.offset(1);
                                    *fresh42 = re_opcode_t::wordbeg as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                        }
                    }
                    96 => {
                        current_block = 2064595280536116385;
                        match current_block {
                            8126495812788240094 => {
                                if syntax
                                    & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                    != 0
                                {
                                    current_block = 390529185191362524;
                                } else {
                                    current_block = 3962563478812244436;
                                }
                            }
                            18389040574536762539 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_16: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_16 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_16) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_16) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh41 = b;
                                    b = b.offset(1);
                                    *fresh41 = re_opcode_t::notwordchar as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            4092966239614665407 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_15: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_15 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_15) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_15) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh40 = b;
                                    b = b.offset(1);
                                    *fresh40 = re_opcode_t::wordchar as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            14831581286765265411 => {
                                if syntax
                                    & (((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int == 0
                                    || syntax
                                        & (((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                        && syntax
                                            & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || p.offset(-(2 as libc::c_int as isize)) == pattern
                                        && p == pend
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 9217721635109559143;
                                }
                            }
                            6723035467051578708 => {
                                if syntax
                                    & ((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || syntax
                                        & (((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 18405110941157351894;
                                }
                            }
                            13862862630540390946 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else if compile_stack.avail
                                    == 0 as libc::c_int as libc::c_uint
                                {
                                    if syntax
                                        & (((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                    {
                                        current_block = 3962563478812244436;
                                    } else {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return reg_errcode_t::from_libc_c_uint(
                                            reg_errcode_t::REG_ERPAREN as libc::c_int as u32,
                                        );
                                    }
                                } else {
                                    current_block = 4872567246065702152;
                                }
                            }
                            9497405096675874836 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 12924337694122082779;
                                }
                            }
                            13842607660749849617 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_18: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_18 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_18) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_18) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh43 = b;
                                    b = b.offset(1);
                                    *fresh43 = re_opcode_t::wordend as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            14518978060224207180 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_19: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_19 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_19) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_19) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh44 = b;
                                    b = b.offset(1);
                                    *fresh44 = re_opcode_t::wordbound as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            15263135129429906152 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_20: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_20 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_20) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_20) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh45 = b;
                                    b = b.offset(1);
                                    *fresh45 = re_opcode_t::notwordbound as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            2064595280536116385 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_21: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_21 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_21) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_21) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh46 = b;
                                    b = b.offset(1);
                                    *fresh46 = re_opcode_t::begbuf as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            9244997493990970786 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_22: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_22 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_22) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_22) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh47 = b;
                                    b = b.offset(1);
                                    *fresh47 = re_opcode_t::endbuf as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            2357893510580286616 => {
                                if syntax
                                    & ((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    c1 = (c as libc::c_int - '0' as i32) as libc::c_uchar;
                                    if c1 as libc::c_uint > regnum {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return reg_errcode_t::from_libc_c_uint(
                                            reg_errcode_t::REG_ESUBREG as libc::c_int as u32,
                                        );
                                    }
                                    if group_in_compile_stack(compile_stack, c1 as regnum_t)
                                        != 0
                                    {
                                        current_block = 9887592654468655139;
                                    } else {
                                        laststart = b;
                                        while (b.offset_from((*bufp).buffer) as libc::c_long
                                            + 2 as libc::c_int as libc::c_long) as libc::c_ulong
                                            > (*bufp).allocated
                                        {
                                            let mut old_buffer_23: *mut libc::c_uchar = (*bufp).buffer;
                                            if (*bufp).allocated
                                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                return reg_errcode_t::REG_ESIZE;
                                            }
                                            (*bufp).allocated <<= 1 as libc::c_int;
                                            if (*bufp).allocated
                                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                (*bufp).allocated = ((1 as libc::c_long)
                                                    << 16 as libc::c_int) as libc::c_ulong;
                                            }
                                            (*bufp).buffer = realloc(
                                                (*bufp).buffer as *mut libc::c_void,
                                                (*bufp).allocated,
                                            ) as *mut libc::c_uchar;
                                            if ((*bufp).buffer).is_null() {
                                                return reg_errcode_t::REG_ESPACE;
                                            }
                                            if old_buffer_23 != (*bufp).buffer {
                                                b = ((*bufp).buffer)
                                                    .offset(
                                                        b.offset_from(old_buffer_23) as libc::c_long as isize,
                                                    );
                                                begalt = ((*bufp).buffer)
                                                    .offset(
                                                        begalt.offset_from(old_buffer_23) as libc::c_long as isize,
                                                    );
                                                if !fixup_alt_jump.is_null() {
                                                    fixup_alt_jump = ((*bufp).buffer)
                                                        .offset(
                                                            fixup_alt_jump.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !laststart.is_null() {
                                                    laststart = ((*bufp).buffer)
                                                        .offset(
                                                            laststart.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !pending_exact.is_null() {
                                                    pending_exact = ((*bufp).buffer)
                                                        .offset(
                                                            pending_exact.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                            }
                                        }
                                        let fresh48 = b;
                                        b = b.offset(1);
                                        *fresh48 = re_opcode_t::duplicate as libc::c_int
                                            as libc::c_uchar;
                                        let fresh49 = b;
                                        b = b.offset(1);
                                        *fresh49 = c1;
                                        continue;
                                    }
                                }
                            }
                            _ => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_17: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_17 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_17) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_17) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh42 = b;
                                    b = b.offset(1);
                                    *fresh42 = re_opcode_t::wordbeg as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                        }
                    }
                    39 => {
                        current_block = 9244997493990970786;
                        match current_block {
                            8126495812788240094 => {
                                if syntax
                                    & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                    != 0
                                {
                                    current_block = 390529185191362524;
                                } else {
                                    current_block = 3962563478812244436;
                                }
                            }
                            18389040574536762539 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_16: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_16 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_16) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_16) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh41 = b;
                                    b = b.offset(1);
                                    *fresh41 = re_opcode_t::notwordchar as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            4092966239614665407 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_15: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_15 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_15) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_15) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh40 = b;
                                    b = b.offset(1);
                                    *fresh40 = re_opcode_t::wordchar as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            14831581286765265411 => {
                                if syntax
                                    & (((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int == 0
                                    || syntax
                                        & (((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                        && syntax
                                            & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || p.offset(-(2 as libc::c_int as isize)) == pattern
                                        && p == pend
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 9217721635109559143;
                                }
                            }
                            6723035467051578708 => {
                                if syntax
                                    & ((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || syntax
                                        & (((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 18405110941157351894;
                                }
                            }
                            13862862630540390946 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else if compile_stack.avail
                                    == 0 as libc::c_int as libc::c_uint
                                {
                                    if syntax
                                        & (((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                    {
                                        current_block = 3962563478812244436;
                                    } else {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return reg_errcode_t::from_libc_c_uint(
                                            reg_errcode_t::REG_ERPAREN as libc::c_int as u32,
                                        );
                                    }
                                } else {
                                    current_block = 4872567246065702152;
                                }
                            }
                            9497405096675874836 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 12924337694122082779;
                                }
                            }
                            13842607660749849617 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_18: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_18 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_18) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_18) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh43 = b;
                                    b = b.offset(1);
                                    *fresh43 = re_opcode_t::wordend as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            14518978060224207180 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_19: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_19 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_19) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_19) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh44 = b;
                                    b = b.offset(1);
                                    *fresh44 = re_opcode_t::wordbound as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            15263135129429906152 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_20: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_20 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_20) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_20) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh45 = b;
                                    b = b.offset(1);
                                    *fresh45 = re_opcode_t::notwordbound as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            2064595280536116385 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_21: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_21 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_21) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_21) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh46 = b;
                                    b = b.offset(1);
                                    *fresh46 = re_opcode_t::begbuf as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            9244997493990970786 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_22: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_22 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_22) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_22) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh47 = b;
                                    b = b.offset(1);
                                    *fresh47 = re_opcode_t::endbuf as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            2357893510580286616 => {
                                if syntax
                                    & ((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    c1 = (c as libc::c_int - '0' as i32) as libc::c_uchar;
                                    if c1 as libc::c_uint > regnum {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return reg_errcode_t::from_libc_c_uint(
                                            reg_errcode_t::REG_ESUBREG as libc::c_int as u32,
                                        );
                                    }
                                    if group_in_compile_stack(compile_stack, c1 as regnum_t)
                                        != 0
                                    {
                                        current_block = 9887592654468655139;
                                    } else {
                                        laststart = b;
                                        while (b.offset_from((*bufp).buffer) as libc::c_long
                                            + 2 as libc::c_int as libc::c_long) as libc::c_ulong
                                            > (*bufp).allocated
                                        {
                                            let mut old_buffer_23: *mut libc::c_uchar = (*bufp).buffer;
                                            if (*bufp).allocated
                                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                return reg_errcode_t::REG_ESIZE;
                                            }
                                            (*bufp).allocated <<= 1 as libc::c_int;
                                            if (*bufp).allocated
                                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                (*bufp).allocated = ((1 as libc::c_long)
                                                    << 16 as libc::c_int) as libc::c_ulong;
                                            }
                                            (*bufp).buffer = realloc(
                                                (*bufp).buffer as *mut libc::c_void,
                                                (*bufp).allocated,
                                            ) as *mut libc::c_uchar;
                                            if ((*bufp).buffer).is_null() {
                                                return reg_errcode_t::REG_ESPACE;
                                            }
                                            if old_buffer_23 != (*bufp).buffer {
                                                b = ((*bufp).buffer)
                                                    .offset(
                                                        b.offset_from(old_buffer_23) as libc::c_long as isize,
                                                    );
                                                begalt = ((*bufp).buffer)
                                                    .offset(
                                                        begalt.offset_from(old_buffer_23) as libc::c_long as isize,
                                                    );
                                                if !fixup_alt_jump.is_null() {
                                                    fixup_alt_jump = ((*bufp).buffer)
                                                        .offset(
                                                            fixup_alt_jump.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !laststart.is_null() {
                                                    laststart = ((*bufp).buffer)
                                                        .offset(
                                                            laststart.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !pending_exact.is_null() {
                                                    pending_exact = ((*bufp).buffer)
                                                        .offset(
                                                            pending_exact.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                            }
                                        }
                                        let fresh48 = b;
                                        b = b.offset(1);
                                        *fresh48 = re_opcode_t::duplicate as libc::c_int
                                            as libc::c_uchar;
                                        let fresh49 = b;
                                        b = b.offset(1);
                                        *fresh49 = c1;
                                        continue;
                                    }
                                }
                            }
                            _ => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_17: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_17 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_17) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_17) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh42 = b;
                                    b = b.offset(1);
                                    *fresh42 = re_opcode_t::wordbeg as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                        }
                    }
                    49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 => {
                        current_block = 2357893510580286616;
                        match current_block {
                            8126495812788240094 => {
                                if syntax
                                    & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                    != 0
                                {
                                    current_block = 390529185191362524;
                                } else {
                                    current_block = 3962563478812244436;
                                }
                            }
                            18389040574536762539 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_16: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_16 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_16) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_16) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh41 = b;
                                    b = b.offset(1);
                                    *fresh41 = re_opcode_t::notwordchar as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            4092966239614665407 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_15: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_15 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_15) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_15) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh40 = b;
                                    b = b.offset(1);
                                    *fresh40 = re_opcode_t::wordchar as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            14831581286765265411 => {
                                if syntax
                                    & (((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int == 0
                                    || syntax
                                        & (((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                        && syntax
                                            & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || p.offset(-(2 as libc::c_int as isize)) == pattern
                                        && p == pend
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 9217721635109559143;
                                }
                            }
                            6723035467051578708 => {
                                if syntax
                                    & ((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || syntax
                                        & (((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 18405110941157351894;
                                }
                            }
                            13862862630540390946 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else if compile_stack.avail
                                    == 0 as libc::c_int as libc::c_uint
                                {
                                    if syntax
                                        & (((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                    {
                                        current_block = 3962563478812244436;
                                    } else {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return reg_errcode_t::from_libc_c_uint(
                                            reg_errcode_t::REG_ERPAREN as libc::c_int as u32,
                                        );
                                    }
                                } else {
                                    current_block = 4872567246065702152;
                                }
                            }
                            9497405096675874836 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 12924337694122082779;
                                }
                            }
                            13842607660749849617 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_18: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_18 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_18) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_18) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh43 = b;
                                    b = b.offset(1);
                                    *fresh43 = re_opcode_t::wordend as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            14518978060224207180 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_19: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_19 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_19) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_19) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh44 = b;
                                    b = b.offset(1);
                                    *fresh44 = re_opcode_t::wordbound as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            15263135129429906152 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_20: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_20 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_20) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_20) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh45 = b;
                                    b = b.offset(1);
                                    *fresh45 = re_opcode_t::notwordbound as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            2064595280536116385 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_21: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_21 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_21) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_21) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh46 = b;
                                    b = b.offset(1);
                                    *fresh46 = re_opcode_t::begbuf as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            9244997493990970786 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_22: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_22 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_22) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_22) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh47 = b;
                                    b = b.offset(1);
                                    *fresh47 = re_opcode_t::endbuf as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            2357893510580286616 => {
                                if syntax
                                    & ((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    c1 = (c as libc::c_int - '0' as i32) as libc::c_uchar;
                                    if c1 as libc::c_uint > regnum {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return reg_errcode_t::from_libc_c_uint(
                                            reg_errcode_t::REG_ESUBREG as libc::c_int as u32,
                                        );
                                    }
                                    if group_in_compile_stack(compile_stack, c1 as regnum_t)
                                        != 0
                                    {
                                        current_block = 9887592654468655139;
                                    } else {
                                        laststart = b;
                                        while (b.offset_from((*bufp).buffer) as libc::c_long
                                            + 2 as libc::c_int as libc::c_long) as libc::c_ulong
                                            > (*bufp).allocated
                                        {
                                            let mut old_buffer_23: *mut libc::c_uchar = (*bufp).buffer;
                                            if (*bufp).allocated
                                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                return reg_errcode_t::REG_ESIZE;
                                            }
                                            (*bufp).allocated <<= 1 as libc::c_int;
                                            if (*bufp).allocated
                                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                (*bufp).allocated = ((1 as libc::c_long)
                                                    << 16 as libc::c_int) as libc::c_ulong;
                                            }
                                            (*bufp).buffer = realloc(
                                                (*bufp).buffer as *mut libc::c_void,
                                                (*bufp).allocated,
                                            ) as *mut libc::c_uchar;
                                            if ((*bufp).buffer).is_null() {
                                                return reg_errcode_t::REG_ESPACE;
                                            }
                                            if old_buffer_23 != (*bufp).buffer {
                                                b = ((*bufp).buffer)
                                                    .offset(
                                                        b.offset_from(old_buffer_23) as libc::c_long as isize,
                                                    );
                                                begalt = ((*bufp).buffer)
                                                    .offset(
                                                        begalt.offset_from(old_buffer_23) as libc::c_long as isize,
                                                    );
                                                if !fixup_alt_jump.is_null() {
                                                    fixup_alt_jump = ((*bufp).buffer)
                                                        .offset(
                                                            fixup_alt_jump.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !laststart.is_null() {
                                                    laststart = ((*bufp).buffer)
                                                        .offset(
                                                            laststart.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !pending_exact.is_null() {
                                                    pending_exact = ((*bufp).buffer)
                                                        .offset(
                                                            pending_exact.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                            }
                                        }
                                        let fresh48 = b;
                                        b = b.offset(1);
                                        *fresh48 = re_opcode_t::duplicate as libc::c_int
                                            as libc::c_uchar;
                                        let fresh49 = b;
                                        b = b.offset(1);
                                        *fresh49 = c1;
                                        continue;
                                    }
                                }
                            }
                            _ => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_17: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_17 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_17) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_17) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh42 = b;
                                    b = b.offset(1);
                                    *fresh42 = re_opcode_t::wordbeg as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                        }
                    }
                    43 | 63 => {
                        current_block = 8126495812788240094;
                        match current_block {
                            8126495812788240094 => {
                                if syntax
                                    & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                    != 0
                                {
                                    current_block = 390529185191362524;
                                } else {
                                    current_block = 3962563478812244436;
                                }
                            }
                            18389040574536762539 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_16: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_16 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_16) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_16) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_16) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh41 = b;
                                    b = b.offset(1);
                                    *fresh41 = re_opcode_t::notwordchar as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            4092966239614665407 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    laststart = b;
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_15: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_15 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_15) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_15) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_15) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh40 = b;
                                    b = b.offset(1);
                                    *fresh40 = re_opcode_t::wordchar as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            14831581286765265411 => {
                                if syntax
                                    & (((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int == 0
                                    || syntax
                                        & (((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                        && syntax
                                            & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int)
                                                << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || p.offset(-(2 as libc::c_int as isize)) == pattern
                                        && p == pend
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 9217721635109559143;
                                }
                            }
                            6723035467051578708 => {
                                if syntax
                                    & ((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                    || syntax
                                        & (((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 18405110941157351894;
                                }
                            }
                            13862862630540390946 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else if compile_stack.avail
                                    == 0 as libc::c_int as libc::c_uint
                                {
                                    if syntax
                                        & (((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int) << 1 as libc::c_int)
                                            << 1 as libc::c_int != 0
                                    {
                                        current_block = 3962563478812244436;
                                    } else {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return reg_errcode_t::from_libc_c_uint(
                                            reg_errcode_t::REG_ERPAREN as libc::c_int as u32,
                                        );
                                    }
                                } else {
                                    current_block = 4872567246065702152;
                                }
                            }
                            9497405096675874836 => {
                                if syntax
                                    & (((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 3962563478812244436;
                                } else {
                                    current_block = 12924337694122082779;
                                }
                            }
                            13842607660749849617 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_18: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_18 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_18) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_18) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_18) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh43 = b;
                                    b = b.offset(1);
                                    *fresh43 = re_opcode_t::wordend as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            14518978060224207180 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_19: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_19 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_19) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_19) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_19) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh44 = b;
                                    b = b.offset(1);
                                    *fresh44 = re_opcode_t::wordbound as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            15263135129429906152 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_20: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_20 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_20) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_20) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_20) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh45 = b;
                                    b = b.offset(1);
                                    *fresh45 = re_opcode_t::notwordbound as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            2064595280536116385 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_21: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_21 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_21) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_21) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_21) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh46 = b;
                                    b = b.offset(1);
                                    *fresh46 = re_opcode_t::begbuf as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            9244997493990970786 => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_22: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_22 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_22) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_22) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_22) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh47 = b;
                                    b = b.offset(1);
                                    *fresh47 = re_opcode_t::endbuf as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                            2357893510580286616 => {
                                if syntax
                                    & ((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    c1 = (c as libc::c_int - '0' as i32) as libc::c_uchar;
                                    if c1 as libc::c_uint > regnum {
                                        free(compile_stack.stack as *mut libc::c_void);
                                        return reg_errcode_t::from_libc_c_uint(
                                            reg_errcode_t::REG_ESUBREG as libc::c_int as u32,
                                        );
                                    }
                                    if group_in_compile_stack(compile_stack, c1 as regnum_t)
                                        != 0
                                    {
                                        current_block = 9887592654468655139;
                                    } else {
                                        laststart = b;
                                        while (b.offset_from((*bufp).buffer) as libc::c_long
                                            + 2 as libc::c_int as libc::c_long) as libc::c_ulong
                                            > (*bufp).allocated
                                        {
                                            let mut old_buffer_23: *mut libc::c_uchar = (*bufp).buffer;
                                            if (*bufp).allocated
                                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                return reg_errcode_t::REG_ESIZE;
                                            }
                                            (*bufp).allocated <<= 1 as libc::c_int;
                                            if (*bufp).allocated
                                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                (*bufp).allocated = ((1 as libc::c_long)
                                                    << 16 as libc::c_int) as libc::c_ulong;
                                            }
                                            (*bufp).buffer = realloc(
                                                (*bufp).buffer as *mut libc::c_void,
                                                (*bufp).allocated,
                                            ) as *mut libc::c_uchar;
                                            if ((*bufp).buffer).is_null() {
                                                return reg_errcode_t::REG_ESPACE;
                                            }
                                            if old_buffer_23 != (*bufp).buffer {
                                                b = ((*bufp).buffer)
                                                    .offset(
                                                        b.offset_from(old_buffer_23) as libc::c_long as isize,
                                                    );
                                                begalt = ((*bufp).buffer)
                                                    .offset(
                                                        begalt.offset_from(old_buffer_23) as libc::c_long as isize,
                                                    );
                                                if !fixup_alt_jump.is_null() {
                                                    fixup_alt_jump = ((*bufp).buffer)
                                                        .offset(
                                                            fixup_alt_jump.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !laststart.is_null() {
                                                    laststart = ((*bufp).buffer)
                                                        .offset(
                                                            laststart.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !pending_exact.is_null() {
                                                    pending_exact = ((*bufp).buffer)
                                                        .offset(
                                                            pending_exact.offset_from(old_buffer_23) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                            }
                                        }
                                        let fresh48 = b;
                                        b = b.offset(1);
                                        *fresh48 = re_opcode_t::duplicate as libc::c_int
                                            as libc::c_uchar;
                                        let fresh49 = b;
                                        b = b.offset(1);
                                        *fresh49 = c1;
                                        continue;
                                    }
                                }
                            }
                            _ => {
                                if re_syntax_options
                                    & (((((((((((((((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    current_block = 9887592654468655139;
                                } else {
                                    while (b.offset_from((*bufp).buffer) as libc::c_long
                                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                                        > (*bufp).allocated
                                    {
                                        let mut old_buffer_17: *mut libc::c_uchar = (*bufp).buffer;
                                        if (*bufp).allocated
                                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            return reg_errcode_t::REG_ESIZE;
                                        }
                                        (*bufp).allocated <<= 1 as libc::c_int;
                                        if (*bufp).allocated
                                            > ((1 as libc::c_long) << 16 as libc::c_int)
                                                as libc::c_ulong
                                        {
                                            (*bufp).allocated = ((1 as libc::c_long)
                                                << 16 as libc::c_int) as libc::c_ulong;
                                        }
                                        (*bufp).buffer = realloc(
                                            (*bufp).buffer as *mut libc::c_void,
                                            (*bufp).allocated,
                                        ) as *mut libc::c_uchar;
                                        if ((*bufp).buffer).is_null() {
                                            return reg_errcode_t::REG_ESPACE;
                                        }
                                        if old_buffer_17 != (*bufp).buffer {
                                            b = ((*bufp).buffer)
                                                .offset(
                                                    b.offset_from(old_buffer_17) as libc::c_long as isize,
                                                );
                                            begalt = ((*bufp).buffer)
                                                .offset(
                                                    begalt.offset_from(old_buffer_17) as libc::c_long as isize,
                                                );
                                            if !fixup_alt_jump.is_null() {
                                                fixup_alt_jump = ((*bufp).buffer)
                                                    .offset(
                                                        fixup_alt_jump.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !laststart.is_null() {
                                                laststart = ((*bufp).buffer)
                                                    .offset(
                                                        laststart.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                            if !pending_exact.is_null() {
                                                pending_exact = ((*bufp).buffer)
                                                    .offset(
                                                        pending_exact.offset_from(old_buffer_17) as libc::c_long
                                                            as isize,
                                                    );
                                            }
                                        }
                                    }
                                    let fresh42 = b;
                                    b = b.offset(1);
                                    *fresh42 = re_opcode_t::wordbeg as libc::c_int
                                        as libc::c_uchar;
                                    continue;
                                }
                            }
                        }
                    }
                    _ => {
                        current_block = 3962563478812244436;
                    }
                }
            }
            _ => {
                current_block = 9887592654468655139;
            }
        }
        match current_block {
            9217721635109559143 => {
                let mut lower_bound: libc::c_int = -(1 as libc::c_int);
                let mut upper_bound: libc::c_int = -(1 as libc::c_int);
                beg_interval = p.offset(-(1 as libc::c_int as isize));
                if p == pend {
                    if !(syntax
                        & ((((((((((((1 as libc::c_int as libc::c_ulong)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int != 0)
                    {
                        free(compile_stack.stack as *mut libc::c_void);
                        return reg_errcode_t::from_libc_c_uint(
                            reg_errcode_t::REG_EBRACE as libc::c_int as u32,
                        );
                    }
                } else {
                    if p != pend {
                        if p == pend {
                            return reg_errcode_t::REG_EEND;
                        }
                        let fresh34 = p;
                        p = p.offset(1);
                        c = *fresh34 as libc::c_uchar;
                        if !translate.is_null() {
                            c = *translate.offset(c as isize) as libc::c_uchar;
                        }
                        while 1 as libc::c_int != 0
                            && *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
                                as libc::c_int
                                & C2RustUnnamed_0::_ISdigit as libc::c_int as libc::c_ushort
                                    as libc::c_int != 0
                        {
                            if lower_bound < 0 as libc::c_int {
                                lower_bound = 0 as libc::c_int;
                            }
                            lower_bound = lower_bound * 10 as libc::c_int
                                + c as libc::c_int - '0' as i32;
                            if p == pend {
                                break;
                            }
                            if p == pend {
                                return reg_errcode_t::REG_EEND;
                            }
                            let fresh35 = p;
                            p = p.offset(1);
                            c = *fresh35 as libc::c_uchar;
                            if !translate.is_null() {
                                c = *translate.offset(c as isize) as libc::c_uchar;
                            }
                        }
                    }
                    if c as libc::c_int == ',' as i32 {
                        if p != pend {
                            if p == pend {
                                return reg_errcode_t::REG_EEND;
                            }
                            let fresh36 = p;
                            p = p.offset(1);
                            c = *fresh36 as libc::c_uchar;
                            if !translate.is_null() {
                                c = *translate.offset(c as isize) as libc::c_uchar;
                            }
                            while 1 as libc::c_int != 0
                                && *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
                                    as libc::c_int
                                    & C2RustUnnamed_0::_ISdigit as libc::c_int as libc::c_ushort
                                        as libc::c_int != 0
                            {
                                if upper_bound < 0 as libc::c_int {
                                    upper_bound = 0 as libc::c_int;
                                }
                                upper_bound = upper_bound * 10 as libc::c_int
                                    + c as libc::c_int - '0' as i32;
                                if p == pend {
                                    break;
                                }
                                if p == pend {
                                    return reg_errcode_t::REG_EEND;
                                }
                                let fresh37 = p;
                                p = p.offset(1);
                                c = *fresh37 as libc::c_uchar;
                                if !translate.is_null() {
                                    c = *translate.offset(c as isize) as libc::c_uchar;
                                }
                            }
                        }
                        if upper_bound < 0 as libc::c_int {
                            upper_bound = 0x7fff as libc::c_int;
                        }
                    } else {
                        upper_bound = lower_bound;
                    }
                    if lower_bound < 0 as libc::c_int
                        || upper_bound > 0x7fff as libc::c_int
                        || lower_bound > upper_bound
                    {
                        if !(syntax
                            & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                << 1 as libc::c_int) << 1 as libc::c_int)
                                << 1 as libc::c_int) << 1 as libc::c_int)
                                << 1 as libc::c_int) << 1 as libc::c_int)
                                << 1 as libc::c_int) << 1 as libc::c_int)
                                << 1 as libc::c_int) << 1 as libc::c_int)
                                << 1 as libc::c_int) << 1 as libc::c_int != 0)
                        {
                            free(compile_stack.stack as *mut libc::c_void);
                            return reg_errcode_t::from_libc_c_uint(
                                reg_errcode_t::REG_BADBR as libc::c_int as u32,
                            );
                        }
                    } else {
                        if syntax
                            & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                << 1 as libc::c_int) << 1 as libc::c_int)
                                << 1 as libc::c_int) << 1 as libc::c_int)
                                << 1 as libc::c_int) << 1 as libc::c_int)
                                << 1 as libc::c_int) << 1 as libc::c_int)
                                << 1 as libc::c_int) << 1 as libc::c_int)
                                << 1 as libc::c_int) << 1 as libc::c_int == 0
                        {
                            if c as libc::c_int != '\\' as i32 {
                                free(compile_stack.stack as *mut libc::c_void);
                                return reg_errcode_t::from_libc_c_uint(
                                    reg_errcode_t::REG_EBRACE as libc::c_int as u32,
                                );
                            }
                            if p == pend {
                                return reg_errcode_t::REG_EEND;
                            }
                            let fresh38 = p;
                            p = p.offset(1);
                            c = *fresh38 as libc::c_uchar;
                            if !translate.is_null() {
                                c = *translate.offset(c as isize) as libc::c_uchar;
                            }
                        }
                        if c as libc::c_int != '}' as i32 {
                            if !(syntax
                                & ((((((((((((1 as libc::c_int as libc::c_ulong)
                                    << 1 as libc::c_int) << 1 as libc::c_int)
                                    << 1 as libc::c_int) << 1 as libc::c_int)
                                    << 1 as libc::c_int) << 1 as libc::c_int)
                                    << 1 as libc::c_int) << 1 as libc::c_int)
                                    << 1 as libc::c_int) << 1 as libc::c_int)
                                    << 1 as libc::c_int) << 1 as libc::c_int != 0)
                            {
                                free(compile_stack.stack as *mut libc::c_void);
                                return reg_errcode_t::from_libc_c_uint(
                                    reg_errcode_t::REG_BADBR as libc::c_int as u32,
                                );
                            }
                        } else {
                            if laststart.is_null() {
                                if syntax
                                    & (((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                {
                                    free(compile_stack.stack as *mut libc::c_void);
                                    return reg_errcode_t::from_libc_c_uint(
                                        reg_errcode_t::REG_BADRPT as libc::c_int as u32,
                                    );
                                } else if syntax
                                    & ((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                                {
                                    laststart = b;
                                    current_block = 14087405007684687806;
                                } else {
                                    current_block = 11349287780091485581;
                                }
                            } else {
                                current_block = 14087405007684687806;
                            }
                            match current_block {
                                11349287780091485581 => {}
                                _ => {
                                    if upper_bound == 0 as libc::c_int {
                                        while (b.offset_from((*bufp).buffer) as libc::c_long
                                            + 3 as libc::c_int as libc::c_long) as libc::c_ulong
                                            > (*bufp).allocated
                                        {
                                            let mut old_buffer_13: *mut libc::c_uchar = (*bufp).buffer;
                                            if (*bufp).allocated
                                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                return reg_errcode_t::REG_ESIZE;
                                            }
                                            (*bufp).allocated <<= 1 as libc::c_int;
                                            if (*bufp).allocated
                                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                (*bufp).allocated = ((1 as libc::c_long)
                                                    << 16 as libc::c_int) as libc::c_ulong;
                                            }
                                            (*bufp).buffer = realloc(
                                                (*bufp).buffer as *mut libc::c_void,
                                                (*bufp).allocated,
                                            ) as *mut libc::c_uchar;
                                            if ((*bufp).buffer).is_null() {
                                                return reg_errcode_t::REG_ESPACE;
                                            }
                                            if old_buffer_13 != (*bufp).buffer {
                                                b = ((*bufp).buffer)
                                                    .offset(
                                                        b.offset_from(old_buffer_13) as libc::c_long as isize,
                                                    );
                                                begalt = ((*bufp).buffer)
                                                    .offset(
                                                        begalt.offset_from(old_buffer_13) as libc::c_long as isize,
                                                    );
                                                if !fixup_alt_jump.is_null() {
                                                    fixup_alt_jump = ((*bufp).buffer)
                                                        .offset(
                                                            fixup_alt_jump.offset_from(old_buffer_13) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !laststart.is_null() {
                                                    laststart = ((*bufp).buffer)
                                                        .offset(
                                                            laststart.offset_from(old_buffer_13) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !pending_exact.is_null() {
                                                    pending_exact = ((*bufp).buffer)
                                                        .offset(
                                                            pending_exact.offset_from(old_buffer_13) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                            }
                                        }
                                        insert_op1(
                                            re_opcode_t::jump,
                                            laststart,
                                            (b.offset(3 as libc::c_int as isize).offset_from(laststart)
                                                as libc::c_long - 3 as libc::c_int as libc::c_long)
                                                as libc::c_int,
                                            b,
                                        );
                                        b = b.offset(3 as libc::c_int as isize);
                                    } else {
                                        let mut nbytes: libc::c_uint = (10 as libc::c_int
                                            + (upper_bound > 1 as libc::c_int) as libc::c_int
                                                * 10 as libc::c_int) as libc::c_uint;
                                        while (b.offset_from((*bufp).buffer) as libc::c_long
                                            + nbytes as libc::c_long) as libc::c_ulong
                                            > (*bufp).allocated
                                        {
                                            let mut old_buffer_14: *mut libc::c_uchar = (*bufp).buffer;
                                            if (*bufp).allocated
                                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                return reg_errcode_t::REG_ESIZE;
                                            }
                                            (*bufp).allocated <<= 1 as libc::c_int;
                                            if (*bufp).allocated
                                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                                    as libc::c_ulong
                                            {
                                                (*bufp).allocated = ((1 as libc::c_long)
                                                    << 16 as libc::c_int) as libc::c_ulong;
                                            }
                                            (*bufp).buffer = realloc(
                                                (*bufp).buffer as *mut libc::c_void,
                                                (*bufp).allocated,
                                            ) as *mut libc::c_uchar;
                                            if ((*bufp).buffer).is_null() {
                                                return reg_errcode_t::REG_ESPACE;
                                            }
                                            if old_buffer_14 != (*bufp).buffer {
                                                b = ((*bufp).buffer)
                                                    .offset(
                                                        b.offset_from(old_buffer_14) as libc::c_long as isize,
                                                    );
                                                begalt = ((*bufp).buffer)
                                                    .offset(
                                                        begalt.offset_from(old_buffer_14) as libc::c_long as isize,
                                                    );
                                                if !fixup_alt_jump.is_null() {
                                                    fixup_alt_jump = ((*bufp).buffer)
                                                        .offset(
                                                            fixup_alt_jump.offset_from(old_buffer_14) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !laststart.is_null() {
                                                    laststart = ((*bufp).buffer)
                                                        .offset(
                                                            laststart.offset_from(old_buffer_14) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                                if !pending_exact.is_null() {
                                                    pending_exact = ((*bufp).buffer)
                                                        .offset(
                                                            pending_exact.offset_from(old_buffer_14) as libc::c_long
                                                                as isize,
                                                        );
                                                }
                                            }
                                        }
                                        insert_op2(
                                            re_opcode_t::succeed_n,
                                            laststart,
                                            (b
                                                .offset(5 as libc::c_int as isize)
                                                .offset(
                                                    ((upper_bound > 1 as libc::c_int) as libc::c_int
                                                        * 5 as libc::c_int) as isize,
                                                )
                                                .offset_from(laststart) as libc::c_long
                                                - 3 as libc::c_int as libc::c_long) as libc::c_int,
                                            lower_bound,
                                            b,
                                        );
                                        b = b.offset(5 as libc::c_int as isize);
                                        insert_op2(
                                            re_opcode_t::set_number_at,
                                            laststart,
                                            5 as libc::c_int,
                                            lower_bound,
                                            b,
                                        );
                                        b = b.offset(5 as libc::c_int as isize);
                                        if upper_bound > 1 as libc::c_int {
                                            store_op2(
                                                re_opcode_t::jump_n,
                                                b,
                                                (laststart.offset(5 as libc::c_int as isize).offset_from(b)
                                                    as libc::c_long - 3 as libc::c_int as libc::c_long)
                                                    as libc::c_int,
                                                upper_bound - 1 as libc::c_int,
                                            );
                                            b = b.offset(5 as libc::c_int as isize);
                                            insert_op2(
                                                re_opcode_t::set_number_at,
                                                laststart,
                                                b.offset_from(laststart) as libc::c_long as libc::c_int,
                                                upper_bound - 1 as libc::c_int,
                                                b,
                                            );
                                            b = b.offset(5 as libc::c_int as isize);
                                        }
                                    }
                                    pending_exact = 0 as *mut libc::c_uchar;
                                    beg_interval = 0 as *const libc::c_char;
                                    continue;
                                }
                            }
                        }
                    }
                }
                p = beg_interval;
                beg_interval = 0 as *const libc::c_char;
                if p == pend {
                    return reg_errcode_t::REG_EEND;
                }
                let fresh39 = p;
                p = p.offset(1);
                c = *fresh39 as libc::c_uchar;
                if !translate.is_null() {
                    c = *translate.offset(c as isize) as libc::c_uchar;
                }
                if syntax
                    & ((((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int == 0
                {
                    if p > pattern
                        && *p.offset(-(1 as libc::c_int) as isize) as libc::c_int
                            == '\\' as i32
                    {
                        current_block = 3962563478812244436;
                    } else {
                        current_block = 9887592654468655139;
                    }
                } else {
                    current_block = 9887592654468655139;
                }
            }
            18405110941157351894 => {
                if syntax
                    & ((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int
                    != 0
                {
                    current_block = 9887592654468655139;
                } else {
                    while (b.offset_from((*bufp).buffer) as libc::c_long
                        + 3 as libc::c_int as libc::c_long) as libc::c_ulong
                        > (*bufp).allocated
                    {
                        let mut old_buffer_11: *mut libc::c_uchar = (*bufp).buffer;
                        if (*bufp).allocated
                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                as libc::c_ulong
                        {
                            return reg_errcode_t::REG_ESIZE;
                        }
                        (*bufp).allocated <<= 1 as libc::c_int;
                        if (*bufp).allocated
                            > ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                        {
                            (*bufp).allocated = ((1 as libc::c_long)
                                << 16 as libc::c_int) as libc::c_ulong;
                        }
                        (*bufp).buffer = realloc(
                            (*bufp).buffer as *mut libc::c_void,
                            (*bufp).allocated,
                        ) as *mut libc::c_uchar;
                        if ((*bufp).buffer).is_null() {
                            return reg_errcode_t::REG_ESPACE;
                        }
                        if old_buffer_11 != (*bufp).buffer {
                            b = ((*bufp).buffer)
                                .offset(
                                    b.offset_from(old_buffer_11) as libc::c_long as isize,
                                );
                            begalt = ((*bufp).buffer)
                                .offset(
                                    begalt.offset_from(old_buffer_11) as libc::c_long as isize,
                                );
                            if !fixup_alt_jump.is_null() {
                                fixup_alt_jump = ((*bufp).buffer)
                                    .offset(
                                        fixup_alt_jump.offset_from(old_buffer_11) as libc::c_long
                                            as isize,
                                    );
                            }
                            if !laststart.is_null() {
                                laststart = ((*bufp).buffer)
                                    .offset(
                                        laststart.offset_from(old_buffer_11) as libc::c_long
                                            as isize,
                                    );
                            }
                            if !pending_exact.is_null() {
                                pending_exact = ((*bufp).buffer)
                                    .offset(
                                        pending_exact.offset_from(old_buffer_11) as libc::c_long
                                            as isize,
                                    );
                            }
                        }
                    }
                    insert_op1(
                        re_opcode_t::on_failure_jump,
                        begalt,
                        (b.offset(6 as libc::c_int as isize).offset_from(begalt)
                            as libc::c_long - 3 as libc::c_int as libc::c_long)
                            as libc::c_int,
                        b,
                    );
                    pending_exact = 0 as *mut libc::c_uchar;
                    b = b.offset(3 as libc::c_int as isize);
                    if !fixup_alt_jump.is_null() {
                        store_op1(
                            re_opcode_t::jump_past_alt,
                            fixup_alt_jump,
                            (b.offset_from(fixup_alt_jump) as libc::c_long
                                - 3 as libc::c_int as libc::c_long) as libc::c_int,
                        );
                    }
                    fixup_alt_jump = b;
                    while (b.offset_from((*bufp).buffer) as libc::c_long
                        + 3 as libc::c_int as libc::c_long) as libc::c_ulong
                        > (*bufp).allocated
                    {
                        let mut old_buffer_12: *mut libc::c_uchar = (*bufp).buffer;
                        if (*bufp).allocated
                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                as libc::c_ulong
                        {
                            return reg_errcode_t::REG_ESIZE;
                        }
                        (*bufp).allocated <<= 1 as libc::c_int;
                        if (*bufp).allocated
                            > ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                        {
                            (*bufp).allocated = ((1 as libc::c_long)
                                << 16 as libc::c_int) as libc::c_ulong;
                        }
                        (*bufp).buffer = realloc(
                            (*bufp).buffer as *mut libc::c_void,
                            (*bufp).allocated,
                        ) as *mut libc::c_uchar;
                        if ((*bufp).buffer).is_null() {
                            return reg_errcode_t::REG_ESPACE;
                        }
                        if old_buffer_12 != (*bufp).buffer {
                            b = ((*bufp).buffer)
                                .offset(
                                    b.offset_from(old_buffer_12) as libc::c_long as isize,
                                );
                            begalt = ((*bufp).buffer)
                                .offset(
                                    begalt.offset_from(old_buffer_12) as libc::c_long as isize,
                                );
                            if !fixup_alt_jump.is_null() {
                                fixup_alt_jump = ((*bufp).buffer)
                                    .offset(
                                        fixup_alt_jump.offset_from(old_buffer_12) as libc::c_long
                                            as isize,
                                    );
                            }
                            if !laststart.is_null() {
                                laststart = ((*bufp).buffer)
                                    .offset(
                                        laststart.offset_from(old_buffer_12) as libc::c_long
                                            as isize,
                                    );
                            }
                            if !pending_exact.is_null() {
                                pending_exact = ((*bufp).buffer)
                                    .offset(
                                        pending_exact.offset_from(old_buffer_12) as libc::c_long
                                            as isize,
                                    );
                            }
                        }
                    }
                    b = b.offset(3 as libc::c_int as isize);
                    laststart = 0 as *mut libc::c_uchar;
                    begalt = b;
                    continue;
                }
            }
            4872567246065702152 => {
                if !fixup_alt_jump.is_null() {
                    while (b.offset_from((*bufp).buffer) as libc::c_long
                        + 1 as libc::c_int as libc::c_long) as libc::c_ulong
                        > (*bufp).allocated
                    {
                        let mut old_buffer_9: *mut libc::c_uchar = (*bufp).buffer;
                        if (*bufp).allocated
                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                as libc::c_ulong
                        {
                            return reg_errcode_t::REG_ESIZE;
                        }
                        (*bufp).allocated <<= 1 as libc::c_int;
                        if (*bufp).allocated
                            > ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                        {
                            (*bufp).allocated = ((1 as libc::c_long)
                                << 16 as libc::c_int) as libc::c_ulong;
                        }
                        (*bufp).buffer = realloc(
                            (*bufp).buffer as *mut libc::c_void,
                            (*bufp).allocated,
                        ) as *mut libc::c_uchar;
                        if ((*bufp).buffer).is_null() {
                            return reg_errcode_t::REG_ESPACE;
                        }
                        if old_buffer_9 != (*bufp).buffer {
                            b = ((*bufp).buffer)
                                .offset(
                                    b.offset_from(old_buffer_9) as libc::c_long as isize,
                                );
                            begalt = ((*bufp).buffer)
                                .offset(
                                    begalt.offset_from(old_buffer_9) as libc::c_long as isize,
                                );
                            if !fixup_alt_jump.is_null() {
                                fixup_alt_jump = ((*bufp).buffer)
                                    .offset(
                                        fixup_alt_jump.offset_from(old_buffer_9) as libc::c_long
                                            as isize,
                                    );
                            }
                            if !laststart.is_null() {
                                laststart = ((*bufp).buffer)
                                    .offset(
                                        laststart.offset_from(old_buffer_9) as libc::c_long as isize,
                                    );
                            }
                            if !pending_exact.is_null() {
                                pending_exact = ((*bufp).buffer)
                                    .offset(
                                        pending_exact.offset_from(old_buffer_9) as libc::c_long
                                            as isize,
                                    );
                            }
                        }
                    }
                    let fresh30 = b;
                    b = b.offset(1);
                    *fresh30 = re_opcode_t::push_dummy_failure as libc::c_int
                        as libc::c_uchar;
                    store_op1(
                        re_opcode_t::jump_past_alt,
                        fixup_alt_jump,
                        (b
                            .offset(-(1 as libc::c_int as isize))
                            .offset_from(fixup_alt_jump) as libc::c_long
                            - 3 as libc::c_int as libc::c_long) as libc::c_int,
                    );
                }
                if compile_stack.avail == 0 as libc::c_int as libc::c_uint {
                    if !(syntax
                        & (((((((((((((((((1 as libc::c_int as libc::c_ulong)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int
                        != 0)
                    {
                        free(compile_stack.stack as *mut libc::c_void);
                        return reg_errcode_t::from_libc_c_uint(
                            reg_errcode_t::REG_ERPAREN as libc::c_int as u32,
                        );
                    }
                } else {
                    let mut this_group_regnum: regnum_t = 0;
                    compile_stack.avail = (compile_stack.avail).wrapping_sub(1);
                    compile_stack.avail;
                    begalt = ((*bufp).buffer)
                        .offset(
                            (*(compile_stack.stack).offset(compile_stack.avail as isize))
                                .begalt_offset as isize,
                        );
                    fixup_alt_jump = if (*(compile_stack.stack)
                        .offset(compile_stack.avail as isize))
                        .fixup_alt_jump != 0
                    {
                        ((*bufp).buffer)
                            .offset(
                                (*(compile_stack.stack)
                                    .offset(compile_stack.avail as isize))
                                    .fixup_alt_jump as isize,
                            )
                            .offset(-(1 as libc::c_int as isize))
                    } else {
                        0 as *mut libc::c_uchar
                    };
                    laststart = ((*bufp).buffer)
                        .offset(
                            (*(compile_stack.stack).offset(compile_stack.avail as isize))
                                .laststart_offset as isize,
                        );
                    this_group_regnum = (*(compile_stack.stack)
                        .offset(compile_stack.avail as isize))
                        .regnum;
                    pending_exact = 0 as *mut libc::c_uchar;
                    if this_group_regnum <= 255 as libc::c_int as libc::c_uint {
                        let mut inner_group_loc: *mut libc::c_uchar = ((*bufp).buffer)
                            .offset(
                                (*(compile_stack.stack)
                                    .offset(compile_stack.avail as isize))
                                    .inner_group_offset as isize,
                            );
                        *inner_group_loc = regnum.wrapping_sub(this_group_regnum)
                            as libc::c_uchar;
                        while (b.offset_from((*bufp).buffer) as libc::c_long
                            + 3 as libc::c_int as libc::c_long) as libc::c_ulong
                            > (*bufp).allocated
                        {
                            let mut old_buffer_10: *mut libc::c_uchar = (*bufp).buffer;
                            if (*bufp).allocated
                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                    as libc::c_ulong
                            {
                                return reg_errcode_t::REG_ESIZE;
                            }
                            (*bufp).allocated <<= 1 as libc::c_int;
                            if (*bufp).allocated
                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                    as libc::c_ulong
                            {
                                (*bufp).allocated = ((1 as libc::c_long)
                                    << 16 as libc::c_int) as libc::c_ulong;
                            }
                            (*bufp).buffer = realloc(
                                (*bufp).buffer as *mut libc::c_void,
                                (*bufp).allocated,
                            ) as *mut libc::c_uchar;
                            if ((*bufp).buffer).is_null() {
                                return reg_errcode_t::REG_ESPACE;
                            }
                            if old_buffer_10 != (*bufp).buffer {
                                b = ((*bufp).buffer)
                                    .offset(
                                        b.offset_from(old_buffer_10) as libc::c_long as isize,
                                    );
                                begalt = ((*bufp).buffer)
                                    .offset(
                                        begalt.offset_from(old_buffer_10) as libc::c_long as isize,
                                    );
                                if !fixup_alt_jump.is_null() {
                                    fixup_alt_jump = ((*bufp).buffer)
                                        .offset(
                                            fixup_alt_jump.offset_from(old_buffer_10) as libc::c_long
                                                as isize,
                                        );
                                }
                                if !laststart.is_null() {
                                    laststart = ((*bufp).buffer)
                                        .offset(
                                            laststart.offset_from(old_buffer_10) as libc::c_long
                                                as isize,
                                        );
                                }
                                if !pending_exact.is_null() {
                                    pending_exact = ((*bufp).buffer)
                                        .offset(
                                            pending_exact.offset_from(old_buffer_10) as libc::c_long
                                                as isize,
                                        );
                                }
                            }
                        }
                        let fresh31 = b;
                        b = b.offset(1);
                        *fresh31 = re_opcode_t::stop_memory as libc::c_int
                            as libc::c_uchar;
                        let fresh32 = b;
                        b = b.offset(1);
                        *fresh32 = this_group_regnum as libc::c_uchar;
                        let fresh33 = b;
                        b = b.offset(1);
                        *fresh33 = regnum.wrapping_sub(this_group_regnum)
                            as libc::c_uchar;
                    }
                    continue;
                }
                current_block = 9887592654468655139;
            }
            12924337694122082779 => {
                (*bufp).re_nsub = ((*bufp).re_nsub).wrapping_add(1);
                (*bufp).re_nsub;
                regnum = regnum.wrapping_add(1);
                regnum;
                if compile_stack.avail == compile_stack.size {
                    compile_stack.stack = realloc(
                        compile_stack.stack as *mut libc::c_void,
                        ((compile_stack.size << 1 as libc::c_int) as libc::c_ulong)
                            .wrapping_mul(
                                ::core::mem::size_of::<compile_stack_elt_t>()
                                    as libc::c_ulong,
                            ),
                    ) as *mut compile_stack_elt_t;
                    if (compile_stack.stack).is_null() {
                        return reg_errcode_t::REG_ESPACE;
                    }
                    compile_stack.size <<= 1 as libc::c_int;
                }
                (*(compile_stack.stack).offset(compile_stack.avail as isize))
                    .begalt_offset = begalt.offset_from((*bufp).buffer) as libc::c_long;
                (*(compile_stack.stack).offset(compile_stack.avail as isize))
                    .fixup_alt_jump = if !fixup_alt_jump.is_null() {
                    fixup_alt_jump.offset_from((*bufp).buffer) as libc::c_long
                        + 1 as libc::c_int as libc::c_long
                } else {
                    0 as libc::c_int as libc::c_long
                };
                (*(compile_stack.stack).offset(compile_stack.avail as isize))
                    .laststart_offset = b.offset_from((*bufp).buffer) as libc::c_long;
                (*(compile_stack.stack).offset(compile_stack.avail as isize)).regnum = regnum;
                if regnum <= 255 as libc::c_int as libc::c_uint {
                    (*(compile_stack.stack).offset(compile_stack.avail as isize))
                        .inner_group_offset = b.offset_from((*bufp).buffer)
                        as libc::c_long + 2 as libc::c_int as libc::c_long;
                    while (b.offset_from((*bufp).buffer) as libc::c_long
                        + 3 as libc::c_int as libc::c_long) as libc::c_ulong
                        > (*bufp).allocated
                    {
                        let mut old_buffer_8: *mut libc::c_uchar = (*bufp).buffer;
                        if (*bufp).allocated
                            == ((1 as libc::c_long) << 16 as libc::c_int)
                                as libc::c_ulong
                        {
                            return reg_errcode_t::REG_ESIZE;
                        }
                        (*bufp).allocated <<= 1 as libc::c_int;
                        if (*bufp).allocated
                            > ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                        {
                            (*bufp).allocated = ((1 as libc::c_long)
                                << 16 as libc::c_int) as libc::c_ulong;
                        }
                        (*bufp).buffer = realloc(
                            (*bufp).buffer as *mut libc::c_void,
                            (*bufp).allocated,
                        ) as *mut libc::c_uchar;
                        if ((*bufp).buffer).is_null() {
                            return reg_errcode_t::REG_ESPACE;
                        }
                        if old_buffer_8 != (*bufp).buffer {
                            b = ((*bufp).buffer)
                                .offset(
                                    b.offset_from(old_buffer_8) as libc::c_long as isize,
                                );
                            begalt = ((*bufp).buffer)
                                .offset(
                                    begalt.offset_from(old_buffer_8) as libc::c_long as isize,
                                );
                            if !fixup_alt_jump.is_null() {
                                fixup_alt_jump = ((*bufp).buffer)
                                    .offset(
                                        fixup_alt_jump.offset_from(old_buffer_8) as libc::c_long
                                            as isize,
                                    );
                            }
                            if !laststart.is_null() {
                                laststart = ((*bufp).buffer)
                                    .offset(
                                        laststart.offset_from(old_buffer_8) as libc::c_long as isize,
                                    );
                            }
                            if !pending_exact.is_null() {
                                pending_exact = ((*bufp).buffer)
                                    .offset(
                                        pending_exact.offset_from(old_buffer_8) as libc::c_long
                                            as isize,
                                    );
                            }
                        }
                    }
                    let fresh27 = b;
                    b = b.offset(1);
                    *fresh27 = re_opcode_t::start_memory as libc::c_int as libc::c_uchar;
                    let fresh28 = b;
                    b = b.offset(1);
                    *fresh28 = regnum as libc::c_uchar;
                    let fresh29 = b;
                    b = b.offset(1);
                    *fresh29 = 0 as libc::c_int as libc::c_uchar;
                }
                compile_stack.avail = (compile_stack.avail).wrapping_add(1);
                compile_stack.avail;
                fixup_alt_jump = 0 as *mut libc::c_uchar;
                laststart = 0 as *mut libc::c_uchar;
                begalt = b;
                pending_exact = 0 as *mut libc::c_uchar;
                continue;
            }
            390529185191362524 => {
                if laststart.is_null() {
                    if syntax
                        & (((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int != 0
                    {
                        free(compile_stack.stack as *mut libc::c_void);
                        return reg_errcode_t::from_libc_c_uint(
                            reg_errcode_t::REG_BADRPT as libc::c_int as u32,
                        );
                    } else if syntax
                        & ((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int
                        == 0
                    {
                        current_block = 9887592654468655139;
                    } else {
                        current_block = 479107131381816815;
                    }
                } else {
                    current_block = 479107131381816815;
                }
                match current_block {
                    9887592654468655139 => {}
                    _ => {
                        let mut keep_string_p: boolean = 0 as libc::c_int as boolean;
                        let mut zero_times_ok: libc::c_char = 0 as libc::c_int
                            as libc::c_char;
                        let mut many_times_ok: libc::c_char = 0 as libc::c_int
                            as libc::c_char;
                        loop {
                            zero_times_ok = (zero_times_ok as libc::c_int
                                | (c as libc::c_int != '+' as i32) as libc::c_int)
                                as libc::c_char;
                            many_times_ok = (many_times_ok as libc::c_int
                                | (c as libc::c_int != '?' as i32) as libc::c_int)
                                as libc::c_char;
                            if p == pend {
                                break;
                            }
                            if p == pend {
                                return reg_errcode_t::REG_EEND;
                            }
                            let fresh3 = p;
                            p = p.offset(1);
                            c = *fresh3 as libc::c_uchar;
                            if !translate.is_null() {
                                c = *translate.offset(c as isize) as libc::c_uchar;
                            }
                            if c as libc::c_int == '*' as i32
                                || syntax
                                    & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                    == 0
                                    && (c as libc::c_int == '+' as i32
                                        || c as libc::c_int == '?' as i32)
                            {
                                continue;
                            }
                            if syntax
                                & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
                                != 0 && c as libc::c_int == '\\' as i32
                            {
                                if p == pend {
                                    free(compile_stack.stack as *mut libc::c_void);
                                    return reg_errcode_t::from_libc_c_uint(
                                        reg_errcode_t::REG_EESCAPE as libc::c_int as u32,
                                    );
                                }
                                if p == pend {
                                    return reg_errcode_t::REG_EEND;
                                }
                                let fresh4 = p;
                                p = p.offset(1);
                                c1 = *fresh4 as libc::c_uchar;
                                if !translate.is_null() {
                                    c1 = *translate.offset(c1 as isize) as libc::c_uchar;
                                }
                                if !(c1 as libc::c_int == '+' as i32
                                    || c1 as libc::c_int == '?' as i32)
                                {
                                    p = p.offset(-1);
                                    p;
                                    p = p.offset(-1);
                                    p;
                                    break;
                                } else {
                                    c = c1;
                                }
                            } else {
                                p = p.offset(-1);
                                p;
                                break;
                            }
                        }
                        if laststart.is_null() {
                            continue;
                        }
                        if many_times_ok != 0 {
                            while (b.offset_from((*bufp).buffer) as libc::c_long
                                + 3 as libc::c_int as libc::c_long) as libc::c_ulong
                                > (*bufp).allocated
                            {
                                let mut old_buffer_1: *mut libc::c_uchar = (*bufp).buffer;
                                if (*bufp).allocated
                                    == ((1 as libc::c_long) << 16 as libc::c_int)
                                        as libc::c_ulong
                                {
                                    return reg_errcode_t::REG_ESIZE;
                                }
                                (*bufp).allocated <<= 1 as libc::c_int;
                                if (*bufp).allocated
                                    > ((1 as libc::c_long) << 16 as libc::c_int)
                                        as libc::c_ulong
                                {
                                    (*bufp).allocated = ((1 as libc::c_long)
                                        << 16 as libc::c_int) as libc::c_ulong;
                                }
                                (*bufp).buffer = realloc(
                                    (*bufp).buffer as *mut libc::c_void,
                                    (*bufp).allocated,
                                ) as *mut libc::c_uchar;
                                if ((*bufp).buffer).is_null() {
                                    return reg_errcode_t::REG_ESPACE;
                                }
                                if old_buffer_1 != (*bufp).buffer {
                                    b = ((*bufp).buffer)
                                        .offset(
                                            b.offset_from(old_buffer_1) as libc::c_long as isize,
                                        );
                                    begalt = ((*bufp).buffer)
                                        .offset(
                                            begalt.offset_from(old_buffer_1) as libc::c_long as isize,
                                        );
                                    if !fixup_alt_jump.is_null() {
                                        fixup_alt_jump = ((*bufp).buffer)
                                            .offset(
                                                fixup_alt_jump.offset_from(old_buffer_1) as libc::c_long
                                                    as isize,
                                            );
                                    }
                                    if !laststart.is_null() {
                                        laststart = ((*bufp).buffer)
                                            .offset(
                                                laststart.offset_from(old_buffer_1) as libc::c_long as isize,
                                            );
                                    }
                                    if !pending_exact.is_null() {
                                        pending_exact = ((*bufp).buffer)
                                            .offset(
                                                pending_exact.offset_from(old_buffer_1) as libc::c_long
                                                    as isize,
                                            );
                                    }
                                }
                            }
                            if (if !translate.is_null() {
                                *translate
                                    .offset(
                                        *p.offset(-(2 as libc::c_int as isize)) as libc::c_uchar
                                            as isize,
                                    ) as libc::c_int
                            } else {
                                *p.offset(-(2 as libc::c_int as isize)) as libc::c_int
                            })
                                == (if !translate.is_null() {
                                    *translate.offset('.' as i32 as libc::c_uchar as isize)
                                        as libc::c_int
                                } else {
                                    '.' as i32
                                }) && zero_times_ok as libc::c_int != 0 && p < pend
                                && (if !translate.is_null() {
                                    *translate.offset(*p as libc::c_uchar as isize)
                                        as libc::c_int
                                } else {
                                    *p as libc::c_int
                                })
                                    == (if !translate.is_null() {
                                        *translate.offset('\n' as i32 as libc::c_uchar as isize)
                                            as libc::c_int
                                    } else {
                                        '\n' as i32
                                    })
                                && syntax
                                    & ((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int == 0
                            {
                                store_op1(
                                    re_opcode_t::jump,
                                    b,
                                    (laststart.offset_from(b) as libc::c_long
                                        - 3 as libc::c_int as libc::c_long) as libc::c_int,
                                );
                                keep_string_p = 1 as libc::c_int as boolean;
                            } else {
                                store_op1(
                                    re_opcode_t::maybe_pop_jump,
                                    b,
                                    (laststart
                                        .offset(-(3 as libc::c_int as isize))
                                        .offset_from(b) as libc::c_long
                                        - 3 as libc::c_int as libc::c_long) as libc::c_int,
                                );
                            }
                            b = b.offset(3 as libc::c_int as isize);
                        }
                        while (b.offset_from((*bufp).buffer) as libc::c_long
                            + 3 as libc::c_int as libc::c_long) as libc::c_ulong
                            > (*bufp).allocated
                        {
                            let mut old_buffer_2: *mut libc::c_uchar = (*bufp).buffer;
                            if (*bufp).allocated
                                == ((1 as libc::c_long) << 16 as libc::c_int)
                                    as libc::c_ulong
                            {
                                return reg_errcode_t::REG_ESIZE;
                            }
                            (*bufp).allocated <<= 1 as libc::c_int;
                            if (*bufp).allocated
                                > ((1 as libc::c_long) << 16 as libc::c_int)
                                    as libc::c_ulong
                            {
                                (*bufp).allocated = ((1 as libc::c_long)
                                    << 16 as libc::c_int) as libc::c_ulong;
                            }
                            (*bufp).buffer = realloc(
                                (*bufp).buffer as *mut libc::c_void,
                                (*bufp).allocated,
                            ) as *mut libc::c_uchar;
                            if ((*bufp).buffer).is_null() {
                                return reg_errcode_t::REG_ESPACE;
                            }
                            if old_buffer_2 != (*bufp).buffer {
                                b = ((*bufp).buffer)
                                    .offset(
                                        b.offset_from(old_buffer_2) as libc::c_long as isize,
                                    );
                                begalt = ((*bufp).buffer)
                                    .offset(
                                        begalt.offset_from(old_buffer_2) as libc::c_long as isize,
                                    );
                                if !fixup_alt_jump.is_null() {
                                    fixup_alt_jump = ((*bufp).buffer)
                                        .offset(
                                            fixup_alt_jump.offset_from(old_buffer_2) as libc::c_long
                                                as isize,
                                        );
                                }
                                if !laststart.is_null() {
                                    laststart = ((*bufp).buffer)
                                        .offset(
                                            laststart.offset_from(old_buffer_2) as libc::c_long as isize,
                                        );
                                }
                                if !pending_exact.is_null() {
                                    pending_exact = ((*bufp).buffer)
                                        .offset(
                                            pending_exact.offset_from(old_buffer_2) as libc::c_long
                                                as isize,
                                        );
                                }
                            }
                        }
                        insert_op1(
                            re_opcode_t::from_libc_c_uint(
                                (if keep_string_p as libc::c_int != 0 {
                                    re_opcode_t::on_failure_keep_string_jump as libc::c_int
                                } else {
                                    re_opcode_t::on_failure_jump as libc::c_int
                                }) as u32,
                            ),
                            laststart,
                            (b.offset(3 as libc::c_int as isize).offset_from(laststart)
                                as libc::c_long - 3 as libc::c_int as libc::c_long)
                                as libc::c_int,
                            b,
                        );
                        pending_exact = 0 as *mut libc::c_uchar;
                        b = b.offset(3 as libc::c_int as isize);
                        if zero_times_ok == 0 {
                            while (b.offset_from((*bufp).buffer) as libc::c_long
                                + 3 as libc::c_int as libc::c_long) as libc::c_ulong
                                > (*bufp).allocated
                            {
                                let mut old_buffer_3: *mut libc::c_uchar = (*bufp).buffer;
                                if (*bufp).allocated
                                    == ((1 as libc::c_long) << 16 as libc::c_int)
                                        as libc::c_ulong
                                {
                                    return reg_errcode_t::REG_ESIZE;
                                }
                                (*bufp).allocated <<= 1 as libc::c_int;
                                if (*bufp).allocated
                                    > ((1 as libc::c_long) << 16 as libc::c_int)
                                        as libc::c_ulong
                                {
                                    (*bufp).allocated = ((1 as libc::c_long)
                                        << 16 as libc::c_int) as libc::c_ulong;
                                }
                                (*bufp).buffer = realloc(
                                    (*bufp).buffer as *mut libc::c_void,
                                    (*bufp).allocated,
                                ) as *mut libc::c_uchar;
                                if ((*bufp).buffer).is_null() {
                                    return reg_errcode_t::REG_ESPACE;
                                }
                                if old_buffer_3 != (*bufp).buffer {
                                    b = ((*bufp).buffer)
                                        .offset(
                                            b.offset_from(old_buffer_3) as libc::c_long as isize,
                                        );
                                    begalt = ((*bufp).buffer)
                                        .offset(
                                            begalt.offset_from(old_buffer_3) as libc::c_long as isize,
                                        );
                                    if !fixup_alt_jump.is_null() {
                                        fixup_alt_jump = ((*bufp).buffer)
                                            .offset(
                                                fixup_alt_jump.offset_from(old_buffer_3) as libc::c_long
                                                    as isize,
                                            );
                                    }
                                    if !laststart.is_null() {
                                        laststart = ((*bufp).buffer)
                                            .offset(
                                                laststart.offset_from(old_buffer_3) as libc::c_long as isize,
                                            );
                                    }
                                    if !pending_exact.is_null() {
                                        pending_exact = ((*bufp).buffer)
                                            .offset(
                                                pending_exact.offset_from(old_buffer_3) as libc::c_long
                                                    as isize,
                                            );
                                    }
                                }
                            }
                            insert_op1(
                                re_opcode_t::dummy_failure_jump,
                                laststart,
                                (laststart
                                    .offset(6 as libc::c_int as isize)
                                    .offset_from(laststart) as libc::c_long
                                    - 3 as libc::c_int as libc::c_long) as libc::c_int,
                                b,
                            );
                            b = b.offset(3 as libc::c_int as isize);
                        }
                        continue;
                    }
                }
            }
            _ => {}
        }
        match current_block {
            3962563478812244436 => {
                c = (if !translate.is_null() {
                    *translate.offset(c as isize) as libc::c_int
                } else {
                    c as libc::c_int
                }) as libc::c_uchar;
            }
            _ => {}
        }
        if pending_exact.is_null()
            || pending_exact
                .offset(*pending_exact as libc::c_int as isize)
                .offset(1 as libc::c_int as isize) != b
            || *pending_exact as libc::c_int
                == ((1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int
            || *p as libc::c_int == '*' as i32 || *p as libc::c_int == '^' as i32
            || (if syntax & (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int != 0
            {
                (*p as libc::c_int == '\\' as i32
                    && (*p.offset(1 as libc::c_int as isize) as libc::c_int == '+' as i32
                        || *p.offset(1 as libc::c_int as isize) as libc::c_int
                            == '?' as i32)) as libc::c_int
            } else {
                (*p as libc::c_int == '+' as i32 || *p as libc::c_int == '?' as i32)
                    as libc::c_int
            }) != 0
            || syntax
                & (((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                    << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                    << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                    << 1 as libc::c_int) << 1 as libc::c_int != 0
                && (if syntax
                    & ((((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                        << 1 as libc::c_int) << 1 as libc::c_int != 0
                {
                    (*p as libc::c_int == '{' as i32) as libc::c_int
                } else {
                    (*p.offset(0 as libc::c_int as isize) as libc::c_int == '\\' as i32
                        && *p.offset(1 as libc::c_int as isize) as libc::c_int
                            == '{' as i32) as libc::c_int
                }) != 0
        {
            laststart = b;
            while (b.offset_from((*bufp).buffer) as libc::c_long
                + 2 as libc::c_int as libc::c_long) as libc::c_ulong > (*bufp).allocated
            {
                let mut old_buffer_24: *mut libc::c_uchar = (*bufp).buffer;
                if (*bufp).allocated
                    == ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                {
                    return reg_errcode_t::REG_ESIZE;
                }
                (*bufp).allocated <<= 1 as libc::c_int;
                if (*bufp).allocated
                    > ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
                {
                    (*bufp).allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                        as libc::c_ulong;
                }
                (*bufp).buffer = realloc(
                    (*bufp).buffer as *mut libc::c_void,
                    (*bufp).allocated,
                ) as *mut libc::c_uchar;
                if ((*bufp).buffer).is_null() {
                    return reg_errcode_t::REG_ESPACE;
                }
                if old_buffer_24 != (*bufp).buffer {
                    b = ((*bufp).buffer)
                        .offset(b.offset_from(old_buffer_24) as libc::c_long as isize);
                    begalt = ((*bufp).buffer)
                        .offset(
                            begalt.offset_from(old_buffer_24) as libc::c_long as isize,
                        );
                    if !fixup_alt_jump.is_null() {
                        fixup_alt_jump = ((*bufp).buffer)
                            .offset(
                                fixup_alt_jump.offset_from(old_buffer_24) as libc::c_long
                                    as isize,
                            );
                    }
                    if !laststart.is_null() {
                        laststart = ((*bufp).buffer)
                            .offset(
                                laststart.offset_from(old_buffer_24) as libc::c_long
                                    as isize,
                            );
                    }
                    if !pending_exact.is_null() {
                        pending_exact = ((*bufp).buffer)
                            .offset(
                                pending_exact.offset_from(old_buffer_24) as libc::c_long
                                    as isize,
                            );
                    }
                }
            }
            let fresh50 = b;
            b = b.offset(1);
            *fresh50 = re_opcode_t::exactn as libc::c_int as libc::c_uchar;
            let fresh51 = b;
            b = b.offset(1);
            *fresh51 = 0 as libc::c_int as libc::c_uchar;
            pending_exact = b.offset(-(1 as libc::c_int as isize));
        }
        while (b.offset_from((*bufp).buffer) as libc::c_long
            + 1 as libc::c_int as libc::c_long) as libc::c_ulong > (*bufp).allocated
        {
            let mut old_buffer_25: *mut libc::c_uchar = (*bufp).buffer;
            if (*bufp).allocated
                == ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
            {
                return reg_errcode_t::REG_ESIZE;
            }
            (*bufp).allocated <<= 1 as libc::c_int;
            if (*bufp).allocated
                > ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
            {
                (*bufp).allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                    as libc::c_ulong;
            }
            (*bufp).buffer = realloc(
                (*bufp).buffer as *mut libc::c_void,
                (*bufp).allocated,
            ) as *mut libc::c_uchar;
            if ((*bufp).buffer).is_null() {
                return reg_errcode_t::REG_ESPACE;
            }
            if old_buffer_25 != (*bufp).buffer {
                b = ((*bufp).buffer)
                    .offset(b.offset_from(old_buffer_25) as libc::c_long as isize);
                begalt = ((*bufp).buffer)
                    .offset(begalt.offset_from(old_buffer_25) as libc::c_long as isize);
                if !fixup_alt_jump.is_null() {
                    fixup_alt_jump = ((*bufp).buffer)
                        .offset(
                            fixup_alt_jump.offset_from(old_buffer_25) as libc::c_long
                                as isize,
                        );
                }
                if !laststart.is_null() {
                    laststart = ((*bufp).buffer)
                        .offset(
                            laststart.offset_from(old_buffer_25) as libc::c_long as isize,
                        );
                }
                if !pending_exact.is_null() {
                    pending_exact = ((*bufp).buffer)
                        .offset(
                            pending_exact.offset_from(old_buffer_25) as libc::c_long
                                as isize,
                        );
                }
            }
        }
        let fresh52 = b;
        b = b.offset(1);
        *fresh52 = c;
        *pending_exact = (*pending_exact).wrapping_add(1);
        *pending_exact;
    }
    if !fixup_alt_jump.is_null() {
        store_op1(
            re_opcode_t::jump_past_alt,
            fixup_alt_jump,
            (b.offset_from(fixup_alt_jump) as libc::c_long
                - 3 as libc::c_int as libc::c_long) as libc::c_int,
        );
    }
    if !(compile_stack.avail == 0 as libc::c_int as libc::c_uint) {
        free(compile_stack.stack as *mut libc::c_void);
        return reg_errcode_t::from_libc_c_uint(
            reg_errcode_t::REG_EPAREN as libc::c_int as u32,
        );
    }
    if syntax
        & ((((((((((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
            << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
            << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
            << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
            << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
            << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
            << 1 as libc::c_int) << 1 as libc::c_int != 0
    {
        while (b.offset_from((*bufp).buffer) as libc::c_long
            + 1 as libc::c_int as libc::c_long) as libc::c_ulong > (*bufp).allocated
        {
            let mut old_buffer_26: *mut libc::c_uchar = (*bufp).buffer;
            if (*bufp).allocated
                == ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
            {
                return reg_errcode_t::REG_ESIZE;
            }
            (*bufp).allocated <<= 1 as libc::c_int;
            if (*bufp).allocated
                > ((1 as libc::c_long) << 16 as libc::c_int) as libc::c_ulong
            {
                (*bufp).allocated = ((1 as libc::c_long) << 16 as libc::c_int)
                    as libc::c_ulong;
            }
            (*bufp).buffer = realloc(
                (*bufp).buffer as *mut libc::c_void,
                (*bufp).allocated,
            ) as *mut libc::c_uchar;
            if ((*bufp).buffer).is_null() {
                return reg_errcode_t::REG_ESPACE;
            }
            if old_buffer_26 != (*bufp).buffer {
                b = ((*bufp).buffer)
                    .offset(b.offset_from(old_buffer_26) as libc::c_long as isize);
                begalt = ((*bufp).buffer)
                    .offset(begalt.offset_from(old_buffer_26) as libc::c_long as isize);
                if !fixup_alt_jump.is_null() {
                    fixup_alt_jump = ((*bufp).buffer)
                        .offset(
                            fixup_alt_jump.offset_from(old_buffer_26) as libc::c_long
                                as isize,
                        );
                }
                if !laststart.is_null() {
                    laststart = ((*bufp).buffer)
                        .offset(
                            laststart.offset_from(old_buffer_26) as libc::c_long as isize,
                        );
                }
                if !pending_exact.is_null() {
                    pending_exact = ((*bufp).buffer)
                        .offset(
                            pending_exact.offset_from(old_buffer_26) as libc::c_long
                                as isize,
                        );
                }
            }
        }
        let fresh53 = b;
        b = b.offset(1);
        *fresh53 = re_opcode_t::succeed as libc::c_int as libc::c_uchar;
    }
    free(compile_stack.stack as *mut libc::c_void);
    (*bufp).used = b.offset_from((*bufp).buffer) as libc::c_long as libc::c_ulong;
    return reg_errcode_t::REG_NOERROR;
}
unsafe extern "C" fn store_op1(
    mut op: re_opcode_t,
    mut loc: *mut libc::c_uchar,
    mut arg: libc::c_int,
) {
    *loc = op as libc::c_uchar;
    *loc.offset(1 as libc::c_int as isize).offset(0 as libc::c_int as isize) = (arg
        & 0o377 as libc::c_int) as libc::c_uchar;
    *loc.offset(1 as libc::c_int as isize).offset(1 as libc::c_int as isize) = (arg
        >> 8 as libc::c_int) as libc::c_uchar;
}
unsafe extern "C" fn store_op2(
    mut op: re_opcode_t,
    mut loc: *mut libc::c_uchar,
    mut arg1: libc::c_int,
    mut arg2: libc::c_int,
) {
    *loc = op as libc::c_uchar;
    *loc.offset(1 as libc::c_int as isize).offset(0 as libc::c_int as isize) = (arg1
        & 0o377 as libc::c_int) as libc::c_uchar;
    *loc.offset(1 as libc::c_int as isize).offset(1 as libc::c_int as isize) = (arg1
        >> 8 as libc::c_int) as libc::c_uchar;
    *loc.offset(3 as libc::c_int as isize).offset(0 as libc::c_int as isize) = (arg2
        & 0o377 as libc::c_int) as libc::c_uchar;
    *loc.offset(3 as libc::c_int as isize).offset(1 as libc::c_int as isize) = (arg2
        >> 8 as libc::c_int) as libc::c_uchar;
}
unsafe extern "C" fn insert_op1(
    mut op: re_opcode_t,
    mut loc: *mut libc::c_uchar,
    mut arg: libc::c_int,
    mut end: *mut libc::c_uchar,
) {
    let mut pfrom: *mut libc::c_uchar = end;
    let mut pto: *mut libc::c_uchar = end.offset(3 as libc::c_int as isize);
    while pfrom != loc {
        pfrom = pfrom.offset(-1);
        pto = pto.offset(-1);
        *pto = *pfrom;
    }
    store_op1(op as libc::c_uint, loc, arg);
}
unsafe extern "C" fn insert_op2(
    mut op: re_opcode_t,
    mut loc: *mut libc::c_uchar,
    mut arg1: libc::c_int,
    mut arg2: libc::c_int,
    mut end: *mut libc::c_uchar,
) {
    let mut pfrom: *mut libc::c_uchar = end;
    let mut pto: *mut libc::c_uchar = end.offset(5 as libc::c_int as isize);
    while pfrom != loc {
        pfrom = pfrom.offset(-1);
        pto = pto.offset(-1);
        *pto = *pfrom;
    }
    store_op2(op as libc::c_uint, loc, arg1, arg2);
}
unsafe extern "C" fn at_begline_loc_p(
    mut pattern: *const libc::c_char,
    mut p: *const libc::c_char,
    mut syntax: reg_syntax_t,
) -> boolean {
    let mut prev: *const libc::c_char = p.offset(-(2 as libc::c_int as isize));
    let mut prev_prev_backslash: boolean = (prev > pattern
        && *prev.offset(-(1 as libc::c_int) as isize) as libc::c_int == '\\' as i32)
        as libc::c_int as boolean;
    return (*prev as libc::c_int == '(' as i32
        && (syntax
            & (((((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int != 0
            || prev_prev_backslash as libc::c_int != 0)
        || *prev as libc::c_int == '|' as i32
            && (syntax
                & (((((((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                    << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                    << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                    << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                    << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                    << 1 as libc::c_int) << 1 as libc::c_int != 0
                || prev_prev_backslash as libc::c_int != 0)) as libc::c_int as boolean;
}
unsafe extern "C" fn at_endline_loc_p(
    mut p: *const libc::c_char,
    mut pend: *const libc::c_char,
    mut syntax: reg_syntax_t,
) -> boolean {
    let mut next: *const libc::c_char = p;
    let mut next_backslash: boolean = (*next as libc::c_int == '\\' as i32)
        as libc::c_int as boolean;
    let mut next_next: *const libc::c_char = if p.offset(1 as libc::c_int as isize)
        < pend
    {
        p.offset(1 as libc::c_int as isize)
    } else {
        0 as *const libc::c_char
    };
    return ((if syntax
        & (((((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
            << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
            << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
            << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
            << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int != 0
    {
        (*next as libc::c_int == ')' as i32) as libc::c_int
    } else {
        (next_backslash as libc::c_int != 0 && !next_next.is_null()
            && *next_next as libc::c_int == ')' as i32) as libc::c_int
    }) != 0
        || (if syntax
            & (((((((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int != 0
        {
            (*next as libc::c_int == '|' as i32) as libc::c_int
        } else {
            (next_backslash as libc::c_int != 0 && !next_next.is_null()
                && *next_next as libc::c_int == '|' as i32) as libc::c_int
        }) != 0) as libc::c_int as boolean;
}
unsafe extern "C" fn group_in_compile_stack(
    mut compile_stack: compile_stack_type,
    mut regnum: regnum_t,
) -> boolean {
    let mut this_element: libc::c_int = 0;
    this_element = (compile_stack.avail).wrapping_sub(1 as libc::c_int as libc::c_uint)
        as libc::c_int;
    while this_element >= 0 as libc::c_int {
        if (*(compile_stack.stack).offset(this_element as isize)).regnum == regnum {
            return 1 as libc::c_int as boolean;
        }
        this_element -= 1;
        this_element;
    }
    return 0 as libc::c_int as boolean;
}
unsafe extern "C" fn compile_range(
    mut p_ptr: *mut *const libc::c_char,
    mut pend: *const libc::c_char,
    mut translate: *mut libc::c_char,
    mut syntax: reg_syntax_t,
    mut b: *mut libc::c_uchar,
) -> reg_errcode_t {
    let mut this_char: libc::c_uint = 0;
    let mut p: *const libc::c_char = *p_ptr;
    let mut range_start: libc::c_uint = 0;
    let mut range_end: libc::c_uint = 0;
    if p == pend {
        return reg_errcode_t::REG_ERANGE;
    }
    range_start = *(p as *const libc::c_uchar).offset(-(2 as libc::c_int) as isize)
        as libc::c_uint;
    range_end = *(p as *const libc::c_uchar).offset(0 as libc::c_int as isize)
        as libc::c_uint;
    *p_ptr = (*p_ptr).offset(1);
    *p_ptr;
    if range_start > range_end {
        return reg_errcode_t::from_libc_c_uint(
            (if syntax
                & ((((((((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                    << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                    << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                    << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                    << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                    << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int != 0
            {
                reg_errcode_t::REG_ERANGE as libc::c_int
            } else {
                reg_errcode_t::REG_NOERROR as libc::c_int
            }) as u32,
        );
    }
    this_char = range_start;
    while this_char <= range_end {
        let ref mut fresh54 = *b
            .offset(
                ((if !translate.is_null() {
                    *translate.offset(this_char as libc::c_uchar as isize)
                        as libc::c_uint
                } else {
                    this_char
                }) as libc::c_uchar as libc::c_int / 8 as libc::c_int) as isize,
            );
        *fresh54 = (*fresh54 as libc::c_int
            | (1 as libc::c_int)
                << (if !translate.is_null() {
                    *translate.offset(this_char as libc::c_uchar as isize)
                        as libc::c_uint
                } else {
                    this_char
                }) as libc::c_uchar as libc::c_int % 8 as libc::c_int) as libc::c_uchar;
        this_char = this_char.wrapping_add(1);
        this_char;
    }
    return reg_errcode_t::REG_NOERROR;
}
#[no_mangle]
pub unsafe extern "C" fn re_compile_fastmap(
    mut bufp: *mut re_pattern_buffer,
) -> libc::c_int {
    let mut current_block: u64;
    let mut j: libc::c_int = 0;
    let mut k: libc::c_int = 0;
    let mut fail_stack: fail_stack_type = fail_stack_type {
        stack: 0 as *mut fail_stack_elt_t,
        size: 0,
        avail: 0,
    };
    let mut destination: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut num_regs: libc::c_uint = 0 as libc::c_int as libc::c_uint;
    let mut fastmap: *mut libc::c_char = (*bufp).fastmap;
    let mut pattern: *mut libc::c_uchar = (*bufp).buffer;
    let mut p: *mut libc::c_uchar = pattern;
    let mut pend: *mut libc::c_uchar = pattern.offset((*bufp).used as isize);
    let mut path_can_be_null: boolean = 1 as libc::c_int as boolean;
    let mut succeed_n_p: boolean = 0 as libc::c_int as boolean;
    let mut fresh55 = ::std::vec::from_elem(
        0,
        (5 as libc::c_int as libc::c_ulong)
            .wrapping_mul(::core::mem::size_of::<fail_stack_elt_t>() as libc::c_ulong)
            as usize,
    );
    fail_stack.stack = fresh55.as_mut_ptr() as *mut fail_stack_elt_t;
    if (fail_stack.stack).is_null() {
        return -(2 as libc::c_int);
    }
    fail_stack.size = 5 as libc::c_int as libc::c_uint;
    fail_stack.avail = 0 as libc::c_int as libc::c_uint;
    memset(
        fastmap as *mut libc::c_void,
        0 as libc::c_int,
        ((1 as libc::c_int) << 8 as libc::c_int) as libc::c_ulong,
    );
    (*bufp).set_fastmap_accurate(1 as libc::c_int as libc::c_uint);
    (*bufp).set_can_be_null(0 as libc::c_int as libc::c_uint);
    loop {
        if p == pend || *p as libc::c_int == re_opcode_t::succeed as libc::c_int {
            if fail_stack.avail == 0 as libc::c_int as libc::c_uint {
                current_block = 5409161009579131794;
                break;
            }
            (*bufp)
                .set_can_be_null(
                    (*bufp).can_be_null()
                        | path_can_be_null as libc::c_int as libc::c_uint,
                );
            path_can_be_null = 1 as libc::c_int as boolean;
            fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
            p = (*(fail_stack.stack).offset(fail_stack.avail as isize)).pointer;
        } else {
            let fresh56 = p;
            p = p.offset(1);
            match re_opcode_t::from_libc_c_uint(*fresh56 as u32) as libc::c_uint {
                8 => {
                    (*bufp).set_can_be_null(1 as libc::c_int as libc::c_uint);
                    current_block = 16590946904645350046;
                    break;
                }
                2 => {
                    *fastmap.offset(*p.offset(1 as libc::c_int as isize) as isize) = 1
                        as libc::c_int as libc::c_char;
                    current_block = 2652804691515851435;
                }
                4 => {
                    let fresh57 = p;
                    p = p.offset(1);
                    j = *fresh57 as libc::c_int * 8 as libc::c_int - 1 as libc::c_int;
                    while j >= 0 as libc::c_int {
                        if *p.offset((j / 8 as libc::c_int) as isize) as libc::c_int
                            & (1 as libc::c_int) << j % 8 as libc::c_int != 0
                        {
                            *fastmap.offset(j as isize) = 1 as libc::c_int
                                as libc::c_char;
                        }
                        j -= 1;
                        j;
                    }
                    current_block = 2652804691515851435;
                }
                5 => {
                    j = *p as libc::c_int * 8 as libc::c_int;
                    while j < (1 as libc::c_int) << 8 as libc::c_int {
                        *fastmap.offset(j as isize) = 1 as libc::c_int as libc::c_char;
                        j += 1;
                        j;
                    }
                    let fresh58 = p;
                    p = p.offset(1);
                    j = *fresh58 as libc::c_int * 8 as libc::c_int - 1 as libc::c_int;
                    while j >= 0 as libc::c_int {
                        if *p.offset((j / 8 as libc::c_int) as isize) as libc::c_int
                            & (1 as libc::c_int) << j % 8 as libc::c_int == 0
                        {
                            *fastmap.offset(j as isize) = 1 as libc::c_int
                                as libc::c_char;
                        }
                        j -= 1;
                        j;
                    }
                    current_block = 2652804691515851435;
                }
                24 => {
                    j = 0 as libc::c_int;
                    while j < (1 as libc::c_int) << 8 as libc::c_int {
                        if re_syntax_table[j as usize] as libc::c_int == 1 as libc::c_int
                        {
                            *fastmap.offset(j as isize) = 1 as libc::c_int
                                as libc::c_char;
                        }
                        j += 1;
                        j;
                    }
                    current_block = 2652804691515851435;
                }
                25 => {
                    j = 0 as libc::c_int;
                    while j < (1 as libc::c_int) << 8 as libc::c_int {
                        if re_syntax_table[j as usize] as libc::c_int != 1 as libc::c_int
                        {
                            *fastmap.offset(j as isize) = 1 as libc::c_int
                                as libc::c_char;
                        }
                        j += 1;
                        j;
                    }
                    current_block = 2652804691515851435;
                }
                3 => {
                    let mut fastmap_newline: libc::c_int = *fastmap
                        .offset('\n' as i32 as isize) as libc::c_int;
                    j = 0 as libc::c_int;
                    while j < (1 as libc::c_int) << 8 as libc::c_int {
                        *fastmap.offset(j as isize) = 1 as libc::c_int as libc::c_char;
                        j += 1;
                        j;
                    }
                    if (*bufp).syntax
                        & ((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int)
                            << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int
                        == 0
                    {
                        *fastmap.offset('\n' as i32 as isize) = fastmap_newline
                            as libc::c_char;
                    } else if (*bufp).can_be_null() != 0 {
                        current_block = 16590946904645350046;
                        break;
                    }
                    current_block = 2652804691515851435;
                }
                0 | 9 | 10 | 11 | 12 | 28 | 29 | 26 | 27 | 20 => {
                    continue;
                }
                22 | 17 | 18 | 13 | 14 | 19 => {
                    j = *p as libc::c_int & 0o377 as libc::c_int;
                    j
                        += (*p.offset(1 as libc::c_int as isize) as libc::c_schar
                            as libc::c_int) << 8 as libc::c_int;
                    p = p.offset(2 as libc::c_int as isize);
                    p = p.offset(j as isize);
                    if j > 0 as libc::c_int {
                        continue;
                    }
                    if re_opcode_t::from_libc_c_uint(*p as u32) as libc::c_uint
                        != re_opcode_t::on_failure_jump as libc::c_int as libc::c_uint
                        && re_opcode_t::from_libc_c_uint(*p as u32) as libc::c_uint
                            != re_opcode_t::succeed_n as libc::c_int as libc::c_uint
                    {
                        continue;
                    }
                    p = p.offset(1);
                    p;
                    j = *p as libc::c_int & 0o377 as libc::c_int;
                    j
                        += (*p.offset(1 as libc::c_int as isize) as libc::c_schar
                            as libc::c_int) << 8 as libc::c_int;
                    p = p.offset(2 as libc::c_int as isize);
                    p = p.offset(j as isize);
                    if !(fail_stack.avail == 0 as libc::c_int as libc::c_uint)
                        && (*(fail_stack.stack)
                            .offset(
                                (fail_stack.avail)
                                    .wrapping_sub(1 as libc::c_int as libc::c_uint) as isize,
                            ))
                            .pointer == p
                    {
                        fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
                        fail_stack.avail;
                    }
                    continue;
                }
                15 | 16 => {
                    current_block = 12693412865587933385;
                }
                21 => {
                    p = p.offset(2 as libc::c_int as isize);
                    k = *p as libc::c_int & 0o377 as libc::c_int;
                    k
                        += (*p.offset(1 as libc::c_int as isize) as libc::c_schar
                            as libc::c_int) << 8 as libc::c_int;
                    p = p.offset(2 as libc::c_int as isize);
                    if !(k == 0 as libc::c_int) {
                        continue;
                    }
                    p = p.offset(-(4 as libc::c_int as isize));
                    succeed_n_p = 1 as libc::c_int as boolean;
                    current_block = 12693412865587933385;
                }
                23 => {
                    p = p.offset(4 as libc::c_int as isize);
                    continue;
                }
                6 | 7 => {
                    p = p.offset(2 as libc::c_int as isize);
                    continue;
                }
                _ => {
                    abort();
                }
            }
            match current_block {
                2652804691515851435 => {
                    path_can_be_null = 0 as libc::c_int as boolean;
                    p = pend;
                }
                _ => {
                    j = *p as libc::c_int & 0o377 as libc::c_int;
                    j
                        += (*p.offset(1 as libc::c_int as isize) as libc::c_schar
                            as libc::c_int) << 8 as libc::c_int;
                    p = p.offset(2 as libc::c_int as isize);
                    if p.offset(j as isize) < pend {
                        if if fail_stack.avail == fail_stack.size
                            && (if fail_stack.size
                                > (re_max_failures
                                    * (5 as libc::c_int * 3 as libc::c_int + 4 as libc::c_int))
                                    as libc::c_uint
                            {
                                0 as libc::c_int
                            } else {
                                let mut fresh59 = ::std::vec::from_elem(
                                    0,
                                    ((fail_stack.size << 1 as libc::c_int) as libc::c_ulong)
                                        .wrapping_mul(
                                            ::core::mem::size_of::<fail_stack_elt_t>() as libc::c_ulong,
                                        ) as usize,
                                );
                                destination = fresh59.as_mut_ptr() as *mut libc::c_char;
                                memcpy(
                                    destination as *mut libc::c_void,
                                    fail_stack.stack as *const libc::c_void,
                                    (fail_stack.size as libc::c_ulong)
                                        .wrapping_mul(
                                            ::core::mem::size_of::<fail_stack_elt_t>() as libc::c_ulong,
                                        ),
                                );
                                fail_stack.stack = destination as *mut fail_stack_elt_t;
                                (if (fail_stack.stack).is_null() {
                                    0 as libc::c_int
                                } else {
                                    fail_stack.size <<= 1 as libc::c_int;
                                    1 as libc::c_int
                                })
                            }) == 0
                        {
                            0 as libc::c_int
                        } else {
                            let fresh60 = fail_stack.avail;
                            fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                            let ref mut fresh61 = (*(fail_stack.stack)
                                .offset(fresh60 as isize))
                                .pointer;
                            *fresh61 = p.offset(j as isize);
                            1 as libc::c_int
                        } == 0
                        {
                            return -(2 as libc::c_int);
                        }
                    } else {
                        (*bufp).set_can_be_null(1 as libc::c_int as libc::c_uint);
                    }
                    if succeed_n_p != 0 {
                        k = *p as libc::c_int & 0o377 as libc::c_int;
                        k
                            += (*p.offset(1 as libc::c_int as isize) as libc::c_schar
                                as libc::c_int) << 8 as libc::c_int;
                        p = p.offset(2 as libc::c_int as isize);
                        succeed_n_p = 0 as libc::c_int as boolean;
                    }
                }
            }
        }
    }
    match current_block {
        5409161009579131794 => {
            (*bufp)
                .set_can_be_null(
                    (*bufp).can_be_null()
                        | path_can_be_null as libc::c_int as libc::c_uint,
                );
        }
        _ => {}
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn re_set_registers(
    mut bufp: *mut re_pattern_buffer,
    mut regs: *mut re_registers,
    mut num_regs: libc::c_uint,
    mut starts: *mut regoff_t,
    mut ends: *mut regoff_t,
) {
    if num_regs != 0 {
        (*bufp).set_regs_allocated(1 as libc::c_int as libc::c_uint);
        (*regs).num_regs = num_regs;
        (*regs).start = starts;
        (*regs).end = ends;
    } else {
        (*bufp).set_regs_allocated(0 as libc::c_int as libc::c_uint);
        (*regs).num_regs = 0 as libc::c_int as libc::c_uint;
        (*regs).end = 0 as *mut regoff_t;
        (*regs).start = (*regs).end;
    };
}
#[no_mangle]
pub unsafe extern "C" fn re_search(
    mut bufp: *mut re_pattern_buffer,
    mut string: *const libc::c_char,
    mut size: libc::c_int,
    mut startpos: libc::c_int,
    mut range: libc::c_int,
    mut regs: *mut re_registers,
) -> libc::c_int {
    return re_search_2(
        bufp,
        0 as *const libc::c_char,
        0 as libc::c_int,
        string,
        size,
        startpos,
        range,
        regs,
        size,
    );
}
#[no_mangle]
pub unsafe extern "C" fn re_search_2(
    mut bufp: *mut re_pattern_buffer,
    mut string1: *const libc::c_char,
    mut size1: libc::c_int,
    mut string2: *const libc::c_char,
    mut size2: libc::c_int,
    mut startpos: libc::c_int,
    mut range: libc::c_int,
    mut regs: *mut re_registers,
    mut stop: libc::c_int,
) -> libc::c_int {
    let mut val: libc::c_int = 0;
    let mut fastmap: *mut libc::c_char = (*bufp).fastmap;
    let mut translate: *mut libc::c_char = (*bufp).translate;
    let mut total_size: libc::c_int = size1 + size2;
    let mut endpos: libc::c_int = startpos + range;
    if startpos < 0 as libc::c_int || startpos > total_size {
        return -(1 as libc::c_int);
    }
    if endpos < 0 as libc::c_int {
        range = 0 as libc::c_int - startpos;
    } else if endpos > total_size {
        range = total_size - startpos;
    }
    if (*bufp).used > 0 as libc::c_int as libc::c_ulong
        && re_opcode_t::from_libc_c_uint(
            *((*bufp).buffer).offset(0 as libc::c_int as isize) as u32,
        ) as libc::c_uint == re_opcode_t::begbuf as libc::c_int as libc::c_uint
        && range > 0 as libc::c_int
    {
        if startpos > 0 as libc::c_int {
            return -(1 as libc::c_int)
        } else {
            range = 1 as libc::c_int;
        }
    }
    if !fastmap.is_null() && (*bufp).fastmap_accurate() == 0 {
        if re_compile_fastmap(bufp) == -(2 as libc::c_int) {
            return -(2 as libc::c_int);
        }
    }
    let mut current_block_37: u64;
    loop {
        if !fastmap.is_null() && startpos < total_size && (*bufp).can_be_null() == 0 {
            if range > 0 as libc::c_int {
                let mut d: *const libc::c_char = 0 as *const libc::c_char;
                let mut lim: libc::c_int = 0 as libc::c_int;
                let mut irange: libc::c_int = range;
                if startpos < size1 && startpos + range >= size1 {
                    lim = range - (size1 - startpos);
                }
                d = (if startpos >= size1 {
                    string2.offset(-(size1 as isize))
                } else {
                    string1
                })
                    .offset(startpos as isize);
                if !translate.is_null() {
                    while range > lim
                        && {
                            let fresh62 = d;
                            d = d.offset(1);
                            *fastmap
                                .offset(
                                    *translate.offset(*fresh62 as libc::c_uchar as isize)
                                        as libc::c_uchar as isize,
                                ) == 0
                        }
                    {
                        range -= 1;
                        range;
                    }
                } else {
                    while range > lim
                        && {
                            let fresh63 = d;
                            d = d.offset(1);
                            *fastmap.offset(*fresh63 as libc::c_uchar as isize) == 0
                        }
                    {
                        range -= 1;
                        range;
                    }
                }
                startpos += irange - range;
                current_block_37 = 14648156034262866959;
            } else {
                let mut c: libc::c_char = (if size1 == 0 as libc::c_int
                    || startpos >= size1
                {
                    *string2.offset((startpos - size1) as isize) as libc::c_int
                } else {
                    *string1.offset(startpos as isize) as libc::c_int
                }) as libc::c_char;
                if *fastmap
                    .offset(
                        (if !translate.is_null() {
                            *translate.offset(c as libc::c_uchar as isize) as libc::c_int
                        } else {
                            c as libc::c_int
                        }) as libc::c_uchar as isize,
                    ) == 0
                {
                    current_block_37 = 4460245538459946620;
                } else {
                    current_block_37 = 14648156034262866959;
                }
            }
        } else {
            current_block_37 = 14648156034262866959;
        }
        match current_block_37 {
            14648156034262866959 => {
                if range >= 0 as libc::c_int && startpos == total_size
                    && !fastmap.is_null() && (*bufp).can_be_null() == 0
                {
                    return -(1 as libc::c_int);
                }
                val = re_match_2_internal(
                    bufp,
                    string1,
                    size1,
                    string2,
                    size2,
                    startpos,
                    regs,
                    stop,
                );
                if val >= 0 as libc::c_int {
                    return startpos;
                }
                if val == -(2 as libc::c_int) {
                    return -(2 as libc::c_int);
                }
            }
            _ => {}
        }
        if range == 0 {
            break;
        }
        if range > 0 as libc::c_int {
            range -= 1;
            range;
            startpos += 1;
            startpos;
        } else {
            range += 1;
            range;
            startpos -= 1;
            startpos;
        }
    }
    return -(1 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn re_match(
    mut bufp: *mut re_pattern_buffer,
    mut string: *const libc::c_char,
    mut size: libc::c_int,
    mut pos: libc::c_int,
    mut regs: *mut re_registers,
) -> libc::c_int {
    let mut result: libc::c_int = re_match_2_internal(
        bufp,
        0 as *mut libc::c_void,
        0 as libc::c_int,
        string,
        size,
        pos,
        regs,
        size,
    );
    return result;
}
#[no_mangle]
pub unsafe extern "C" fn re_match_2(
    mut bufp: *mut re_pattern_buffer,
    mut string1: *const libc::c_char,
    mut size1: libc::c_int,
    mut string2: *const libc::c_char,
    mut size2: libc::c_int,
    mut pos: libc::c_int,
    mut regs: *mut re_registers,
    mut stop: libc::c_int,
) -> libc::c_int {
    let mut result: libc::c_int = re_match_2_internal(
        bufp,
        string1,
        size1,
        string2,
        size2,
        pos,
        regs,
        stop,
    );
    return result;
}
unsafe extern "C" fn re_match_2_internal(
    mut bufp: *mut re_pattern_buffer,
    mut string1: *const libc::c_char,
    mut size1: libc::c_int,
    mut string2: *const libc::c_char,
    mut size2: libc::c_int,
    mut pos: libc::c_int,
    mut regs: *mut re_registers,
    mut stop: libc::c_int,
) -> libc::c_int {
    let mut same_str_p: boolean = 0;
    let mut best_match_p: boolean = 0;
    let mut current_block: u64;
    let mut mcnt: libc::c_int = 0;
    let mut p1: *mut libc::c_uchar = 0 as *mut libc::c_uchar;
    let mut end1: *const libc::c_char = 0 as *const libc::c_char;
    let mut end2: *const libc::c_char = 0 as *const libc::c_char;
    let mut end_match_1: *const libc::c_char = 0 as *const libc::c_char;
    let mut end_match_2: *const libc::c_char = 0 as *const libc::c_char;
    let mut d: *const libc::c_char = 0 as *const libc::c_char;
    let mut dend: *const libc::c_char = 0 as *const libc::c_char;
    let mut p: *mut libc::c_uchar = (*bufp).buffer;
    let mut pend: *mut libc::c_uchar = p.offset((*bufp).used as isize);
    let mut just_past_start_mem: *mut libc::c_uchar = 0 as *mut libc::c_uchar;
    let mut translate: *mut libc::c_char = (*bufp).translate;
    let mut fail_stack: fail_stack_type = fail_stack_type {
        stack: 0 as *mut fail_stack_elt_t,
        size: 0,
        avail: 0,
    };
    let mut num_regs: size_t = ((*bufp).re_nsub)
        .wrapping_add(1 as libc::c_int as libc::c_ulong);
    let mut lowest_active_reg: active_reg_t = (((1 as libc::c_int) << 8 as libc::c_int)
        + 1 as libc::c_int) as active_reg_t;
    let mut highest_active_reg: active_reg_t = ((1 as libc::c_int) << 8 as libc::c_int)
        as active_reg_t;
    let mut regstart: *mut *const libc::c_char = 0 as *mut *const libc::c_char;
    let mut regend: *mut *const libc::c_char = 0 as *mut *const libc::c_char;
    let mut old_regstart: *mut *const libc::c_char = 0 as *mut *const libc::c_char;
    let mut old_regend: *mut *const libc::c_char = 0 as *mut *const libc::c_char;
    let mut reg_info: *mut register_info_type = 0 as *mut register_info_type;
    let mut best_regs_set: libc::c_uint = 0 as libc::c_int as libc::c_uint;
    let mut best_regstart: *mut *const libc::c_char = 0 as *mut *const libc::c_char;
    let mut best_regend: *mut *const libc::c_char = 0 as *mut *const libc::c_char;
    let mut match_end: *const libc::c_char = 0 as *const libc::c_char;
    let mut set_regs_matched_done: libc::c_int = 0 as libc::c_int;
    let mut reg_dummy: *mut *const libc::c_char = 0 as *mut *const libc::c_char;
    let mut reg_info_dummy: *mut register_info_type = 0 as *mut register_info_type;
    let mut fresh64 = ::std::vec::from_elem(
        0,
        (5 as libc::c_int as libc::c_ulong)
            .wrapping_mul(::core::mem::size_of::<fail_stack_elt_t>() as libc::c_ulong)
            as usize,
    );
    fail_stack.stack = fresh64.as_mut_ptr() as *mut fail_stack_elt_t;
    if (fail_stack.stack).is_null() {
        return -(2 as libc::c_int);
    }
    fail_stack.size = 5 as libc::c_int as libc::c_uint;
    fail_stack.avail = 0 as libc::c_int as libc::c_uint;
    if (*bufp).re_nsub != 0 {
        let mut fresh65 = ::std::vec::from_elem(
            0,
            num_regs
                .wrapping_mul(
                    ::core::mem::size_of::<*const libc::c_char>() as libc::c_ulong,
                ) as usize,
        );
        regstart = fresh65.as_mut_ptr() as *mut *const libc::c_char;
        let mut fresh66 = ::std::vec::from_elem(
            0,
            num_regs
                .wrapping_mul(
                    ::core::mem::size_of::<*const libc::c_char>() as libc::c_ulong,
                ) as usize,
        );
        regend = fresh66.as_mut_ptr() as *mut *const libc::c_char;
        let mut fresh67 = ::std::vec::from_elem(
            0,
            num_regs
                .wrapping_mul(
                    ::core::mem::size_of::<*const libc::c_char>() as libc::c_ulong,
                ) as usize,
        );
        old_regstart = fresh67.as_mut_ptr() as *mut *const libc::c_char;
        let mut fresh68 = ::std::vec::from_elem(
            0,
            num_regs
                .wrapping_mul(
                    ::core::mem::size_of::<*const libc::c_char>() as libc::c_ulong,
                ) as usize,
        );
        old_regend = fresh68.as_mut_ptr() as *mut *const libc::c_char;
        let mut fresh69 = ::std::vec::from_elem(
            0,
            num_regs
                .wrapping_mul(
                    ::core::mem::size_of::<*const libc::c_char>() as libc::c_ulong,
                ) as usize,
        );
        best_regstart = fresh69.as_mut_ptr() as *mut *const libc::c_char;
        let mut fresh70 = ::std::vec::from_elem(
            0,
            num_regs
                .wrapping_mul(
                    ::core::mem::size_of::<*const libc::c_char>() as libc::c_ulong,
                ) as usize,
        );
        best_regend = fresh70.as_mut_ptr() as *mut *const libc::c_char;
        let mut fresh71 = ::std::vec::from_elem(
            0,
            num_regs
                .wrapping_mul(
                    ::core::mem::size_of::<register_info_type>() as libc::c_ulong,
                ) as usize,
        );
        reg_info = fresh71.as_mut_ptr() as *mut register_info_type;
        let mut fresh72 = ::std::vec::from_elem(
            0,
            num_regs
                .wrapping_mul(
                    ::core::mem::size_of::<*const libc::c_char>() as libc::c_ulong,
                ) as usize,
        );
        reg_dummy = fresh72.as_mut_ptr() as *mut *const libc::c_char;
        let mut fresh73 = ::std::vec::from_elem(
            0,
            num_regs
                .wrapping_mul(
                    ::core::mem::size_of::<register_info_type>() as libc::c_ulong,
                ) as usize,
        );
        reg_info_dummy = fresh73.as_mut_ptr() as *mut register_info_type;
        if !(!regstart.is_null() && !regend.is_null() && !old_regstart.is_null()
            && !old_regend.is_null() && !reg_info.is_null() && !best_regstart.is_null()
            && !best_regend.is_null() && !reg_dummy.is_null()
            && !reg_info_dummy.is_null())
        {
            !regstart.is_null();
            regstart = 0 as *mut *const libc::c_char;
            !regend.is_null();
            regend = 0 as *mut *const libc::c_char;
            !old_regstart.is_null();
            old_regstart = 0 as *mut *const libc::c_char;
            !old_regend.is_null();
            old_regend = 0 as *mut *const libc::c_char;
            !best_regstart.is_null();
            best_regstart = 0 as *mut *const libc::c_char;
            !best_regend.is_null();
            best_regend = 0 as *mut *const libc::c_char;
            !reg_info.is_null();
            reg_info = 0 as *mut register_info_type;
            !reg_dummy.is_null();
            reg_dummy = 0 as *mut *const libc::c_char;
            !reg_info_dummy.is_null();
            reg_info_dummy = 0 as *mut register_info_type;
            return -(2 as libc::c_int);
        }
    } else {
        reg_dummy = 0 as *mut *const libc::c_char;
        best_regend = reg_dummy;
        best_regstart = best_regend;
        old_regend = best_regstart;
        old_regstart = old_regend;
        regend = old_regstart;
        regstart = regend;
        reg_info_dummy = 0 as *mut libc::c_void as *mut register_info_type;
        reg_info = reg_info_dummy;
    }
    if pos < 0 as libc::c_int || pos > size1 + size2 {
        !regstart.is_null();
        regstart = 0 as *mut *const libc::c_char;
        !regend.is_null();
        regend = 0 as *mut *const libc::c_char;
        !old_regstart.is_null();
        old_regstart = 0 as *mut *const libc::c_char;
        !old_regend.is_null();
        old_regend = 0 as *mut *const libc::c_char;
        !best_regstart.is_null();
        best_regstart = 0 as *mut *const libc::c_char;
        !best_regend.is_null();
        best_regend = 0 as *mut *const libc::c_char;
        !reg_info.is_null();
        reg_info = 0 as *mut register_info_type;
        !reg_dummy.is_null();
        reg_dummy = 0 as *mut *const libc::c_char;
        !reg_info_dummy.is_null();
        reg_info_dummy = 0 as *mut register_info_type;
        return -(1 as libc::c_int);
    }
    mcnt = 1 as libc::c_int;
    while (mcnt as libc::c_uint as libc::c_ulong) < num_regs {
        let ref mut fresh74 = *old_regend.offset(mcnt as isize);
        *fresh74 = &mut reg_unset_dummy;
        let ref mut fresh75 = *old_regstart.offset(mcnt as isize);
        *fresh75 = *fresh74;
        let ref mut fresh76 = *regend.offset(mcnt as isize);
        *fresh76 = *fresh75;
        let ref mut fresh77 = *regstart.offset(mcnt as isize);
        *fresh77 = *fresh76;
        let ref mut fresh78 = (*reg_info.offset(mcnt as isize)).bits;
        (*fresh78).set_match_null_string_p(3 as libc::c_int as libc::c_uint);
        let ref mut fresh79 = (*reg_info.offset(mcnt as isize)).bits;
        (*fresh79).set_is_active(0 as libc::c_int as libc::c_uint);
        let ref mut fresh80 = (*reg_info.offset(mcnt as isize)).bits;
        (*fresh80).set_matched_something(0 as libc::c_int as libc::c_uint);
        let ref mut fresh81 = (*reg_info.offset(mcnt as isize)).bits;
        (*fresh81).set_ever_matched_something(0 as libc::c_int as libc::c_uint);
        mcnt += 1;
        mcnt;
    }
    if size2 == 0 as libc::c_int && !string1.is_null() {
        string2 = string1;
        size2 = size1;
        string1 = 0 as *const libc::c_char;
        size1 = 0 as libc::c_int;
    }
    end1 = string1.offset(size1 as isize);
    end2 = string2.offset(size2 as isize);
    if stop <= size1 {
        end_match_1 = string1.offset(stop as isize);
        end_match_2 = string2;
    } else {
        end_match_1 = end1;
        end_match_2 = string2.offset(stop as isize).offset(-(size1 as isize));
    }
    if size1 > 0 as libc::c_int && pos <= size1 {
        d = string1.offset(pos as isize);
        dend = end_match_1;
    } else {
        d = string2.offset(pos as isize).offset(-(size1 as isize));
        dend = end_match_2;
    }
    's_497: loop {
        if p == pend {
            if !(d != end_match_2) {
                current_block = 10241167629170301496;
                break;
            }
            same_str_p = ((size1 != 0 && string1 <= match_end
                && match_end <= string1.offset(size1 as isize)) as libc::c_int
                == (dend == end_match_1) as libc::c_int) as libc::c_int as boolean;
            best_match_p = 0;
            if same_str_p != 0 {
                best_match_p = (d > match_end) as libc::c_int as boolean;
            } else {
                best_match_p = !(dend == end_match_1) as libc::c_int as boolean;
            }
            if !(fail_stack.avail == 0 as libc::c_int as libc::c_uint) {
                if best_regs_set == 0 || best_match_p as libc::c_int != 0 {
                    best_regs_set = 1 as libc::c_int as libc::c_uint;
                    match_end = d;
                    mcnt = 1 as libc::c_int;
                    while (mcnt as libc::c_uint as libc::c_ulong) < num_regs {
                        let ref mut fresh82 = *best_regstart.offset(mcnt as isize);
                        *fresh82 = *regstart.offset(mcnt as isize);
                        let ref mut fresh83 = *best_regend.offset(mcnt as isize);
                        *fresh83 = *regend.offset(mcnt as isize);
                        mcnt += 1;
                        mcnt;
                    }
                }
            } else if best_regs_set != 0 && best_match_p == 0 {
                current_block = 8602574157404971894;
                break;
            } else {
                current_block = 10241167629170301496;
                break;
            }
        } else {
            let fresh88 = p;
            p = p.offset(1);
            match re_opcode_t::from_libc_c_uint(*fresh88 as u32) as libc::c_uint {
                0 => {
                    current_block = 14951089859709286127;
                }
                1 => {
                    current_block = 10241167629170301496;
                    break;
                }
                2 => {
                    let fresh89 = p;
                    p = p.offset(1);
                    mcnt = *fresh89 as libc::c_int;
                    if !translate.is_null() {
                        loop {
                            if d == dend {
                                if dend == end_match_2 {
                                    current_block = 11540785266911159237;
                                    break;
                                }
                                d = string2;
                                dend = end_match_2;
                            } else {
                                let fresh90 = d;
                                d = d.offset(1);
                                let fresh91 = p;
                                p = p.offset(1);
                                if *translate.offset(*fresh90 as libc::c_uchar as isize)
                                    as libc::c_uchar as libc::c_int != *fresh91 as libc::c_int
                                {
                                    current_block = 11540785266911159237;
                                    break;
                                }
                                mcnt -= 1;
                                if !(mcnt != 0) {
                                    current_block = 2627007089909013891;
                                    break;
                                }
                            }
                        }
                    } else {
                        loop {
                            if d == dend {
                                if dend == end_match_2 {
                                    current_block = 11540785266911159237;
                                    break;
                                }
                                d = string2;
                                dend = end_match_2;
                            } else {
                                let fresh92 = d;
                                d = d.offset(1);
                                let fresh93 = p;
                                p = p.offset(1);
                                if *fresh92 as libc::c_int
                                    != *fresh93 as libc::c_char as libc::c_int
                                {
                                    current_block = 11540785266911159237;
                                    break;
                                }
                                mcnt -= 1;
                                if !(mcnt != 0) {
                                    current_block = 2627007089909013891;
                                    break;
                                }
                            }
                        }
                    }
                    match current_block {
                        11540785266911159237 => {}
                        _ => {
                            if set_regs_matched_done == 0 {
                                let mut r: active_reg_t = 0;
                                set_regs_matched_done = 1 as libc::c_int;
                                r = lowest_active_reg;
                                while r <= highest_active_reg {
                                    let ref mut fresh95 = (*reg_info.offset(r as isize)).bits;
                                    let ref mut fresh94 = (*reg_info.offset(r as isize)).bits;
                                    (*fresh94)
                                        .set_ever_matched_something(
                                            1 as libc::c_int as libc::c_uint,
                                        );
                                    (*fresh95)
                                        .set_matched_something((*fresh94).ever_matched_something());
                                    r = r.wrapping_add(1);
                                    r;
                                }
                            }
                            current_block = 14951089859709286127;
                        }
                    }
                }
                3 => {
                    loop {
                        if !(d == dend) {
                            current_block = 13419727033115386574;
                            break;
                        }
                        if dend == end_match_2 {
                            current_block = 11540785266911159237;
                            break;
                        }
                        d = string2;
                        dend = end_match_2;
                    }
                    match current_block {
                        11540785266911159237 => {}
                        _ => {
                            if (*bufp).syntax
                                & ((((((1 as libc::c_int as libc::c_ulong)
                                    << 1 as libc::c_int) << 1 as libc::c_int)
                                    << 1 as libc::c_int) << 1 as libc::c_int)
                                    << 1 as libc::c_int) << 1 as libc::c_int == 0
                                && (if !translate.is_null() {
                                    *translate.offset(*d as libc::c_uchar as isize)
                                        as libc::c_int
                                } else {
                                    *d as libc::c_int
                                }) == '\n' as i32
                                || (*bufp).syntax
                                    & (((((((1 as libc::c_int as libc::c_ulong)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int) << 1 as libc::c_int)
                                        << 1 as libc::c_int != 0
                                    && (if !translate.is_null() {
                                        *translate.offset(*d as libc::c_uchar as isize)
                                            as libc::c_int
                                    } else {
                                        *d as libc::c_int
                                    }) == '\0' as i32
                            {
                                current_block = 11540785266911159237;
                            } else {
                                if set_regs_matched_done == 0 {
                                    let mut r_0: active_reg_t = 0;
                                    set_regs_matched_done = 1 as libc::c_int;
                                    r_0 = lowest_active_reg;
                                    while r_0 <= highest_active_reg {
                                        let ref mut fresh97 = (*reg_info.offset(r_0 as isize)).bits;
                                        let ref mut fresh96 = (*reg_info.offset(r_0 as isize)).bits;
                                        (*fresh96)
                                            .set_ever_matched_something(
                                                1 as libc::c_int as libc::c_uint,
                                            );
                                        (*fresh97)
                                            .set_matched_something((*fresh96).ever_matched_something());
                                        r_0 = r_0.wrapping_add(1);
                                        r_0;
                                    }
                                }
                                d = d.offset(1);
                                d;
                                current_block = 14951089859709286127;
                            }
                        }
                    }
                }
                4 | 5 => {
                    let mut c: libc::c_uchar = 0;
                    let mut not: boolean = (re_opcode_t::from_libc_c_uint(
                        *p.offset(-(1 as libc::c_int as isize)) as u32,
                    ) as libc::c_uint
                        == re_opcode_t::charset_not as libc::c_int as libc::c_uint)
                        as libc::c_int as boolean;
                    loop {
                        if !(d == dend) {
                            current_block = 14057427497994812512;
                            break;
                        }
                        if dend == end_match_2 {
                            current_block = 11540785266911159237;
                            break;
                        }
                        d = string2;
                        dend = end_match_2;
                    }
                    match current_block {
                        11540785266911159237 => {}
                        _ => {
                            c = (if !translate.is_null() {
                                *translate.offset(*d as libc::c_uchar as isize)
                                    as libc::c_int
                            } else {
                                *d as libc::c_int
                            }) as libc::c_uchar;
                            if (c as libc::c_uint)
                                < (*p as libc::c_int * 8 as libc::c_int) as libc::c_uint
                                && *p
                                    .offset(
                                        (1 as libc::c_int + c as libc::c_int / 8 as libc::c_int)
                                            as isize,
                                    ) as libc::c_int
                                    & (1 as libc::c_int) << c as libc::c_int % 8 as libc::c_int
                                    != 0
                            {
                                not = (not == 0) as libc::c_int as boolean;
                            }
                            p = p
                                .offset((1 as libc::c_int + *p as libc::c_int) as isize);
                            if not == 0 {
                                current_block = 11540785266911159237;
                            } else {
                                if set_regs_matched_done == 0 {
                                    let mut r_1: active_reg_t = 0;
                                    set_regs_matched_done = 1 as libc::c_int;
                                    r_1 = lowest_active_reg;
                                    while r_1 <= highest_active_reg {
                                        let ref mut fresh99 = (*reg_info.offset(r_1 as isize)).bits;
                                        let ref mut fresh98 = (*reg_info.offset(r_1 as isize)).bits;
                                        (*fresh98)
                                            .set_ever_matched_something(
                                                1 as libc::c_int as libc::c_uint,
                                            );
                                        (*fresh99)
                                            .set_matched_something((*fresh98).ever_matched_something());
                                        r_1 = r_1.wrapping_add(1);
                                        r_1;
                                    }
                                }
                                d = d.offset(1);
                                d;
                                current_block = 14951089859709286127;
                            }
                        }
                    }
                }
                6 => {
                    p1 = p;
                    if ((*reg_info.offset(*p as isize)).bits).match_null_string_p()
                        as libc::c_int == 3 as libc::c_int
                    {
                        let ref mut fresh100 = (*reg_info.offset(*p as isize)).bits;
                        (*fresh100)
                            .set_match_null_string_p(
                                group_match_null_string_p(&mut p1, pend, reg_info)
                                    as libc::c_uint,
                            );
                    }
                    let ref mut fresh101 = *old_regstart.offset(*p as isize);
                    *fresh101 = if ((*reg_info.offset(*p as isize)).bits)
                        .match_null_string_p() as libc::c_int != 0
                    {
                        if *regstart.offset(*p as isize)
                            == &mut reg_unset_dummy as *mut libc::c_char
                        {
                            d
                        } else {
                            *regstart.offset(*p as isize)
                        }
                    } else {
                        *regstart.offset(*p as isize)
                    };
                    let ref mut fresh102 = *regstart.offset(*p as isize);
                    *fresh102 = d;
                    let ref mut fresh103 = (*reg_info.offset(*p as isize)).bits;
                    (*fresh103).set_is_active(1 as libc::c_int as libc::c_uint);
                    let ref mut fresh104 = (*reg_info.offset(*p as isize)).bits;
                    (*fresh104).set_matched_something(0 as libc::c_int as libc::c_uint);
                    set_regs_matched_done = 0 as libc::c_int;
                    highest_active_reg = *p as active_reg_t;
                    if lowest_active_reg
                        == (((1 as libc::c_int) << 8 as libc::c_int) + 1 as libc::c_int)
                            as libc::c_ulong
                    {
                        lowest_active_reg = *p as active_reg_t;
                    }
                    p = p.offset(2 as libc::c_int as isize);
                    just_past_start_mem = p;
                    current_block = 14951089859709286127;
                }
                7 => {
                    let ref mut fresh105 = *old_regend.offset(*p as isize);
                    *fresh105 = if ((*reg_info.offset(*p as isize)).bits)
                        .match_null_string_p() as libc::c_int != 0
                    {
                        if *regend.offset(*p as isize)
                            == &mut reg_unset_dummy as *mut libc::c_char
                        {
                            d
                        } else {
                            *regend.offset(*p as isize)
                        }
                    } else {
                        *regend.offset(*p as isize)
                    };
                    let ref mut fresh106 = *regend.offset(*p as isize);
                    *fresh106 = d;
                    let ref mut fresh107 = (*reg_info.offset(*p as isize)).bits;
                    (*fresh107).set_is_active(0 as libc::c_int as libc::c_uint);
                    set_regs_matched_done = 0 as libc::c_int;
                    if lowest_active_reg == highest_active_reg {
                        lowest_active_reg = (((1 as libc::c_int) << 8 as libc::c_int)
                            + 1 as libc::c_int) as active_reg_t;
                        highest_active_reg = ((1 as libc::c_int) << 8 as libc::c_int)
                            as active_reg_t;
                    } else {
                        let mut r_2: libc::c_uchar = (*p as libc::c_int
                            - 1 as libc::c_int) as libc::c_uchar;
                        while r_2 as libc::c_int > 0 as libc::c_int
                            && ((*reg_info.offset(r_2 as isize)).bits).is_active() == 0
                        {
                            r_2 = r_2.wrapping_sub(1);
                            r_2;
                        }
                        if r_2 as libc::c_int == 0 as libc::c_int {
                            lowest_active_reg = (((1 as libc::c_int) << 8 as libc::c_int)
                                + 1 as libc::c_int) as active_reg_t;
                            highest_active_reg = ((1 as libc::c_int) << 8 as libc::c_int)
                                as active_reg_t;
                        } else {
                            highest_active_reg = r_2 as active_reg_t;
                        }
                    }
                    if (((*reg_info.offset(*p as isize)).bits).matched_something() == 0
                        || just_past_start_mem == p.offset(-(1 as libc::c_int as isize)))
                        && p.offset(2 as libc::c_int as isize) < pend
                    {
                        let mut is_a_jump_n: boolean = 0 as libc::c_int as boolean;
                        p1 = p.offset(2 as libc::c_int as isize);
                        mcnt = 0 as libc::c_int;
                        let mut current_block_380: u64;
                        let fresh108 = p1;
                        p1 = p1.offset(1);
                        match re_opcode_t::from_libc_c_uint(*fresh108 as u32)
                            as libc::c_uint
                        {
                            22 => {
                                is_a_jump_n = 1 as libc::c_int as boolean;
                                current_block_380 = 18306521987677585429;
                            }
                            17 | 18 | 13 | 19 => {
                                current_block_380 = 18306521987677585429;
                            }
                            _ => {
                                current_block_380 = 16353847322475367968;
                            }
                        }
                        match current_block_380 {
                            18306521987677585429 => {
                                mcnt = *p1 as libc::c_int & 0o377 as libc::c_int;
                                mcnt
                                    += (*p1.offset(1 as libc::c_int as isize) as libc::c_schar
                                        as libc::c_int) << 8 as libc::c_int;
                                p1 = p1.offset(2 as libc::c_int as isize);
                                if is_a_jump_n != 0 {
                                    p1 = p1.offset(2 as libc::c_int as isize);
                                }
                            }
                            _ => {}
                        }
                        p1 = p1.offset(mcnt as isize);
                        if mcnt < 0 as libc::c_int
                            && re_opcode_t::from_libc_c_uint(*p1 as u32) as libc::c_uint
                                == re_opcode_t::on_failure_jump as libc::c_int
                                    as libc::c_uint
                            && re_opcode_t::from_libc_c_uint(
                                *p1.offset(3 as libc::c_int as isize) as u32,
                            ) as libc::c_uint
                                == re_opcode_t::start_memory as libc::c_int as libc::c_uint
                            && *p1.offset(4 as libc::c_int as isize) as libc::c_int
                                == *p as libc::c_int
                        {
                            if ((*reg_info.offset(*p as isize)).bits)
                                .ever_matched_something() != 0
                            {
                                let mut r_3: libc::c_uint = 0;
                                let ref mut fresh109 = (*reg_info.offset(*p as isize)).bits;
                                (*fresh109)
                                    .set_ever_matched_something(
                                        0 as libc::c_int as libc::c_uint,
                                    );
                                r_3 = *p as libc::c_uint;
                                while r_3
                                    < (*p as libc::c_uint)
                                        .wrapping_add(
                                            *p.offset(1 as libc::c_int as isize) as libc::c_uint,
                                        )
                                {
                                    let ref mut fresh110 = *regstart.offset(r_3 as isize);
                                    *fresh110 = *old_regstart.offset(r_3 as isize);
                                    if *old_regend.offset(r_3 as isize)
                                        >= *regstart.offset(r_3 as isize)
                                    {
                                        let ref mut fresh111 = *regend.offset(r_3 as isize);
                                        *fresh111 = *old_regend.offset(r_3 as isize);
                                    }
                                    r_3 = r_3.wrapping_add(1);
                                    r_3;
                                }
                            }
                            p1 = p1.offset(1);
                            p1;
                            mcnt = *p1 as libc::c_int & 0o377 as libc::c_int;
                            mcnt
                                += (*p1.offset(1 as libc::c_int as isize) as libc::c_schar
                                    as libc::c_int) << 8 as libc::c_int;
                            p1 = p1.offset(2 as libc::c_int as isize);
                            let mut destination: *mut libc::c_char = 0
                                as *mut libc::c_char;
                            let mut this_reg: s_reg_t = 0;
                            while ((fail_stack.size).wrapping_sub(fail_stack.avail)
                                as libc::c_ulong)
                                < (if 0 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_ulong
                                } else {
                                    highest_active_reg
                                        .wrapping_sub(lowest_active_reg)
                                        .wrapping_add(1 as libc::c_int as libc::c_ulong)
                                })
                                    .wrapping_mul(3 as libc::c_int as libc::c_ulong)
                                    .wrapping_add(4 as libc::c_int as libc::c_ulong)
                            {
                                if if fail_stack.size
                                    > (re_max_failures
                                        * (5 as libc::c_int * 3 as libc::c_int + 4 as libc::c_int))
                                        as libc::c_uint
                                {
                                    0 as libc::c_int
                                } else {
                                    let mut fresh112 = ::std::vec::from_elem(
                                        0,
                                        ((fail_stack.size << 1 as libc::c_int) as libc::c_ulong)
                                            .wrapping_mul(
                                                ::core::mem::size_of::<fail_stack_elt_t>() as libc::c_ulong,
                                            ) as usize,
                                    );
                                    destination = fresh112.as_mut_ptr() as *mut libc::c_char;
                                    memcpy(
                                        destination as *mut libc::c_void,
                                        fail_stack.stack as *const libc::c_void,
                                        (fail_stack.size as libc::c_ulong)
                                            .wrapping_mul(
                                                ::core::mem::size_of::<fail_stack_elt_t>() as libc::c_ulong,
                                            ),
                                    );
                                    fail_stack.stack = destination as *mut fail_stack_elt_t;
                                    (if (fail_stack.stack).is_null() {
                                        0 as libc::c_int
                                    } else {
                                        fail_stack.size <<= 1 as libc::c_int;
                                        1 as libc::c_int
                                    })
                                } == 0
                                {
                                    return -(2 as libc::c_int);
                                }
                            }
                            this_reg = lowest_active_reg as s_reg_t;
                            while this_reg as libc::c_ulong <= highest_active_reg {
                                let fresh113 = fail_stack.avail;
                                fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                                let ref mut fresh114 = (*(fail_stack.stack)
                                    .offset(fresh113 as isize))
                                    .pointer;
                                *fresh114 = *regstart.offset(this_reg as isize)
                                    as *mut libc::c_uchar;
                                let fresh115 = fail_stack.avail;
                                fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                                let ref mut fresh116 = (*(fail_stack.stack)
                                    .offset(fresh115 as isize))
                                    .pointer;
                                *fresh116 = *regend.offset(this_reg as isize)
                                    as *mut libc::c_uchar;
                                let fresh117 = fail_stack.avail;
                                fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                                *(fail_stack.stack).offset(fresh117 as isize) = (*reg_info
                                    .offset(this_reg as isize))
                                    .word;
                                this_reg += 1;
                                this_reg;
                            }
                            let fresh118 = fail_stack.avail;
                            fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                            (*(fail_stack.stack).offset(fresh118 as isize)).integer = lowest_active_reg
                                as libc::c_int;
                            let fresh119 = fail_stack.avail;
                            fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                            (*(fail_stack.stack).offset(fresh119 as isize)).integer = highest_active_reg
                                as libc::c_int;
                            let fresh120 = fail_stack.avail;
                            fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                            let ref mut fresh121 = (*(fail_stack.stack)
                                .offset(fresh120 as isize))
                                .pointer;
                            *fresh121 = p1.offset(mcnt as isize);
                            let fresh122 = fail_stack.avail;
                            fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                            let ref mut fresh123 = (*(fail_stack.stack)
                                .offset(fresh122 as isize))
                                .pointer;
                            *fresh123 = d as *mut libc::c_uchar;
                            current_block = 11540785266911159237;
                        } else {
                            current_block = 13734492969709581318;
                        }
                    } else {
                        current_block = 13734492969709581318;
                    }
                    match current_block {
                        11540785266911159237 => {}
                        _ => {
                            p = p.offset(2 as libc::c_int as isize);
                            current_block = 14951089859709286127;
                        }
                    }
                }
                8 => {
                    let mut d2: *const libc::c_char = 0 as *const libc::c_char;
                    let mut dend2: *const libc::c_char = 0 as *const libc::c_char;
                    let fresh124 = p;
                    p = p.offset(1);
                    let mut regno: libc::c_int = *fresh124 as libc::c_int;
                    if *regstart.offset(regno as isize)
                        == &mut reg_unset_dummy as *mut libc::c_char
                        || *regend.offset(regno as isize)
                            == &mut reg_unset_dummy as *mut libc::c_char
                    {
                        current_block = 11540785266911159237;
                    } else {
                        d2 = *regstart.offset(regno as isize);
                        dend2 = if (size1 != 0
                            && string1 <= *regstart.offset(regno as isize)
                            && *regstart.offset(regno as isize)
                                <= string1.offset(size1 as isize)) as libc::c_int
                            == (size1 != 0 && string1 <= *regend.offset(regno as isize)
                                && *regend.offset(regno as isize)
                                    <= string1.offset(size1 as isize)) as libc::c_int
                        {
                            *regend.offset(regno as isize)
                        } else {
                            end_match_1
                        };
                        's_1933: loop {
                            while d2 == dend2 {
                                if dend2 == end_match_2 {
                                    break;
                                }
                                if dend2 == *regend.offset(regno as isize) {
                                    break;
                                }
                                d2 = string2;
                                dend2 = *regend.offset(regno as isize);
                            }
                            if d2 == dend2 {
                                current_block = 14951089859709286127;
                                break;
                            }
                            while d == dend {
                                if dend == end_match_2 {
                                    current_block = 11540785266911159237;
                                    break 's_1933;
                                }
                                d = string2;
                                dend = end_match_2;
                            }
                            mcnt = dend.offset_from(d) as libc::c_long as libc::c_int;
                            if mcnt as libc::c_long
                                > dend2.offset_from(d2) as libc::c_long
                            {
                                mcnt = dend2.offset_from(d2) as libc::c_long as libc::c_int;
                            }
                            if if !translate.is_null() {
                                bcmp_translate(d, d2, mcnt, translate)
                            } else {
                                memcmp(
                                    d as *const libc::c_void,
                                    d2 as *const libc::c_void,
                                    mcnt as libc::c_ulong,
                                )
                            } != 0
                            {
                                current_block = 11540785266911159237;
                                break;
                            }
                            d = d.offset(mcnt as isize);
                            d2 = d2.offset(mcnt as isize);
                            if set_regs_matched_done == 0 {
                                let mut r_4: active_reg_t = 0;
                                set_regs_matched_done = 1 as libc::c_int;
                                r_4 = lowest_active_reg;
                                while r_4 <= highest_active_reg {
                                    let ref mut fresh126 = (*reg_info.offset(r_4 as isize))
                                        .bits;
                                    let ref mut fresh125 = (*reg_info.offset(r_4 as isize))
                                        .bits;
                                    (*fresh125)
                                        .set_ever_matched_something(
                                            1 as libc::c_int as libc::c_uint,
                                        );
                                    (*fresh126)
                                        .set_matched_something(
                                            (*fresh125).ever_matched_something(),
                                        );
                                    r_4 = r_4.wrapping_add(1);
                                    r_4;
                                }
                            }
                        }
                    }
                }
                9 => {
                    if d == (if size1 != 0 { string1 } else { string2 }) || size2 == 0 {
                        if (*bufp).not_bol() == 0 {
                            current_block = 14951089859709286127;
                        } else {
                            current_block = 4848821149585347428;
                        }
                    } else if *d.offset(-(1 as libc::c_int) as isize) as libc::c_int
                        == '\n' as i32 && (*bufp).newline_anchor() as libc::c_int != 0
                    {
                        current_block = 14951089859709286127;
                    } else {
                        current_block = 4848821149585347428;
                    }
                    match current_block {
                        14951089859709286127 => {}
                        _ => {
                            current_block = 11540785266911159237;
                        }
                    }
                }
                10 => {
                    if d == end2 {
                        if (*bufp).not_eol() == 0 {
                            current_block = 14951089859709286127;
                        } else {
                            current_block = 11540785266911159237;
                        }
                    } else if (if d == end1 {
                        *string2 as libc::c_int
                    } else {
                        *d as libc::c_int
                    }) == '\n' as i32 && (*bufp).newline_anchor() as libc::c_int != 0
                    {
                        current_block = 14951089859709286127;
                    } else {
                        current_block = 11540785266911159237;
                    }
                }
                11 => {
                    if d == (if size1 != 0 { string1 } else { string2 }) || size2 == 0 {
                        current_block = 14951089859709286127;
                    } else {
                        current_block = 11540785266911159237;
                    }
                }
                12 => {
                    if d == end2 {
                        current_block = 14951089859709286127;
                    } else {
                        current_block = 11540785266911159237;
                    }
                }
                16 => {
                    mcnt = *p as libc::c_int & 0o377 as libc::c_int;
                    mcnt
                        += (*p.offset(1 as libc::c_int as isize) as libc::c_schar
                            as libc::c_int) << 8 as libc::c_int;
                    p = p.offset(2 as libc::c_int as isize);
                    let mut destination_0: *mut libc::c_char = 0 as *mut libc::c_char;
                    let mut this_reg_0: s_reg_t = 0;
                    while ((fail_stack.size).wrapping_sub(fail_stack.avail)
                        as libc::c_ulong)
                        < (if 0 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_ulong
                        } else {
                            highest_active_reg
                                .wrapping_sub(lowest_active_reg)
                                .wrapping_add(1 as libc::c_int as libc::c_ulong)
                        })
                            .wrapping_mul(3 as libc::c_int as libc::c_ulong)
                            .wrapping_add(4 as libc::c_int as libc::c_ulong)
                    {
                        if if fail_stack.size
                            > (re_max_failures
                                * (5 as libc::c_int * 3 as libc::c_int + 4 as libc::c_int))
                                as libc::c_uint
                        {
                            0 as libc::c_int
                        } else {
                            let mut fresh127 = ::std::vec::from_elem(
                                0,
                                ((fail_stack.size << 1 as libc::c_int) as libc::c_ulong)
                                    .wrapping_mul(
                                        ::core::mem::size_of::<fail_stack_elt_t>() as libc::c_ulong,
                                    ) as usize,
                            );
                            destination_0 = fresh127.as_mut_ptr() as *mut libc::c_char;
                            memcpy(
                                destination_0 as *mut libc::c_void,
                                fail_stack.stack as *const libc::c_void,
                                (fail_stack.size as libc::c_ulong)
                                    .wrapping_mul(
                                        ::core::mem::size_of::<fail_stack_elt_t>() as libc::c_ulong,
                                    ),
                            );
                            fail_stack.stack = destination_0 as *mut fail_stack_elt_t;
                            (if (fail_stack.stack).is_null() {
                                0 as libc::c_int
                            } else {
                                fail_stack.size <<= 1 as libc::c_int;
                                1 as libc::c_int
                            })
                        } == 0
                        {
                            return -(2 as libc::c_int);
                        }
                    }
                    this_reg_0 = lowest_active_reg as s_reg_t;
                    while this_reg_0 as libc::c_ulong <= highest_active_reg {
                        let fresh128 = fail_stack.avail;
                        fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                        let ref mut fresh129 = (*(fail_stack.stack)
                            .offset(fresh128 as isize))
                            .pointer;
                        *fresh129 = *regstart.offset(this_reg_0 as isize)
                            as *mut libc::c_uchar;
                        let fresh130 = fail_stack.avail;
                        fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                        let ref mut fresh131 = (*(fail_stack.stack)
                            .offset(fresh130 as isize))
                            .pointer;
                        *fresh131 = *regend.offset(this_reg_0 as isize)
                            as *mut libc::c_uchar;
                        let fresh132 = fail_stack.avail;
                        fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                        *(fail_stack.stack).offset(fresh132 as isize) = (*reg_info
                            .offset(this_reg_0 as isize))
                            .word;
                        this_reg_0 += 1;
                        this_reg_0;
                    }
                    let fresh133 = fail_stack.avail;
                    fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                    (*(fail_stack.stack).offset(fresh133 as isize)).integer = lowest_active_reg
                        as libc::c_int;
                    let fresh134 = fail_stack.avail;
                    fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                    (*(fail_stack.stack).offset(fresh134 as isize)).integer = highest_active_reg
                        as libc::c_int;
                    let fresh135 = fail_stack.avail;
                    fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                    let ref mut fresh136 = (*(fail_stack.stack)
                        .offset(fresh135 as isize))
                        .pointer;
                    *fresh136 = p.offset(mcnt as isize);
                    let fresh137 = fail_stack.avail;
                    fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                    let ref mut fresh138 = (*(fail_stack.stack)
                        .offset(fresh137 as isize))
                        .pointer;
                    *fresh138 = 0 as *mut libc::c_void as *mut libc::c_uchar;
                    current_block = 14951089859709286127;
                }
                15 => {
                    current_block = 3120281088918102619;
                }
                18 => {
                    mcnt = *p as libc::c_int & 0o377 as libc::c_int;
                    mcnt
                        += (*p.offset(1 as libc::c_int as isize) as libc::c_schar
                            as libc::c_int) << 8 as libc::c_int;
                    p = p.offset(2 as libc::c_int as isize);
                    let mut p2: *mut libc::c_uchar = p;
                    loop {
                        if p2.offset(2 as libc::c_int as isize) < pend
                            && (re_opcode_t::from_libc_c_uint(*p2 as u32) as libc::c_uint
                                == re_opcode_t::stop_memory as libc::c_int as libc::c_uint
                                || re_opcode_t::from_libc_c_uint(*p2 as u32) as libc::c_uint
                                    == re_opcode_t::start_memory as libc::c_int as libc::c_uint)
                        {
                            p2 = p2.offset(3 as libc::c_int as isize);
                        } else {
                            if !(p2.offset(6 as libc::c_int as isize) < pend
                                && re_opcode_t::from_libc_c_uint(*p2 as u32) as libc::c_uint
                                    == re_opcode_t::dummy_failure_jump as libc::c_int
                                        as libc::c_uint)
                            {
                                break;
                            }
                            p2 = p2.offset(6 as libc::c_int as isize);
                        }
                    }
                    p1 = p.offset(mcnt as isize);
                    if p2 == pend {
                        *p.offset(-(3 as libc::c_int) as isize) = re_opcode_t::pop_failure_jump
                            as libc::c_int as libc::c_uchar;
                    } else if re_opcode_t::from_libc_c_uint(*p2 as u32) as libc::c_uint
                        == re_opcode_t::exactn as libc::c_int as libc::c_uint
                        || (*bufp).newline_anchor() as libc::c_int != 0
                            && re_opcode_t::from_libc_c_uint(*p2 as u32) as libc::c_uint
                                == re_opcode_t::endline as libc::c_int as libc::c_uint
                    {
                        let mut c_0: libc::c_uchar = (if *p2 as libc::c_int
                            == re_opcode_t::endline as libc::c_int as libc::c_uchar
                                as libc::c_int
                        {
                            '\n' as i32
                        } else {
                            *p2.offset(2 as libc::c_int as isize) as libc::c_int
                        }) as libc::c_uchar;
                        if re_opcode_t::from_libc_c_uint(
                            *p1.offset(3 as libc::c_int as isize) as u32,
                        ) as libc::c_uint
                            == re_opcode_t::exactn as libc::c_int as libc::c_uint
                            && *p1.offset(5 as libc::c_int as isize) as libc::c_int
                                != c_0 as libc::c_int
                        {
                            *p.offset(-(3 as libc::c_int) as isize) = re_opcode_t::pop_failure_jump
                                as libc::c_int as libc::c_uchar;
                        } else if re_opcode_t::from_libc_c_uint(
                            *p1.offset(3 as libc::c_int as isize) as u32,
                        ) as libc::c_uint
                            == re_opcode_t::charset as libc::c_int as libc::c_uint
                            || re_opcode_t::from_libc_c_uint(
                                *p1.offset(3 as libc::c_int as isize) as u32,
                            ) as libc::c_uint
                                == re_opcode_t::charset_not as libc::c_int as libc::c_uint
                        {
                            let mut not_0: libc::c_int = (re_opcode_t::from_libc_c_uint(
                                *p1.offset(3 as libc::c_int as isize) as u32,
                            ) as libc::c_uint
                                == re_opcode_t::charset_not as libc::c_int as libc::c_uint)
                                as libc::c_int;
                            if (c_0 as libc::c_int)
                                < (*p1.offset(4 as libc::c_int as isize) as libc::c_int
                                    * 8 as libc::c_int) as libc::c_uchar as libc::c_int
                                && *p1
                                    .offset(
                                        (5 as libc::c_int + c_0 as libc::c_int / 8 as libc::c_int)
                                            as isize,
                                    ) as libc::c_int
                                    & (1 as libc::c_int)
                                        << c_0 as libc::c_int % 8 as libc::c_int != 0
                            {
                                not_0 = (not_0 == 0) as libc::c_int;
                            }
                            if not_0 == 0 {
                                *p.offset(-(3 as libc::c_int) as isize) = re_opcode_t::pop_failure_jump
                                    as libc::c_int as libc::c_uchar;
                            }
                        }
                    } else if re_opcode_t::from_libc_c_uint(*p2 as u32) as libc::c_uint
                        == re_opcode_t::charset as libc::c_int as libc::c_uint
                    {
                        if re_opcode_t::from_libc_c_uint(
                            *p1.offset(3 as libc::c_int as isize) as u32,
                        ) as libc::c_uint
                            == re_opcode_t::exactn as libc::c_int as libc::c_uint
                            && !(*p2.offset(1 as libc::c_int as isize) as libc::c_int
                                * 8 as libc::c_int
                                > *p1.offset(4 as libc::c_int as isize) as libc::c_int
                                && *p2
                                    .offset(
                                        (2 as libc::c_int
                                            + *p1.offset(4 as libc::c_int as isize) as libc::c_int
                                                / 8 as libc::c_int) as isize,
                                    ) as libc::c_int
                                    & (1 as libc::c_int)
                                        << *p1.offset(4 as libc::c_int as isize) as libc::c_int
                                            % 8 as libc::c_int != 0)
                        {
                            *p.offset(-(3 as libc::c_int) as isize) = re_opcode_t::pop_failure_jump
                                as libc::c_int as libc::c_uchar;
                        } else if re_opcode_t::from_libc_c_uint(
                            *p1.offset(3 as libc::c_int as isize) as u32,
                        ) as libc::c_uint
                            == re_opcode_t::charset_not as libc::c_int as libc::c_uint
                        {
                            let mut idx: libc::c_int = 0;
                            idx = 0 as libc::c_int;
                            while idx
                                < *p2.offset(1 as libc::c_int as isize) as libc::c_int
                            {
                                if !(*p2.offset((2 as libc::c_int + idx) as isize)
                                    as libc::c_int == 0 as libc::c_int
                                    || idx
                                        < *p1.offset(4 as libc::c_int as isize) as libc::c_int
                                        && *p2.offset((2 as libc::c_int + idx) as isize)
                                            as libc::c_int
                                            & !(*p1.offset((5 as libc::c_int + idx) as isize)
                                                as libc::c_int) == 0 as libc::c_int)
                                {
                                    break;
                                }
                                idx += 1;
                                idx;
                            }
                            if idx
                                == *p2.offset(1 as libc::c_int as isize) as libc::c_int
                            {
                                *p.offset(-(3 as libc::c_int) as isize) = re_opcode_t::pop_failure_jump
                                    as libc::c_int as libc::c_uchar;
                            }
                        } else if re_opcode_t::from_libc_c_uint(
                            *p1.offset(3 as libc::c_int as isize) as u32,
                        ) as libc::c_uint
                            == re_opcode_t::charset as libc::c_int as libc::c_uint
                        {
                            let mut idx_0: libc::c_int = 0;
                            idx_0 = 0 as libc::c_int;
                            while idx_0
                                < *p2.offset(1 as libc::c_int as isize) as libc::c_int
                                && idx_0
                                    < *p1.offset(4 as libc::c_int as isize) as libc::c_int
                            {
                                if *p2.offset((2 as libc::c_int + idx_0) as isize)
                                    as libc::c_int
                                    & *p1.offset((5 as libc::c_int + idx_0) as isize)
                                        as libc::c_int != 0 as libc::c_int
                                {
                                    break;
                                }
                                idx_0 += 1;
                                idx_0;
                            }
                            if idx_0
                                == *p2.offset(1 as libc::c_int as isize) as libc::c_int
                                || idx_0
                                    == *p1.offset(4 as libc::c_int as isize) as libc::c_int
                            {
                                *p.offset(-(3 as libc::c_int) as isize) = re_opcode_t::pop_failure_jump
                                    as libc::c_int as libc::c_uchar;
                            }
                        }
                    }
                    p = p.offset(-(2 as libc::c_int as isize));
                    if re_opcode_t::from_libc_c_uint(
                        *p.offset(-(1 as libc::c_int) as isize) as u32,
                    ) as libc::c_uint
                        != re_opcode_t::pop_failure_jump as libc::c_int as libc::c_uint
                    {
                        *p.offset(-(1 as libc::c_int) as isize) = re_opcode_t::jump
                            as libc::c_int as libc::c_uchar;
                        current_block = 9984103270937231169;
                    } else {
                        current_block = 2082904494386641978;
                    }
                }
                17 => {
                    current_block = 2082904494386641978;
                }
                13 | 14 => {
                    current_block = 9984103270937231169;
                }
                19 => {
                    let mut destination_2: *mut libc::c_char = 0 as *mut libc::c_char;
                    let mut this_reg_3: s_reg_t = 0;
                    while ((fail_stack.size).wrapping_sub(fail_stack.avail)
                        as libc::c_ulong)
                        < (if 0 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_ulong
                        } else {
                            highest_active_reg
                                .wrapping_sub(lowest_active_reg)
                                .wrapping_add(1 as libc::c_int as libc::c_ulong)
                        })
                            .wrapping_mul(3 as libc::c_int as libc::c_ulong)
                            .wrapping_add(4 as libc::c_int as libc::c_ulong)
                    {
                        if if fail_stack.size
                            > (re_max_failures
                                * (5 as libc::c_int * 3 as libc::c_int + 4 as libc::c_int))
                                as libc::c_uint
                        {
                            0 as libc::c_int
                        } else {
                            let mut fresh155 = ::std::vec::from_elem(
                                0,
                                ((fail_stack.size << 1 as libc::c_int) as libc::c_ulong)
                                    .wrapping_mul(
                                        ::core::mem::size_of::<fail_stack_elt_t>() as libc::c_ulong,
                                    ) as usize,
                            );
                            destination_2 = fresh155.as_mut_ptr() as *mut libc::c_char;
                            memcpy(
                                destination_2 as *mut libc::c_void,
                                fail_stack.stack as *const libc::c_void,
                                (fail_stack.size as libc::c_ulong)
                                    .wrapping_mul(
                                        ::core::mem::size_of::<fail_stack_elt_t>() as libc::c_ulong,
                                    ),
                            );
                            fail_stack.stack = destination_2 as *mut fail_stack_elt_t;
                            (if (fail_stack.stack).is_null() {
                                0 as libc::c_int
                            } else {
                                fail_stack.size <<= 1 as libc::c_int;
                                1 as libc::c_int
                            })
                        } == 0
                        {
                            return -(2 as libc::c_int);
                        }
                    }
                    this_reg_3 = lowest_active_reg as s_reg_t;
                    while this_reg_3 as libc::c_ulong <= highest_active_reg {
                        let fresh156 = fail_stack.avail;
                        fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                        let ref mut fresh157 = (*(fail_stack.stack)
                            .offset(fresh156 as isize))
                            .pointer;
                        *fresh157 = *regstart.offset(this_reg_3 as isize)
                            as *mut libc::c_uchar;
                        let fresh158 = fail_stack.avail;
                        fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                        let ref mut fresh159 = (*(fail_stack.stack)
                            .offset(fresh158 as isize))
                            .pointer;
                        *fresh159 = *regend.offset(this_reg_3 as isize)
                            as *mut libc::c_uchar;
                        let fresh160 = fail_stack.avail;
                        fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                        *(fail_stack.stack).offset(fresh160 as isize) = (*reg_info
                            .offset(this_reg_3 as isize))
                            .word;
                        this_reg_3 += 1;
                        this_reg_3;
                    }
                    let fresh161 = fail_stack.avail;
                    fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                    (*(fail_stack.stack).offset(fresh161 as isize)).integer = lowest_active_reg
                        as libc::c_int;
                    let fresh162 = fail_stack.avail;
                    fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                    (*(fail_stack.stack).offset(fresh162 as isize)).integer = highest_active_reg
                        as libc::c_int;
                    let fresh163 = fail_stack.avail;
                    fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                    let ref mut fresh164 = (*(fail_stack.stack)
                        .offset(fresh163 as isize))
                        .pointer;
                    *fresh164 = 0 as *mut libc::c_uchar;
                    let fresh165 = fail_stack.avail;
                    fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                    let ref mut fresh166 = (*(fail_stack.stack)
                        .offset(fresh165 as isize))
                        .pointer;
                    *fresh166 = 0 as *mut libc::c_uchar;
                    current_block = 9984103270937231169;
                }
                20 => {
                    let mut destination_3: *mut libc::c_char = 0 as *mut libc::c_char;
                    let mut this_reg_4: s_reg_t = 0;
                    while ((fail_stack.size).wrapping_sub(fail_stack.avail)
                        as libc::c_ulong)
                        < (if 0 as libc::c_int != 0 {
                            0 as libc::c_int as libc::c_ulong
                        } else {
                            highest_active_reg
                                .wrapping_sub(lowest_active_reg)
                                .wrapping_add(1 as libc::c_int as libc::c_ulong)
                        })
                            .wrapping_mul(3 as libc::c_int as libc::c_ulong)
                            .wrapping_add(4 as libc::c_int as libc::c_ulong)
                    {
                        if if fail_stack.size
                            > (re_max_failures
                                * (5 as libc::c_int * 3 as libc::c_int + 4 as libc::c_int))
                                as libc::c_uint
                        {
                            0 as libc::c_int
                        } else {
                            let mut fresh167 = ::std::vec::from_elem(
                                0,
                                ((fail_stack.size << 1 as libc::c_int) as libc::c_ulong)
                                    .wrapping_mul(
                                        ::core::mem::size_of::<fail_stack_elt_t>() as libc::c_ulong,
                                    ) as usize,
                            );
                            destination_3 = fresh167.as_mut_ptr() as *mut libc::c_char;
                            memcpy(
                                destination_3 as *mut libc::c_void,
                                fail_stack.stack as *const libc::c_void,
                                (fail_stack.size as libc::c_ulong)
                                    .wrapping_mul(
                                        ::core::mem::size_of::<fail_stack_elt_t>() as libc::c_ulong,
                                    ),
                            );
                            fail_stack.stack = destination_3 as *mut fail_stack_elt_t;
                            (if (fail_stack.stack).is_null() {
                                0 as libc::c_int
                            } else {
                                fail_stack.size <<= 1 as libc::c_int;
                                1 as libc::c_int
                            })
                        } == 0
                        {
                            return -(2 as libc::c_int);
                        }
                    }
                    this_reg_4 = lowest_active_reg as s_reg_t;
                    while this_reg_4 as libc::c_ulong <= highest_active_reg {
                        let fresh168 = fail_stack.avail;
                        fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                        let ref mut fresh169 = (*(fail_stack.stack)
                            .offset(fresh168 as isize))
                            .pointer;
                        *fresh169 = *regstart.offset(this_reg_4 as isize)
                            as *mut libc::c_uchar;
                        let fresh170 = fail_stack.avail;
                        fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                        let ref mut fresh171 = (*(fail_stack.stack)
                            .offset(fresh170 as isize))
                            .pointer;
                        *fresh171 = *regend.offset(this_reg_4 as isize)
                            as *mut libc::c_uchar;
                        let fresh172 = fail_stack.avail;
                        fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                        *(fail_stack.stack).offset(fresh172 as isize) = (*reg_info
                            .offset(this_reg_4 as isize))
                            .word;
                        this_reg_4 += 1;
                        this_reg_4;
                    }
                    let fresh173 = fail_stack.avail;
                    fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                    (*(fail_stack.stack).offset(fresh173 as isize)).integer = lowest_active_reg
                        as libc::c_int;
                    let fresh174 = fail_stack.avail;
                    fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                    (*(fail_stack.stack).offset(fresh174 as isize)).integer = highest_active_reg
                        as libc::c_int;
                    let fresh175 = fail_stack.avail;
                    fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                    let ref mut fresh176 = (*(fail_stack.stack)
                        .offset(fresh175 as isize))
                        .pointer;
                    *fresh176 = 0 as *mut libc::c_uchar;
                    let fresh177 = fail_stack.avail;
                    fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                    let ref mut fresh178 = (*(fail_stack.stack)
                        .offset(fresh177 as isize))
                        .pointer;
                    *fresh178 = 0 as *mut libc::c_uchar;
                    current_block = 14951089859709286127;
                }
                21 => {
                    mcnt = *p.offset(2 as libc::c_int as isize) as libc::c_int
                        & 0o377 as libc::c_int;
                    mcnt
                        += (*p
                            .offset(2 as libc::c_int as isize)
                            .offset(1 as libc::c_int as isize) as libc::c_schar
                            as libc::c_int) << 8 as libc::c_int;
                    if mcnt > 0 as libc::c_int {
                        mcnt -= 1;
                        mcnt;
                        p = p.offset(2 as libc::c_int as isize);
                        *p.offset(0 as libc::c_int as isize) = (mcnt
                            & 0o377 as libc::c_int) as libc::c_uchar;
                        *p.offset(1 as libc::c_int as isize) = (mcnt >> 8 as libc::c_int)
                            as libc::c_uchar;
                        p = p.offset(2 as libc::c_int as isize);
                        current_block = 14951089859709286127;
                    } else if mcnt == 0 as libc::c_int {
                        *p.offset(2 as libc::c_int as isize) = re_opcode_t::no_op
                            as libc::c_int as libc::c_uchar;
                        *p.offset(3 as libc::c_int as isize) = re_opcode_t::no_op
                            as libc::c_int as libc::c_uchar;
                        current_block = 3120281088918102619;
                    } else {
                        current_block = 14951089859709286127;
                    }
                }
                22 => {
                    mcnt = *p.offset(2 as libc::c_int as isize) as libc::c_int
                        & 0o377 as libc::c_int;
                    mcnt
                        += (*p
                            .offset(2 as libc::c_int as isize)
                            .offset(1 as libc::c_int as isize) as libc::c_schar
                            as libc::c_int) << 8 as libc::c_int;
                    if mcnt != 0 {
                        mcnt -= 1;
                        mcnt;
                        *p
                            .offset(2 as libc::c_int as isize)
                            .offset(0 as libc::c_int as isize) = (mcnt
                            & 0o377 as libc::c_int) as libc::c_uchar;
                        *p
                            .offset(2 as libc::c_int as isize)
                            .offset(1 as libc::c_int as isize) = (mcnt
                            >> 8 as libc::c_int) as libc::c_uchar;
                        current_block = 9984103270937231169;
                    } else {
                        p = p.offset(4 as libc::c_int as isize);
                        current_block = 14951089859709286127;
                    }
                }
                23 => {
                    mcnt = *p as libc::c_int & 0o377 as libc::c_int;
                    mcnt
                        += (*p.offset(1 as libc::c_int as isize) as libc::c_schar
                            as libc::c_int) << 8 as libc::c_int;
                    p = p.offset(2 as libc::c_int as isize);
                    p1 = p.offset(mcnt as isize);
                    mcnt = *p as libc::c_int & 0o377 as libc::c_int;
                    mcnt
                        += (*p.offset(1 as libc::c_int as isize) as libc::c_schar
                            as libc::c_int) << 8 as libc::c_int;
                    p = p.offset(2 as libc::c_int as isize);
                    *p1.offset(0 as libc::c_int as isize) = (mcnt & 0o377 as libc::c_int)
                        as libc::c_uchar;
                    *p1.offset(1 as libc::c_int as isize) = (mcnt >> 8 as libc::c_int)
                        as libc::c_uchar;
                    current_block = 14951089859709286127;
                }
                28 => {
                    let mut prevchar: boolean = 0;
                    let mut thischar: boolean = 0;
                    if d == (if size1 != 0 { string1 } else { string2 }) || size2 == 0
                        || d == end2
                    {
                        current_block = 14951089859709286127;
                    } else {
                        prevchar = (re_syntax_table[(if d
                            .offset(-(1 as libc::c_int as isize)) == end1
                        {
                            *string2 as libc::c_int
                        } else {
                            (if d.offset(-(1 as libc::c_int as isize))
                                == string2.offset(-(1 as libc::c_int as isize))
                            {
                                *end1.offset(-(1 as libc::c_int as isize)) as libc::c_int
                            } else {
                                *d.offset(-(1 as libc::c_int as isize)) as libc::c_int
                            })
                        }) as usize] as libc::c_int == 1 as libc::c_int) as libc::c_int
                            as boolean;
                        thischar = (re_syntax_table[(if d == end1 {
                            *string2 as libc::c_int
                        } else {
                            (if d == string2.offset(-(1 as libc::c_int as isize)) {
                                *end1.offset(-(1 as libc::c_int as isize)) as libc::c_int
                            } else {
                                *d as libc::c_int
                            })
                        }) as usize] as libc::c_int == 1 as libc::c_int) as libc::c_int
                            as boolean;
                        if prevchar as libc::c_int != thischar as libc::c_int {
                            current_block = 14951089859709286127;
                        } else {
                            current_block = 11540785266911159237;
                        }
                    }
                }
                29 => {
                    let mut prevchar_0: boolean = 0;
                    let mut thischar_0: boolean = 0;
                    if d == (if size1 != 0 { string1 } else { string2 }) || size2 == 0
                        || d == end2
                    {
                        current_block = 11540785266911159237;
                    } else {
                        prevchar_0 = (re_syntax_table[(if d
                            .offset(-(1 as libc::c_int as isize)) == end1
                        {
                            *string2 as libc::c_int
                        } else {
                            (if d.offset(-(1 as libc::c_int as isize))
                                == string2.offset(-(1 as libc::c_int as isize))
                            {
                                *end1.offset(-(1 as libc::c_int as isize)) as libc::c_int
                            } else {
                                *d.offset(-(1 as libc::c_int as isize)) as libc::c_int
                            })
                        }) as usize] as libc::c_int == 1 as libc::c_int) as libc::c_int
                            as boolean;
                        thischar_0 = (re_syntax_table[(if d == end1 {
                            *string2 as libc::c_int
                        } else {
                            (if d == string2.offset(-(1 as libc::c_int as isize)) {
                                *end1.offset(-(1 as libc::c_int as isize)) as libc::c_int
                            } else {
                                *d as libc::c_int
                            })
                        }) as usize] as libc::c_int == 1 as libc::c_int) as libc::c_int
                            as boolean;
                        if prevchar_0 as libc::c_int != thischar_0 as libc::c_int {
                            current_block = 11540785266911159237;
                        } else {
                            current_block = 14951089859709286127;
                        }
                    }
                }
                26 => {
                    if re_syntax_table[(if d == end1 {
                        *string2 as libc::c_int
                    } else {
                        (if d == string2.offset(-(1 as libc::c_int as isize)) {
                            *end1.offset(-(1 as libc::c_int as isize)) as libc::c_int
                        } else {
                            *d as libc::c_int
                        })
                    }) as usize] as libc::c_int == 1 as libc::c_int
                        && (d == (if size1 != 0 { string1 } else { string2 })
                            || size2 == 0
                            || !(re_syntax_table[(if d
                                .offset(-(1 as libc::c_int as isize)) == end1
                            {
                                *string2 as libc::c_int
                            } else {
                                (if d.offset(-(1 as libc::c_int as isize))
                                    == string2.offset(-(1 as libc::c_int as isize))
                                {
                                    *end1.offset(-(1 as libc::c_int as isize)) as libc::c_int
                                } else {
                                    *d.offset(-(1 as libc::c_int as isize)) as libc::c_int
                                })
                            }) as usize] as libc::c_int == 1 as libc::c_int))
                    {
                        current_block = 14951089859709286127;
                    } else {
                        current_block = 11540785266911159237;
                    }
                }
                27 => {
                    if !(d == (if size1 != 0 { string1 } else { string2 }) || size2 == 0)
                        && re_syntax_table[(if d.offset(-(1 as libc::c_int as isize))
                            == end1
                        {
                            *string2 as libc::c_int
                        } else {
                            (if d.offset(-(1 as libc::c_int as isize))
                                == string2.offset(-(1 as libc::c_int as isize))
                            {
                                *end1.offset(-(1 as libc::c_int as isize)) as libc::c_int
                            } else {
                                *d.offset(-(1 as libc::c_int as isize)) as libc::c_int
                            })
                        }) as usize] as libc::c_int == 1 as libc::c_int
                        && (!(re_syntax_table[(if d == end1 {
                            *string2 as libc::c_int
                        } else {
                            (if d == string2.offset(-(1 as libc::c_int as isize)) {
                                *end1.offset(-(1 as libc::c_int as isize)) as libc::c_int
                            } else {
                                *d as libc::c_int
                            })
                        }) as usize] as libc::c_int == 1 as libc::c_int) || d == end2)
                    {
                        current_block = 14951089859709286127;
                    } else {
                        current_block = 11540785266911159237;
                    }
                }
                24 => {
                    loop {
                        if !(d == dend) {
                            current_block = 7444958293573611186;
                            break;
                        }
                        if dend == end_match_2 {
                            current_block = 11540785266911159237;
                            break;
                        }
                        d = string2;
                        dend = end_match_2;
                    }
                    match current_block {
                        11540785266911159237 => {}
                        _ => {
                            if !(re_syntax_table[(if d == end1 {
                                *string2 as libc::c_int
                            } else {
                                (if d == string2.offset(-(1 as libc::c_int as isize)) {
                                    *end1.offset(-(1 as libc::c_int as isize)) as libc::c_int
                                } else {
                                    *d as libc::c_int
                                })
                            }) as usize] as libc::c_int == 1 as libc::c_int)
                            {
                                current_block = 11540785266911159237;
                            } else {
                                if set_regs_matched_done == 0 {
                                    let mut r_5: active_reg_t = 0;
                                    set_regs_matched_done = 1 as libc::c_int;
                                    r_5 = lowest_active_reg;
                                    while r_5 <= highest_active_reg {
                                        let ref mut fresh180 = (*reg_info.offset(r_5 as isize))
                                            .bits;
                                        let ref mut fresh179 = (*reg_info.offset(r_5 as isize))
                                            .bits;
                                        (*fresh179)
                                            .set_ever_matched_something(
                                                1 as libc::c_int as libc::c_uint,
                                            );
                                        (*fresh180)
                                            .set_matched_something(
                                                (*fresh179).ever_matched_something(),
                                            );
                                        r_5 = r_5.wrapping_add(1);
                                        r_5;
                                    }
                                }
                                d = d.offset(1);
                                d;
                                current_block = 14951089859709286127;
                            }
                        }
                    }
                }
                25 => {
                    loop {
                        if !(d == dend) {
                            current_block = 11977818353463220333;
                            break;
                        }
                        if dend == end_match_2 {
                            current_block = 11540785266911159237;
                            break;
                        }
                        d = string2;
                        dend = end_match_2;
                    }
                    match current_block {
                        11540785266911159237 => {}
                        _ => {
                            if re_syntax_table[(if d == end1 {
                                *string2 as libc::c_int
                            } else {
                                (if d == string2.offset(-(1 as libc::c_int as isize)) {
                                    *end1.offset(-(1 as libc::c_int as isize)) as libc::c_int
                                } else {
                                    *d as libc::c_int
                                })
                            }) as usize] as libc::c_int == 1 as libc::c_int
                            {
                                current_block = 11540785266911159237;
                            } else {
                                if set_regs_matched_done == 0 {
                                    let mut r_6: active_reg_t = 0;
                                    set_regs_matched_done = 1 as libc::c_int;
                                    r_6 = lowest_active_reg;
                                    while r_6 <= highest_active_reg {
                                        let ref mut fresh182 = (*reg_info.offset(r_6 as isize))
                                            .bits;
                                        let ref mut fresh181 = (*reg_info.offset(r_6 as isize))
                                            .bits;
                                        (*fresh181)
                                            .set_ever_matched_something(
                                                1 as libc::c_int as libc::c_uint,
                                            );
                                        (*fresh182)
                                            .set_matched_something(
                                                (*fresh181).ever_matched_something(),
                                            );
                                        r_6 = r_6.wrapping_add(1);
                                        r_6;
                                    }
                                }
                                d = d.offset(1);
                                d;
                                current_block = 14951089859709286127;
                            }
                        }
                    }
                }
                _ => {
                    abort();
                }
            }
            match current_block {
                11540785266911159237 => {}
                _ => {
                    match current_block {
                        2082904494386641978 => {
                            let mut dummy_low_reg: active_reg_t = 0;
                            let mut dummy_high_reg: active_reg_t = 0;
                            let mut pdummy: *mut libc::c_uchar = 0 as *mut libc::c_uchar;
                            let mut sdummy: *const libc::c_char = 0
                                as *const libc::c_char;
                            let mut this_reg_2: s_reg_t = 0;
                            let mut string_temp: *const libc::c_uchar = 0
                                as *const libc::c_uchar;
                            fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
                            string_temp = (*(fail_stack.stack)
                                .offset(fail_stack.avail as isize))
                                .pointer;
                            if !string_temp.is_null() {
                                sdummy = string_temp as *const libc::c_char;
                            }
                            fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
                            pdummy = (*(fail_stack.stack)
                                .offset(fail_stack.avail as isize))
                                .pointer;
                            fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
                            dummy_high_reg = (*(fail_stack.stack)
                                .offset(fail_stack.avail as isize))
                                .integer as active_reg_t;
                            fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
                            dummy_low_reg = (*(fail_stack.stack)
                                .offset(fail_stack.avail as isize))
                                .integer as active_reg_t;
                            this_reg_2 = dummy_high_reg as s_reg_t;
                            while this_reg_2 as libc::c_ulong >= dummy_low_reg {
                                fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
                                (*reg_info_dummy.offset(this_reg_2 as isize)).word = *(fail_stack
                                    .stack)
                                    .offset(fail_stack.avail as isize);
                                fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
                                let ref mut fresh151 = *reg_dummy
                                    .offset(this_reg_2 as isize);
                                *fresh151 = (*(fail_stack.stack)
                                    .offset(fail_stack.avail as isize))
                                    .pointer as *const libc::c_char;
                                fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
                                let ref mut fresh152 = *reg_dummy
                                    .offset(this_reg_2 as isize);
                                *fresh152 = (*(fail_stack.stack)
                                    .offset(fail_stack.avail as isize))
                                    .pointer as *const libc::c_char;
                                this_reg_2 -= 1;
                                this_reg_2;
                            }
                            set_regs_matched_done = 0 as libc::c_int;
                            current_block = 9984103270937231169;
                        }
                        3120281088918102619 => {
                            mcnt = *p as libc::c_int & 0o377 as libc::c_int;
                            mcnt
                                += (*p.offset(1 as libc::c_int as isize) as libc::c_schar
                                    as libc::c_int) << 8 as libc::c_int;
                            p = p.offset(2 as libc::c_int as isize);
                            p1 = p;
                            while p1 < pend
                                && re_opcode_t::from_libc_c_uint(*p1 as u32) as libc::c_uint
                                    == re_opcode_t::no_op as libc::c_int as libc::c_uint
                            {
                                p1 = p1.offset(1);
                                p1;
                            }
                            if p1 < pend
                                && re_opcode_t::from_libc_c_uint(*p1 as u32) as libc::c_uint
                                    == re_opcode_t::start_memory as libc::c_int as libc::c_uint
                            {
                                highest_active_reg = (*p1.offset(1 as libc::c_int as isize)
                                    as libc::c_int
                                    + *p1.offset(2 as libc::c_int as isize) as libc::c_int)
                                    as active_reg_t;
                                if lowest_active_reg
                                    == (((1 as libc::c_int) << 8 as libc::c_int)
                                        + 1 as libc::c_int) as libc::c_ulong
                                {
                                    lowest_active_reg = *p1.offset(1 as libc::c_int as isize)
                                        as active_reg_t;
                                }
                            }
                            let mut destination_1: *mut libc::c_char = 0
                                as *mut libc::c_char;
                            let mut this_reg_1: s_reg_t = 0;
                            while ((fail_stack.size).wrapping_sub(fail_stack.avail)
                                as libc::c_ulong)
                                < (if 0 as libc::c_int != 0 {
                                    0 as libc::c_int as libc::c_ulong
                                } else {
                                    highest_active_reg
                                        .wrapping_sub(lowest_active_reg)
                                        .wrapping_add(1 as libc::c_int as libc::c_ulong)
                                })
                                    .wrapping_mul(3 as libc::c_int as libc::c_ulong)
                                    .wrapping_add(4 as libc::c_int as libc::c_ulong)
                            {
                                if if fail_stack.size
                                    > (re_max_failures
                                        * (5 as libc::c_int * 3 as libc::c_int + 4 as libc::c_int))
                                        as libc::c_uint
                                {
                                    0 as libc::c_int
                                } else {
                                    let mut fresh139 = ::std::vec::from_elem(
                                        0,
                                        ((fail_stack.size << 1 as libc::c_int) as libc::c_ulong)
                                            .wrapping_mul(
                                                ::core::mem::size_of::<fail_stack_elt_t>() as libc::c_ulong,
                                            ) as usize,
                                    );
                                    destination_1 = fresh139.as_mut_ptr() as *mut libc::c_char;
                                    memcpy(
                                        destination_1 as *mut libc::c_void,
                                        fail_stack.stack as *const libc::c_void,
                                        (fail_stack.size as libc::c_ulong)
                                            .wrapping_mul(
                                                ::core::mem::size_of::<fail_stack_elt_t>() as libc::c_ulong,
                                            ),
                                    );
                                    fail_stack.stack = destination_1 as *mut fail_stack_elt_t;
                                    (if (fail_stack.stack).is_null() {
                                        0 as libc::c_int
                                    } else {
                                        fail_stack.size <<= 1 as libc::c_int;
                                        1 as libc::c_int
                                    })
                                } == 0
                                {
                                    return -(2 as libc::c_int);
                                }
                            }
                            this_reg_1 = lowest_active_reg as s_reg_t;
                            while this_reg_1 as libc::c_ulong <= highest_active_reg {
                                let fresh140 = fail_stack.avail;
                                fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                                let ref mut fresh141 = (*(fail_stack.stack)
                                    .offset(fresh140 as isize))
                                    .pointer;
                                *fresh141 = *regstart.offset(this_reg_1 as isize)
                                    as *mut libc::c_uchar;
                                let fresh142 = fail_stack.avail;
                                fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                                let ref mut fresh143 = (*(fail_stack.stack)
                                    .offset(fresh142 as isize))
                                    .pointer;
                                *fresh143 = *regend.offset(this_reg_1 as isize)
                                    as *mut libc::c_uchar;
                                let fresh144 = fail_stack.avail;
                                fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                                *(fail_stack.stack).offset(fresh144 as isize) = (*reg_info
                                    .offset(this_reg_1 as isize))
                                    .word;
                                this_reg_1 += 1;
                                this_reg_1;
                            }
                            let fresh145 = fail_stack.avail;
                            fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                            (*(fail_stack.stack).offset(fresh145 as isize)).integer = lowest_active_reg
                                as libc::c_int;
                            let fresh146 = fail_stack.avail;
                            fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                            (*(fail_stack.stack).offset(fresh146 as isize)).integer = highest_active_reg
                                as libc::c_int;
                            let fresh147 = fail_stack.avail;
                            fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                            let ref mut fresh148 = (*(fail_stack.stack)
                                .offset(fresh147 as isize))
                                .pointer;
                            *fresh148 = p.offset(mcnt as isize);
                            let fresh149 = fail_stack.avail;
                            fail_stack.avail = (fail_stack.avail).wrapping_add(1);
                            let ref mut fresh150 = (*(fail_stack.stack)
                                .offset(fresh149 as isize))
                                .pointer;
                            *fresh150 = d as *mut libc::c_uchar;
                            current_block = 14951089859709286127;
                        }
                        _ => {}
                    }
                    match current_block {
                        9984103270937231169 => {
                            mcnt = *p as libc::c_int & 0o377 as libc::c_int;
                            mcnt
                                += (*p.offset(1 as libc::c_int as isize) as libc::c_schar
                                    as libc::c_int) << 8 as libc::c_int;
                            p = p.offset(2 as libc::c_int as isize);
                            p = p.offset(mcnt as isize);
                        }
                        _ => {}
                    }
                    continue;
                }
            }
        }
        loop {
            if !(fail_stack.avail == 0 as libc::c_int as libc::c_uint) {
                let mut this_reg_5: s_reg_t = 0;
                let mut string_temp_0: *const libc::c_uchar = 0 as *const libc::c_uchar;
                fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
                string_temp_0 = (*(fail_stack.stack).offset(fail_stack.avail as isize))
                    .pointer;
                if !string_temp_0.is_null() {
                    d = string_temp_0 as *const libc::c_char;
                }
                fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
                p = (*(fail_stack.stack).offset(fail_stack.avail as isize)).pointer;
                fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
                highest_active_reg = (*(fail_stack.stack)
                    .offset(fail_stack.avail as isize))
                    .integer as active_reg_t;
                fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
                lowest_active_reg = (*(fail_stack.stack)
                    .offset(fail_stack.avail as isize))
                    .integer as active_reg_t;
                this_reg_5 = highest_active_reg as s_reg_t;
                while this_reg_5 as libc::c_ulong >= lowest_active_reg {
                    fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
                    (*reg_info.offset(this_reg_5 as isize)).word = *(fail_stack.stack)
                        .offset(fail_stack.avail as isize);
                    fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
                    let ref mut fresh183 = *regend.offset(this_reg_5 as isize);
                    *fresh183 = (*(fail_stack.stack).offset(fail_stack.avail as isize))
                        .pointer as *const libc::c_char;
                    fail_stack.avail = (fail_stack.avail).wrapping_sub(1);
                    let ref mut fresh184 = *regstart.offset(this_reg_5 as isize);
                    *fresh184 = (*(fail_stack.stack).offset(fail_stack.avail as isize))
                        .pointer as *const libc::c_char;
                    this_reg_5 -= 1;
                    this_reg_5;
                }
                set_regs_matched_done = 0 as libc::c_int;
                if p.is_null() {
                    continue;
                }
                if !(p < pend) {
                    break;
                }
                let mut is_a_jump_n_0: boolean = 0 as libc::c_int as boolean;
                match re_opcode_t::from_libc_c_uint(*p as u32) as libc::c_uint {
                    22 => {
                        is_a_jump_n_0 = 1 as libc::c_int as boolean;
                    }
                    18 | 17 | 13 => {}
                    _ => {
                        break;
                    }
                }
                p1 = p.offset(1 as libc::c_int as isize);
                mcnt = *p1 as libc::c_int & 0o377 as libc::c_int;
                mcnt
                    += (*p1.offset(1 as libc::c_int as isize) as libc::c_schar
                        as libc::c_int) << 8 as libc::c_int;
                p1 = p1.offset(2 as libc::c_int as isize);
                p1 = p1.offset(mcnt as isize);
                if !(is_a_jump_n_0 as libc::c_int != 0
                    && re_opcode_t::from_libc_c_uint(*p1 as u32) as libc::c_uint
                        == re_opcode_t::succeed_n as libc::c_int as libc::c_uint
                    || is_a_jump_n_0 == 0
                        && re_opcode_t::from_libc_c_uint(*p1 as u32) as libc::c_uint
                            == re_opcode_t::on_failure_jump as libc::c_int
                                as libc::c_uint)
                {
                    break;
                }
            } else if best_regs_set != 0 {
                current_block = 8602574157404971894;
                break 's_497;
            } else {
                current_block = 15618123396904500078;
                break 's_497;
            }
        }
        if d >= string1 && d <= end1 {
            dend = end_match_1;
        }
    }
    match current_block {
        8602574157404971894 => {
            d = match_end;
            dend = if d >= string1 && d <= end1 { end_match_1 } else { end_match_2 };
            mcnt = 1 as libc::c_int;
            while (mcnt as libc::c_uint as libc::c_ulong) < num_regs {
                let ref mut fresh84 = *regstart.offset(mcnt as isize);
                *fresh84 = *best_regstart.offset(mcnt as isize);
                let ref mut fresh85 = *regend.offset(mcnt as isize);
                *fresh85 = *best_regend.offset(mcnt as isize);
                mcnt += 1;
                mcnt;
            }
        }
        15618123396904500078 => {
            !regstart.is_null();
            regstart = 0 as *mut *const libc::c_char;
            !regend.is_null();
            regend = 0 as *mut *const libc::c_char;
            !old_regstart.is_null();
            old_regstart = 0 as *mut *const libc::c_char;
            !old_regend.is_null();
            old_regend = 0 as *mut *const libc::c_char;
            !best_regstart.is_null();
            best_regstart = 0 as *mut *const libc::c_char;
            !best_regend.is_null();
            best_regend = 0 as *mut *const libc::c_char;
            !reg_info.is_null();
            reg_info = 0 as *mut register_info_type;
            !reg_dummy.is_null();
            reg_dummy = 0 as *mut *const libc::c_char;
            !reg_info_dummy.is_null();
            reg_info_dummy = 0 as *mut register_info_type;
            return -(1 as libc::c_int);
        }
        _ => {}
    }
    if !regs.is_null() && (*bufp).no_sub() == 0 {
        if (*bufp).regs_allocated() as libc::c_int == 0 as libc::c_int {
            (*regs).num_regs = (if 30 as libc::c_int as libc::c_ulong
                > num_regs.wrapping_add(1 as libc::c_int as libc::c_ulong)
            {
                30 as libc::c_int as libc::c_ulong
            } else {
                num_regs.wrapping_add(1 as libc::c_int as libc::c_ulong)
            }) as libc::c_uint;
            (*regs).start = malloc(
                ((*regs).num_regs as libc::c_ulong)
                    .wrapping_mul(::core::mem::size_of::<regoff_t>() as libc::c_ulong),
            ) as *mut regoff_t;
            (*regs).end = malloc(
                ((*regs).num_regs as libc::c_ulong)
                    .wrapping_mul(::core::mem::size_of::<regoff_t>() as libc::c_ulong),
            ) as *mut regoff_t;
            if ((*regs).start).is_null() || ((*regs).end).is_null() {
                !regstart.is_null();
                regstart = 0 as *mut *const libc::c_char;
                !regend.is_null();
                regend = 0 as *mut *const libc::c_char;
                !old_regstart.is_null();
                old_regstart = 0 as *mut *const libc::c_char;
                !old_regend.is_null();
                old_regend = 0 as *mut *const libc::c_char;
                !best_regstart.is_null();
                best_regstart = 0 as *mut *const libc::c_char;
                !best_regend.is_null();
                best_regend = 0 as *mut *const libc::c_char;
                !reg_info.is_null();
                reg_info = 0 as *mut register_info_type;
                !reg_dummy.is_null();
                reg_dummy = 0 as *mut *const libc::c_char;
                !reg_info_dummy.is_null();
                reg_info_dummy = 0 as *mut register_info_type;
                return -(2 as libc::c_int);
            }
            (*bufp).set_regs_allocated(1 as libc::c_int as libc::c_uint);
        } else if (*bufp).regs_allocated() as libc::c_int == 1 as libc::c_int {
            if ((*regs).num_regs as libc::c_ulong)
                < num_regs.wrapping_add(1 as libc::c_int as libc::c_ulong)
            {
                (*regs).num_regs = num_regs
                    .wrapping_add(1 as libc::c_int as libc::c_ulong) as libc::c_uint;
                (*regs).start = realloc(
                    (*regs).start as *mut libc::c_void,
                    ((*regs).num_regs as libc::c_ulong)
                        .wrapping_mul(
                            ::core::mem::size_of::<regoff_t>() as libc::c_ulong,
                        ),
                ) as *mut regoff_t;
                (*regs).end = realloc(
                    (*regs).end as *mut libc::c_void,
                    ((*regs).num_regs as libc::c_ulong)
                        .wrapping_mul(
                            ::core::mem::size_of::<regoff_t>() as libc::c_ulong,
                        ),
                ) as *mut regoff_t;
                if ((*regs).start).is_null() || ((*regs).end).is_null() {
                    !regstart.is_null();
                    regstart = 0 as *mut *const libc::c_char;
                    !regend.is_null();
                    regend = 0 as *mut *const libc::c_char;
                    !old_regstart.is_null();
                    old_regstart = 0 as *mut *const libc::c_char;
                    !old_regend.is_null();
                    old_regend = 0 as *mut *const libc::c_char;
                    !best_regstart.is_null();
                    best_regstart = 0 as *mut *const libc::c_char;
                    !best_regend.is_null();
                    best_regend = 0 as *mut *const libc::c_char;
                    !reg_info.is_null();
                    reg_info = 0 as *mut register_info_type;
                    !reg_dummy.is_null();
                    reg_dummy = 0 as *mut *const libc::c_char;
                    !reg_info_dummy.is_null();
                    reg_info_dummy = 0 as *mut register_info_type;
                    return -(2 as libc::c_int);
                }
            }
        }
        if (*regs).num_regs > 0 as libc::c_int as libc::c_uint {
            *((*regs).start).offset(0 as libc::c_int as isize) = pos;
            *((*regs).end).offset(0 as libc::c_int as isize) = if dend == end_match_1 {
                d.offset_from(string1) as libc::c_long as regoff_t
            } else {
                (d.offset_from(string2) as libc::c_long + size1 as libc::c_long)
                    as regoff_t
            };
        }
        mcnt = 1 as libc::c_int;
        while (mcnt as libc::c_uint as libc::c_ulong)
            < (if num_regs < (*regs).num_regs as libc::c_ulong {
                num_regs
            } else {
                (*regs).num_regs as libc::c_ulong
            })
        {
            if *regstart.offset(mcnt as isize)
                == &mut reg_unset_dummy as *mut libc::c_char
                || *regend.offset(mcnt as isize)
                    == &mut reg_unset_dummy as *mut libc::c_char
            {
                let ref mut fresh86 = *((*regs).end).offset(mcnt as isize);
                *fresh86 = -(1 as libc::c_int);
                *((*regs).start).offset(mcnt as isize) = *fresh86;
            } else {
                *((*regs).start).offset(mcnt as isize) = if size1 != 0
                    && string1 <= *regstart.offset(mcnt as isize)
                    && *regstart.offset(mcnt as isize) <= string1.offset(size1 as isize)
                {
                    (*regstart.offset(mcnt as isize)).offset_from(string1)
                        as libc::c_long as regoff_t
                } else {
                    ((*regstart.offset(mcnt as isize)).offset_from(string2)
                        as libc::c_long + size1 as libc::c_long) as regoff_t
                };
                *((*regs).end).offset(mcnt as isize) = if size1 != 0
                    && string1 <= *regend.offset(mcnt as isize)
                    && *regend.offset(mcnt as isize) <= string1.offset(size1 as isize)
                {
                    (*regend.offset(mcnt as isize)).offset_from(string1) as libc::c_long
                        as regoff_t
                } else {
                    ((*regend.offset(mcnt as isize)).offset_from(string2) as libc::c_long
                        + size1 as libc::c_long) as regoff_t
                };
            }
            mcnt += 1;
            mcnt;
        }
        mcnt = num_regs as libc::c_int;
        while (mcnt as libc::c_uint) < (*regs).num_regs {
            let ref mut fresh87 = *((*regs).end).offset(mcnt as isize);
            *fresh87 = -(1 as libc::c_int);
            *((*regs).start).offset(mcnt as isize) = *fresh87;
            mcnt += 1;
            mcnt;
        }
    }
    mcnt = d
        .offset(-(pos as isize))
        .offset_from(
            (if dend == end_match_1 {
                string1
            } else {
                string2.offset(-(size1 as isize))
            }),
        ) as libc::c_long as libc::c_int;
    !regstart.is_null();
    regstart = 0 as *mut *const libc::c_char;
    !regend.is_null();
    regend = 0 as *mut *const libc::c_char;
    !old_regstart.is_null();
    old_regstart = 0 as *mut *const libc::c_char;
    !old_regend.is_null();
    old_regend = 0 as *mut *const libc::c_char;
    !best_regstart.is_null();
    best_regstart = 0 as *mut *const libc::c_char;
    !best_regend.is_null();
    best_regend = 0 as *mut *const libc::c_char;
    !reg_info.is_null();
    reg_info = 0 as *mut register_info_type;
    !reg_dummy.is_null();
    reg_dummy = 0 as *mut *const libc::c_char;
    !reg_info_dummy.is_null();
    reg_info_dummy = 0 as *mut register_info_type;
    return mcnt;
}
unsafe extern "C" fn group_match_null_string_p(
    mut p: *mut *mut libc::c_uchar,
    mut end: *mut libc::c_uchar,
    mut reg_info: *mut register_info_type,
) -> boolean {
    let mut mcnt: libc::c_int = 0;
    let mut p1: *mut libc::c_uchar = (*p).offset(2 as libc::c_int as isize);
    while p1 < end {
        match re_opcode_t::from_libc_c_uint(*p1 as u32) as libc::c_uint {
            15 => {
                p1 = p1.offset(1);
                p1;
                mcnt = *p1 as libc::c_int & 0o377 as libc::c_int;
                mcnt
                    += (*p1.offset(1 as libc::c_int as isize) as libc::c_schar
                        as libc::c_int) << 8 as libc::c_int;
                p1 = p1.offset(2 as libc::c_int as isize);
                if mcnt >= 0 as libc::c_int {
                    while re_opcode_t::from_libc_c_uint(
                        *p1.offset((mcnt - 3 as libc::c_int) as isize) as u32,
                    ) as libc::c_uint
                        == re_opcode_t::jump_past_alt as libc::c_int as libc::c_uint
                    {
                        if alt_match_null_string_p(
                            p1,
                            p1
                                .offset(mcnt as isize)
                                .offset(-(3 as libc::c_int as isize)),
                            reg_info,
                        ) == 0
                        {
                            return 0 as libc::c_int as boolean;
                        }
                        p1 = p1.offset(mcnt as isize);
                        if re_opcode_t::from_libc_c_uint(*p1 as u32) as libc::c_uint
                            != re_opcode_t::on_failure_jump as libc::c_int
                                as libc::c_uint
                        {
                            break;
                        }
                        p1 = p1.offset(1);
                        p1;
                        mcnt = *p1 as libc::c_int & 0o377 as libc::c_int;
                        mcnt
                            += (*p1.offset(1 as libc::c_int as isize) as libc::c_schar
                                as libc::c_int) << 8 as libc::c_int;
                        p1 = p1.offset(2 as libc::c_int as isize);
                        if !(re_opcode_t::from_libc_c_uint(
                            *p1.offset((mcnt - 3 as libc::c_int) as isize) as u32,
                        ) as libc::c_uint
                            != re_opcode_t::jump_past_alt as libc::c_int as libc::c_uint)
                        {
                            continue;
                        }
                        p1 = p1.offset(-(3 as libc::c_int as isize));
                        break;
                    }
                    mcnt = *p1.offset(-(2 as libc::c_int as isize)) as libc::c_int
                        & 0o377 as libc::c_int;
                    mcnt
                        += (*p1
                            .offset(-(2 as libc::c_int as isize))
                            .offset(1 as libc::c_int as isize) as libc::c_schar
                            as libc::c_int) << 8 as libc::c_int;
                    if alt_match_null_string_p(p1, p1.offset(mcnt as isize), reg_info)
                        == 0
                    {
                        return 0 as libc::c_int as boolean;
                    }
                    p1 = p1.offset(mcnt as isize);
                }
            }
            7 => {
                *p = p1.offset(2 as libc::c_int as isize);
                return 1 as libc::c_int as boolean;
            }
            _ => {
                if common_op_match_null_string_p(&mut p1, end, reg_info) == 0 {
                    return 0 as libc::c_int as boolean;
                }
            }
        }
    }
    return 0 as libc::c_int as boolean;
}
unsafe extern "C" fn alt_match_null_string_p(
    mut p: *mut libc::c_uchar,
    mut end: *mut libc::c_uchar,
    mut reg_info: *mut register_info_type,
) -> boolean {
    let mut mcnt: libc::c_int = 0;
    let mut p1: *mut libc::c_uchar = p;
    while p1 < end {
        match re_opcode_t::from_libc_c_uint(*p1 as u32) as libc::c_uint {
            15 => {
                p1 = p1.offset(1);
                p1;
                mcnt = *p1 as libc::c_int & 0o377 as libc::c_int;
                mcnt
                    += (*p1.offset(1 as libc::c_int as isize) as libc::c_schar
                        as libc::c_int) << 8 as libc::c_int;
                p1 = p1.offset(2 as libc::c_int as isize);
                p1 = p1.offset(mcnt as isize);
            }
            _ => {
                if common_op_match_null_string_p(&mut p1, end, reg_info) == 0 {
                    return 0 as libc::c_int as boolean;
                }
            }
        }
    }
    return 1 as libc::c_int as boolean;
}
unsafe extern "C" fn common_op_match_null_string_p(
    mut p: *mut *mut libc::c_uchar,
    mut end: *mut libc::c_uchar,
    mut reg_info: *mut register_info_type,
) -> boolean {
    let mut mcnt: libc::c_int = 0;
    let mut ret: boolean = 0;
    let mut reg_no: libc::c_int = 0;
    let mut p1: *mut libc::c_uchar = *p;
    let mut current_block_40: u64;
    let fresh187 = p1;
    p1 = p1.offset(1);
    match re_opcode_t::from_libc_c_uint(*fresh187 as u32) as libc::c_uint {
        0 | 9 | 10 | 11 | 12 | 26 | 27 | 28 | 29 => {
            current_block_40 = 980989089337379490;
        }
        6 => {
            reg_no = *p1 as libc::c_int;
            ret = group_match_null_string_p(&mut p1, end, reg_info);
            if ((*reg_info.offset(reg_no as isize)).bits).match_null_string_p()
                as libc::c_int == 3 as libc::c_int
            {
                let ref mut fresh188 = (*reg_info.offset(reg_no as isize)).bits;
                (*fresh188).set_match_null_string_p(ret as libc::c_uint);
            }
            if ret == 0 {
                return 0 as libc::c_int as boolean;
            }
            current_block_40 = 980989089337379490;
        }
        13 => {
            mcnt = *p1 as libc::c_int & 0o377 as libc::c_int;
            mcnt
                += (*p1.offset(1 as libc::c_int as isize) as libc::c_schar
                    as libc::c_int) << 8 as libc::c_int;
            p1 = p1.offset(2 as libc::c_int as isize);
            if mcnt >= 0 as libc::c_int {
                p1 = p1.offset(mcnt as isize);
            } else {
                return 0 as libc::c_int as boolean
            }
            current_block_40 = 980989089337379490;
        }
        21 => {
            p1 = p1.offset(2 as libc::c_int as isize);
            mcnt = *p1 as libc::c_int & 0o377 as libc::c_int;
            mcnt
                += (*p1.offset(1 as libc::c_int as isize) as libc::c_schar
                    as libc::c_int) << 8 as libc::c_int;
            p1 = p1.offset(2 as libc::c_int as isize);
            if mcnt == 0 as libc::c_int {
                p1 = p1.offset(-(4 as libc::c_int as isize));
                mcnt = *p1 as libc::c_int & 0o377 as libc::c_int;
                mcnt
                    += (*p1.offset(1 as libc::c_int as isize) as libc::c_schar
                        as libc::c_int) << 8 as libc::c_int;
                p1 = p1.offset(2 as libc::c_int as isize);
                p1 = p1.offset(mcnt as isize);
            } else {
                return 0 as libc::c_int as boolean
            }
            current_block_40 = 980989089337379490;
        }
        8 => {
            if ((*reg_info.offset(*p1 as isize)).bits).match_null_string_p() == 0 {
                return 0 as libc::c_int as boolean;
            }
            current_block_40 = 980989089337379490;
        }
        23 => {
            p1 = p1.offset(4 as libc::c_int as isize);
            current_block_40 = 11709970386672276113;
        }
        _ => {
            current_block_40 = 11709970386672276113;
        }
    }
    match current_block_40 {
        11709970386672276113 => return 0 as libc::c_int as boolean,
        _ => {}
    }
    *p = p1;
    return 1 as libc::c_int as boolean;
}
unsafe extern "C" fn bcmp_translate(
    mut s1: *const libc::c_char,
    mut s2: *const libc::c_char,
    mut len: libc::c_int,
    mut translate: *mut libc::c_char,
) -> libc::c_int {
    let mut p1: *const libc::c_uchar = s1 as *const libc::c_uchar;
    let mut p2: *const libc::c_uchar = s2 as *const libc::c_uchar;
    while len != 0 {
        let fresh189 = p1;
        p1 = p1.offset(1);
        let fresh190 = p2;
        p2 = p2.offset(1);
        if *translate.offset(*fresh189 as isize) as libc::c_int
            != *translate.offset(*fresh190 as isize) as libc::c_int
        {
            return 1 as libc::c_int;
        }
        len -= 1;
        len;
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn re_compile_pattern(
    mut pattern: *const libc::c_char,
    mut length: size_t,
    mut bufp: *mut re_pattern_buffer,
) -> *const libc::c_char {
    let mut ret: reg_errcode_t = reg_errcode_t::REG_NOERROR;
    (*bufp).set_regs_allocated(0 as libc::c_int as libc::c_uint);
    (*bufp).set_no_sub(0 as libc::c_int as libc::c_uint);
    (*bufp).set_newline_anchor(1 as libc::c_int as libc::c_uint);
    ret = regex_compile(pattern, length, re_syntax_options, bufp);
    if ret as u64 == 0 {
        return 0 as *const libc::c_char;
    }
    return re_error_msgid[ret as libc::c_int as usize];
}
#[no_mangle]
pub unsafe extern "C" fn regcomp(
    mut preg: *mut regex_t,
    mut pattern: *const libc::c_char,
    mut cflags: libc::c_int,
) -> libc::c_int {
    let mut ret: reg_errcode_t = reg_errcode_t::REG_NOERROR;
    let mut syntax: reg_syntax_t = if cflags & 1 as libc::c_int != 0 {
        ((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int) << 1 as libc::c_int
            | ((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int
            | (((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int
            | (((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int
            | ((((((((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int
            | (((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int
            | ((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int
            | ((((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int
            | (((((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int
            | (((((((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int
            | (((((((((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int
    } else {
        ((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int) << 1 as libc::c_int
            | ((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int
            | (((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int
            | (((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int
            | ((((((((((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int
            | (1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int
    };
    (*preg).buffer = 0 as *mut libc::c_uchar;
    (*preg).allocated = 0 as libc::c_int as libc::c_ulong;
    (*preg).used = 0 as libc::c_int as libc::c_ulong;
    (*preg).fastmap = 0 as *mut libc::c_char;
    if cflags & (1 as libc::c_int) << 1 as libc::c_int != 0 {
        let mut i: libc::c_uint = 0;
        (*preg).translate = malloc(
            (256 as libc::c_int as libc::c_ulong)
                .wrapping_mul(::core::mem::size_of::<libc::c_char>() as libc::c_ulong),
        ) as *mut libc::c_char;
        if ((*preg).translate).is_null() {
            return reg_errcode_t::REG_ESPACE as libc::c_int;
        }
        i = 0 as libc::c_int as libc::c_uint;
        while i < 256 as libc::c_int as libc::c_uint {
            *((*preg).translate).offset(i as isize) = (if 1 as libc::c_int != 0
                && *(*__ctype_b_loc()).offset(i as libc::c_int as isize) as libc::c_int
                    & C2RustUnnamed_0::_ISupper as libc::c_int as libc::c_ushort
                        as libc::c_int != 0
            {
                ({
                    let mut __res: libc::c_int = 0;
                    if ::core::mem::size_of::<libc::c_uint>() as libc::c_ulong
                        > 1 as libc::c_int as libc::c_ulong
                    {
                        if 0 != 0 {
                            let mut __c: libc::c_int = i as libc::c_int;
                            __res = if __c < -(128 as libc::c_int)
                                || __c > 255 as libc::c_int
                            {
                                __c
                            } else {
                                *(*__ctype_tolower_loc()).offset(__c as isize)
                            };
                        } else {
                            __res = tolower(i as libc::c_int);
                        }
                    } else {
                        __res = *(*__ctype_tolower_loc())
                            .offset(i as libc::c_int as isize);
                    }
                    __res
                }) as libc::c_uint
            } else {
                i
            }) as libc::c_char;
            i = i.wrapping_add(1);
            i;
        }
    } else {
        (*preg).translate = 0 as *mut libc::c_char;
    }
    if cflags & ((1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int != 0 {
        syntax
            &= !(((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int);
        syntax
            |= ((((((((1 as libc::c_int as libc::c_ulong) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                << 1 as libc::c_int;
        (*preg).set_newline_anchor(1 as libc::c_int as libc::c_uint);
    } else {
        (*preg).set_newline_anchor(0 as libc::c_int as libc::c_uint);
    }
    (*preg)
        .set_no_sub(
            (cflags
                & (((1 as libc::c_int) << 1 as libc::c_int) << 1 as libc::c_int)
                    << 1 as libc::c_int != 0) as libc::c_int as libc::c_uint,
        );
    ret = regex_compile(pattern, strlen(pattern), syntax, preg);
    if ret as libc::c_uint == reg_errcode_t::REG_ERPAREN as libc::c_int as libc::c_uint {
        ret = reg_errcode_t::REG_EPAREN;
    }
    return ret as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn regexec(
    mut preg: *const regex_t,
    mut string: *const libc::c_char,
    mut nmatch: size_t,
    mut pmatch: *mut regmatch_t,
    mut eflags: libc::c_int,
) -> libc::c_int {
    let mut ret: libc::c_int = 0;
    let mut regs: re_registers = re_registers {
        num_regs: 0,
        start: 0 as *mut regoff_t,
        end: 0 as *mut regoff_t,
    };
    let mut private_preg: regex_t = regex_t {
        buffer: 0 as *mut libc::c_uchar,
        allocated: 0,
        used: 0,
        syntax: 0,
        fastmap: 0 as *mut libc::c_char,
        translate: 0 as *mut libc::c_char,
        re_nsub: 0,
        can_be_null_regs_allocated_fastmap_accurate_no_sub_not_bol_not_eol_newline_anchor: [0; 1],
        c2rust_padding: [0; 7],
    };
    let mut len: libc::c_int = strlen(string) as libc::c_int;
    let mut want_reg_info: boolean = ((*preg).no_sub() == 0
        && nmatch > 0 as libc::c_int as libc::c_ulong) as libc::c_int as boolean;
    private_preg = *preg;
    private_preg
        .set_not_bol((eflags & 1 as libc::c_int != 0) as libc::c_int as libc::c_uint);
    private_preg
        .set_not_eol(
            (eflags & (1 as libc::c_int) << 1 as libc::c_int != 0) as libc::c_int
                as libc::c_uint,
        );
    private_preg.set_regs_allocated(2 as libc::c_int as libc::c_uint);
    if want_reg_info != 0 {
        regs.num_regs = nmatch as libc::c_uint;
        regs.start = malloc(
            nmatch.wrapping_mul(::core::mem::size_of::<regoff_t>() as libc::c_ulong),
        ) as *mut regoff_t;
        regs.end = malloc(
            nmatch.wrapping_mul(::core::mem::size_of::<regoff_t>() as libc::c_ulong),
        ) as *mut regoff_t;
        if (regs.start).is_null() || (regs.end).is_null() {
            return reg_errcode_t::REG_NOMATCH as libc::c_int;
        }
    }
    ret = re_search(
        &mut private_preg,
        string,
        len,
        0 as libc::c_int,
        len,
        if want_reg_info as libc::c_int != 0 {
            &mut regs
        } else {
            0 as *mut re_registers
        },
    );
    if want_reg_info != 0 {
        if ret >= 0 as libc::c_int {
            let mut r: libc::c_uint = 0;
            r = 0 as libc::c_int as libc::c_uint;
            while (r as libc::c_ulong) < nmatch {
                (*pmatch.offset(r as isize)).rm_so = *(regs.start).offset(r as isize);
                (*pmatch.offset(r as isize)).rm_eo = *(regs.end).offset(r as isize);
                r = r.wrapping_add(1);
                r;
            }
        }
        free(regs.start as *mut libc::c_void);
        free(regs.end as *mut libc::c_void);
    }
    return if ret >= 0 as libc::c_int {
        reg_errcode_t::REG_NOERROR as libc::c_int
    } else {
        reg_errcode_t::REG_NOMATCH as libc::c_int
    };
}
#[no_mangle]
pub unsafe extern "C" fn regerror(
    mut errcode: libc::c_int,
    mut preg: *const regex_t,
    mut errbuf: *mut libc::c_char,
    mut errbuf_size: size_t,
) -> size_t {
    let mut msg: *const libc::c_char = 0 as *const libc::c_char;
    let mut msg_size: size_t = 0;
    if errcode < 0 as libc::c_int
        || errcode
            >= (::core::mem::size_of::<[*const libc::c_char; 17]>() as libc::c_ulong)
                .wrapping_div(
                    ::core::mem::size_of::<*const libc::c_char>() as libc::c_ulong,
                ) as libc::c_int
    {
        abort();
    }
    msg = re_error_msgid[errcode as usize];
    msg_size = (strlen(msg)).wrapping_add(1 as libc::c_int as libc::c_ulong);
    if errbuf_size != 0 as libc::c_int as libc::c_ulong {
        if msg_size > errbuf_size {
            strncpy(
                errbuf,
                msg,
                errbuf_size.wrapping_sub(1 as libc::c_int as libc::c_ulong),
            );
            *errbuf
                .offset(
                    errbuf_size.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize,
                ) = 0 as libc::c_int as libc::c_char;
        } else {
            strcpy(errbuf, msg);
        }
    }
    return msg_size;
}
#[no_mangle]
pub unsafe extern "C" fn regfree(mut preg: *mut regex_t) {
    if !((*preg).buffer).is_null() {
        free((*preg).buffer as *mut libc::c_void);
    }
    (*preg).buffer = 0 as *mut libc::c_uchar;
    (*preg).allocated = 0 as libc::c_int as libc::c_ulong;
    (*preg).used = 0 as libc::c_int as libc::c_ulong;
    if !((*preg).fastmap).is_null() {
        free((*preg).fastmap as *mut libc::c_void);
    }
    (*preg).fastmap = 0 as *mut libc::c_char;
    (*preg).set_fastmap_accurate(0 as libc::c_int as libc::c_uint);
    if !((*preg).translate).is_null() {
        free((*preg).translate as *mut libc::c_void);
    }
    (*preg).translate = 0 as *mut libc::c_char;
}