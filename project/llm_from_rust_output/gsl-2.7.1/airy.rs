use std::f64::consts::FRAC_PI_4;
use std::f64::consts::SQRT_2;
use std::f64::consts::PI;

#[derive(Debug, Clone, Copy)]
pub struct GslSfResult {
    pub val: f64,
    pub err: f64,
}

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u32)]
pub enum GslMode {
    Prec = 0,
}

#[derive(Debug, Clone, Copy)]
pub struct ChebSeries {
    pub c: &'static [f64],
    pub order: i32,
    pub a: f64,
    pub b: f64,
    pub order_sp: i32,
}

impl ChebSeries {
    pub fn eval_mode(&self, x: f64, mode: GslMode) -> GslSfResult {
        let eval_order = if mode == GslMode::Prec {
            self.order_sp
        } else {
            self.order
        };

        let y = (2.0 * x - self.a - self.b) / (self.b - self.a);
        let y2 = 2.0 * y;

        let mut d = 0.0;
        let mut dd = 0.0;

        for j in (1..=eval_order).rev() {
            let temp = d;
            d = y2 * d - dd + self.c[j as usize];
            dd = temp;
        }

        let val = y * d - dd + 0.5 * self.c[0];
        let err = 2.2204460492503131e-16 * val.abs() + self.c[eval_order as usize].abs();

        GslSfResult { val, err }
    }
}

static AM21_DATA: [f64; 37] = [
    0.0065809191761485,
    0.0023675984685722,
    0.0001324741670371,
    0.0000157600904043,
    0.0000027529702663,
    0.0000006102679017,
    0.0000001595088468,
    0.0000000471033947,
    0.0000000152933871,
    0.0000000053590722,
    0.0000000020000910,
    0.0000000007872292,
    0.0000000003243103,
    0.0000000001390106,
    0.0000000000617011,
    0.0000000000282491,
    0.0000000000132979,
    0.0000000000064188,
    0.0000000000031697,
    0.0000000000015981,
    0.0000000000008213,
    0.0000000000004296,
    0.0000000000002284,
    0.0000000000001232,
    0.0000000000000675,
    0.0000000000000374,
    0.0000000000000210,
    0.0000000000000119,
    0.0000000000000068,
    0.0000000000000039,
    0.0000000000000023,
    0.0000000000000013,
    0.0000000000000008,
    0.0000000000000005,
    0.0000000000000003,
    0.0000000000000001,
    0.0000000000000001,
];

static AM21_CS: ChebSeries = ChebSeries {
    c: &AM21_DATA,
    order: 36,
    a: -1.0,
    b: 1.0,
    order_sp: 20,
};

static ATH1_DATA: [f64; 36] = [
    -0.07125837815669365,
    -0.00590471979831451,
    -0.00012114544069499,
    -0.00000988608542270,
    -0.00000138084097352,
    -0.00000026142640172,
    -0.00000006050432589,
    -0.00000001618436223,
    -0.00000000483464911,
    -0.00000000157655272,
    -0.00000000055231518,
    -0.00000000020545441,
    -0.00000000008043412,
    -0.00000000003291252,
    -0.00000000001399875,
    -0.00000000000616151,
    -0.00000000000279614,
    -0.00000000000130428,
    -0.00000000000062373,
    -0.00000000000030512,
    -0.00000000000015239,
    -0.00000000000007758,
    -0.00000000000004020,
    -0.00000000000002117,
    -0.00000000000001132,
    -0.00000000000000614,
    -0.00000000000000337,
    -0.00000000000000188,
    -0.00000000000000105,
    -0.00000000000000060,
    -0.00000000000000034,
    -0.00000000000000020,
    -0.00000000000000011,
    -0.00000000000000007,
    -0.00000000000000004,
    -0.00000000000000002,
];

static ATH1_CS: ChebSeries = ChebSeries {
    c: &ATH1_DATA,
    order: 35,
    a: -1.0,
    b: 1.0,
    order_sp: 15,
};

static AM22_DATA: [f64; 33] = [
    -0.01562844480625341,
    0.00778336445239681,
    0.00086705777047718,
    0.00015696627315611,
    0.00003563962571432,
    0.00000924598335425,
    0.00000262110161850,
    0.00000079188221651,
    0.00000025104152792,
    0.00000008265223206,
    0.00000002805711662,
    0.00000000976821090,
    0.00000000347407923,
    0.00000000125828132,
    0.00000000046298826,
    0.00000000017272825,
    0.00000000006523192,
    0.00000000002490471,
    0.00000000000960156,
    0.00000000000373448,
    0.00000000000146417,
    0.00000000000057826,
    0.00000000000022991,
    0.00000000000009197,
    0.00000000000003700,
    0.00000000000001496,
    0.00000000000000608,
    0.00000000000000248,
    0.00000000000000101,
    0.00000000000000041,
    0.00000000000000017,
    0.00000000000000007,
    0.00000000000000002,
];

static AM22_CS: ChebSeries = ChebSeries {
    c: &AM22_DATA,
    order: 32,
    a: -1.0,
    b: 1.0,
    order_sp: 15,
};

static ATH2_DATA: [f64; 32] = [
    0.00440527345871877,
    -0.03042919452318455,
    -0.00138565328377179,
    -0.00018044439089549,
    -0.00003380847108327,
    -0.00000767818353522,
    -0.00000196783944371,
    -0.00000054837271158,
    -0.00000016254615505,
    -0.00000005053049981,
    -0.00000001631580701,
    -0.00000000543420411,
    -0.00000000185739855,
    -0.00000000064895120,
    -0.00000000023105948,
    -0.00000000008363282,
    -0.00000000003071196,
    -0.00000000001142367,
    -0.00000000000429811,
    -0.00000000000163389,
    -0.00000000000062693,
    -0.00000000000024260,
    -0.00000000000009461,
    -0.00000000000003716,
    -0.00000000000001469,
    -0.00000000000000584,
    -0.00000000000000233,
    -0.00000000000000093,
    -0.00000000000000037,
    -0.00000000000000015,
    -0.00000000000000006,
    -0.00000000000000002,
];

static ATH2_CS: ChebSeries = ChebSeries {
    c: &ATH2_DATA,
    order: 31,
    a: -1.0,
    b: 1.0,
    order_sp: 16,
};

fn airy_mod_phase(x: f64, mode: GslMode) -> Result<(GslSfResult, GslSfResult), &'static str> {
    let (result_m, result_p) = if x < -2.0 {
        let z = 16.0 / (x * x * x) + 1.0;
        (AM21_CS.eval_mode(z, mode), ATH1_CS.eval_mode(z, mode))
    } else if x <= -1.0 {
        let z = (16.0 / (x * x * x) + 9.0) / 7.0;
        (AM22_CS.eval_mode(z, mode), ATH2_CS.eval_mode(z, mode))
    } else {
        return Err("x is greater than 1.0");
    };

    let m = 0.3125 + result_m.val;
    let p = -0.625 + result_p.val;
    let sqx = (-x).sqrt();

    let mod_val = GslSfResult {
        val: (m / sqx).sqrt(),
        err: (m / sqx).sqrt() * (2.2204460492503131e-16 + (result_m.err / result_m.val).abs()),
    };

    let phase_val = GslSfResult {
        val: FRAC_PI_4 - x * sqx * p,
        err: (FRAC_PI_4 - x * sqx * p).abs() * (2.2204460492503131e-16 + (result_p.err / result_p.val).abs()),
    };

    Ok((mod_val, phase_val))
}

static AI_DATA_F: [f64; 9] = [
    -0.03797135849666999750,
    0.05919188853726363857,
    0.00098629280577279975,
    0.00000684884381907656,
    0.00000002594202596219,
    0.00000006176612774,
    0.00000000010092454,
    0.00000000000012014,
    0.00000000000000010,
];

static AIF_CS: ChebSeries = ChebSeries {
    c: &AI_DATA_F,
    order: 8,
    a: -1.0,
    b: 1.0,
    order_sp: 8,
};

static AI_DATA_G: [f64; 8] = [
    0.01815236558116127,
    0.02157256316601076,
    0.00025678356987483,
    0.00000142652141197,
    0.00000000457211492,
    0.00000000952517,
    0.00000000001392,
    0.00000000000001,
];

static AIG_CS: ChebSeries = ChebSeries {
    c: &AI_DATA_G,
    order: 7,
    a: -1.0,
    b: 1.0,
    order_sp: 7,
};

static DATA_BIF: [f64; 9] = [
    -0.01673021647198664948,
    0.10252335834249445610,
    0.00170830925073815165,
    0.00001186254546774468,
    0.00000004493290701779,
    0.00000010698207143,
    0.00000000017480643,
    0.00000000000020810,
    0.00000000000000018,
];

static BIF_CS: ChebSeries = ChebSeries {
    c: &DATA_BIF,
    order: 8,
    a: -1.0,
    b: 1.0,
    order_sp: 8,
};

static DATA_BIG: [f64; 8] = [
    0.02246622324857452,
    0.03736477545301955,
    0.00044476218957212,
    0.00000247080756363,
    0.00000000791913533,
    0.00000001649807,
    0.00000000002411,
    0.00000000000002,
];

static BIG_CS: ChebSeries = ChebSeries {
    c: &DATA_BIG,
    order: 7,
    a: -1.0,
    b: 1.0,
    order_sp: 7,
};

static DATA_BIF2: [f64; 10] = [
    0.0998457269381604100,
    0.4786249778630055380,
    0.0251552119604330118,
    0.0005820693885232645,
    0.0000074997659644377,
    0.0000000613460287034,
    0.0000000003462753885,
    0.0000000000014288910,
    0.0000000000044962,
    0.0000000000000111,
];

static BIF2_CS: ChebSeries = ChebSeries {
    c: &DATA_BIF2,
    order: 9,
    a: -1.0,
    b: 1.0,
    order_sp: 9,
};

static DATA_BIG2: [f64; 10] = [
    0.033305662145514340,
    0.161309215123197068,
    0.0063190073096134286,
    0.0001187904568162517,
    0.0000013045345886200,
    0.0000000093741259955,
    0.0000000000474580188,
    0.0000000000001783107,
    0.0000000000000005167,
    0.0000000000000000011,
];

static BIG2_CS: ChebSeries = ChebSeries {
    c: &DATA_BIG2,
    order: 9,
    a: -1.0,
    b: 1.0,
    order_sp: 9,
};

static DATA_AIP: [f64; 36] = [
    -0.0187519297793867540198,
    -0.0091443848250055004725,
    0.0009010457337825074652,
    -0.0001394184127221491507,
    0.0000273815815785209370,
    -0.0000062750421119959424,
    0.0000016064844184831521,
    -0.0000004476392158510354,
    0.0000001334635874651668,
    -0.0000000420735334263215,
    0.0000000139021990246364,
    -0.0000000047831848068048,
    0.0000000017047897907465,
    -0.0000000006268389576018,
    0.0000000002369824276612,
    -0.0000000000918641139267,
    0.0000000000364278543037,
    -0.0000000000147475551725,
    0.0000000000060851006556,
    -0.0000000000025552772234,
    0.0000000000010906187250,
    -0.0000000000004725870319,
    0.0000000000002076969064,
    -0.0000000000000924976214,
    0.0000000000000417096723,
    -0.0000000000000190299093,
    0.0000000000000087790676,
    -0.0000000000000040927557,
    0.0000000000000019271068,
    -0.0000000000000009160199,
    0.0000000000000004393567,
    -0.0000000000000002125503,
    0.0000000000000001036735,
    -0.0000000000000000509642,
    0.0000000000000000252377,
    -0.0000000000000000125793,
];

static AIP_CS: ChebSeries = ChebSeries {
    c: &DATA_AIP,
    order: 35,
    a: -1.0,
    b: 1.0,
    order_sp: 17,
};

static DATA_BIP: [f64; 24] = [
    -0.08322047477943447,
    0.01146118927371174,
    0.00042896440718911,
    -0.00014906639379950,
    -0.00001307659726787,
    0.00000632759839610,
    -0.00000042226696982,
    -0.00000019147186298,
    0.00000006453106284,
    -0.00000000784485467,
    -0.00000000096077216,
    