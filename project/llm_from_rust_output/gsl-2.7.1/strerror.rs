#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(i32)]
pub enum GslError {
    Success = 0,
    Failure = -1,
    Continue = -2,
    Domain = 1,
    Range = 2,
    Fault = 3,
    Invalid = 4,
    Failed = 5,
    Factor = 6,
    Sanity = 7,
    NoMem = 8,
    BadFunc = 9,
    Runaway = 10,
    MaxIter = 11,
    ZeroDiv = 12,
    BadTol = 13,
    Tol = 14,
    Underflow = 15,
    Overflow = 16,
    Loss = 17,
    Round = 18,
    BadLen = 19,
    NotSquare = 20,
    Singularity = 21,
    Diverge = 22,
    Unsupported = 23,
    Unimplemented = 24,
    Cache = 25,
    Table = 26,
    NoProgress = 27,
    NoProgressJ = 28,
    TolF = 29,
    TolX = 30,
    TolG = 31,
    Eof = 32,
    Unknown,
}

impl From<i32> for GslError {
    fn from(code: i32) -> Self {
        match code {
            0 => GslError::Success,
            -1 => GslError::Failure,
            -2 => GslError::Continue,
            1 => GslError::Domain,
            2 => GslError::Range,
            3 => GslError::Fault,
            4 => GslError::Invalid,
            5 => GslError::Failed,
            6 => GslError::Factor,
            7 => GslError::Sanity,
            8 => GslError::NoMem,
            9 => GslError::BadFunc,
            10 => GslError::Runaway,
            11 => GslError::MaxIter,
            12 => GslError::ZeroDiv,
            13 => GslError::BadTol,
            14 => GslError::Tol,
            15 => GslError::Underflow,
            16 => GslError::Overflow,
            17 => GslError::Loss,
            18 => GslError::Round,
            19 => GslError::BadLen,
            20 => GslError::NotSquare,
            21 => GslError::Singularity,
            22 => GslError::Diverge,
            23 => GslError::Unsupported,
            24 => GslError::Unimplemented,
            25 => GslError::Cache,
            26 => GslError::Table,
            27 => GslError::NoProgress,
            28 => GslError::NoProgressJ,
            29 => GslError::TolF,
            30 => GslError::TolX,
            31 => GslError::TolG,
            32 => GslError::Eof,
            _ => GslError::Unknown,
        }
    }
}

impl GslError {
    pub fn as_str(&self) -> &'static str {
        match self {
            GslError::Success => "success",
            GslError::Failure => "failure",
            GslError::Continue => "the iteration has not converged yet",
            GslError::Domain => "input domain error",
            GslError::Range => "output range error",
            GslError::Fault => "invalid pointer",
            GslError::Invalid => "invalid argument supplied by user",
            GslError::Failed => "generic failure",
            GslError::Factor => "factorization failed",
            GslError::Sanity => "sanity check failed - shouldn't happen",
            GslError::NoMem => "malloc failed",
            GslError::BadFunc => "problem with user-supplied function",
            GslError::Runaway => "iterative process is out of control",
            GslError::MaxIter => "exceeded max number of iterations",
            GslError::ZeroDiv => "tried to divide by zero",
            GslError::BadTol => "specified tolerance is invalid or theoretically unattainable",
            GslError::Tol => "failed to reach the specified tolerance",
            GslError::Underflow => "underflow",
            GslError::Overflow => "overflow",
            GslError::Loss => "loss of accuracy",
            GslError::Round => "roundoff error",
            GslError::BadLen => "matrix/vector sizes are not conformant",
            GslError::NotSquare => "matrix not square",
            GslError::Singularity => "singularity or extremely bad function behavior detected",
            GslError::Diverge => "integral or series is divergent",
            GslError::Unsupported => "the required feature is not supported by this hardware platform",
            GslError::Unimplemented => "the requested feature is not (yet) implemented",
            GslError::Cache => "cache limit exceeded",
            GslError::Table => "table limit exceeded",
            GslError::NoProgress => "iteration is not making progress towards solution",
            GslError::NoProgressJ => "jacobian evaluations are not improving the solution",
            GslError::TolF => "cannot reach the specified tolerance in F",
            GslError::TolX => "cannot reach the specified tolerance in X",
            GslError::TolG => "cannot reach the specified tolerance in gradient",
            GslError::Eof => "end of file",
            GslError::Unknown => "unknown error code",
        }
    }
}

#[no_mangle]
pub extern "C" fn gsl_strerror(gsl_errno: i32) -> *const libc::c_char {
    GslError::from(gsl_errno).as_str().as_ptr() as *const libc::c_char
}