#[derive(Copy, Clone)]
pub struct EncodingTable {
    pub code: i32,
    pub character: Option<&'static str>,
}

pub type AFMEncodingTable = EncodingTable;

pub const AFM_88593_ENCODING: [AFMEncodingTable; 257] = [
    EncodingTable { code: 0x00, character: None },
    EncodingTable { code: 0x01, character: None },
    EncodingTable { code: 0x02, character: None },
    EncodingTable { code: 0x03, character: None },
    EncodingTable { code: 0x04, character: None },
    EncodingTable { code: 0x05, character: None },
    EncodingTable { code: 0x06, character: None },
    EncodingTable { code: 0x07, character: None },
    EncodingTable { code: 0x08, character: None },
    EncodingTable { code: 0x09, character: None },
    EncodingTable { code: 0x0A, character: None },
    EncodingTable { code: 0x0B, character: None },
    EncodingTable { code: 0x0C, character: None },
    EncodingTable { code: 0x0D, character: None },
    EncodingTable { code: 0x0E, character: None },
    EncodingTable { code: 0x0F, character: None },
    EncodingTable { code: 0x10, character: None },
    EncodingTable { code: 0x11, character: None },
    EncodingTable { code: 0x12, character: None },
    EncodingTable { code: 0x13, character: None },
    EncodingTable { code: 0x14, character: None },
    EncodingTable { code: 0x15, character: None },
    EncodingTable { code: 0x16, character: None },
    EncodingTable { code: 0x17, character: None },
    EncodingTable { code: 0x18, character: None },
    EncodingTable { code: 0x19, character: None },
    EncodingTable { code: 0x1A, character: None },
    EncodingTable { code: 0x1B, character: None },
    EncodingTable { code: 0x1C, character: None },
    EncodingTable { code: 0x1D, character: None },
    EncodingTable { code: 0x1E, character: None },
    EncodingTable { code: 0x1F, character: None },
    EncodingTable { code: 0x20, character: Some("space") },
    EncodingTable { code: 0x21, character: Some("exclam") },
    EncodingTable { code: 0x22, character: Some("quotedbl") },
    EncodingTable { code: 0x23, character: Some("numbersign") },
    EncodingTable { code: 0x24, character: Some("dollar") },
    EncodingTable { code: 0x25, character: Some("percent") },
    EncodingTable { code: 0x26, character: Some("ampersand") },
    EncodingTable { code: 0x27, character: Some("quoteright") },
    EncodingTable { code: 0x28, character: Some("parenleft") },
    EncodingTable { code: 0x29, character: Some("parenright") },
    EncodingTable { code: 0x2A, character: Some("asterisk") },
    EncodingTable { code: 0x2B, character: Some("plus") },
    EncodingTable { code: 0x2C, character: Some("comma") },
    EncodingTable { code: 0x2D, character: Some("hyphen") },
    EncodingTable { code: 0x2E, character: Some("period") },
    EncodingTable { code: 0x2F, character: Some("slash") },
    EncodingTable { code: 0x30, character: Some("zero") },
    EncodingTable { code: 0x31, character: Some("one") },
    EncodingTable { code: 0x32, character: Some("two") },
    EncodingTable { code: 0x33, character: Some("three") },
    EncodingTable { code: 0x34, character: Some("four") },
    EncodingTable { code: 0x35, character: Some("five") },
    EncodingTable { code: 0x36, character: Some("six") },
    EncodingTable { code: 0x37, character: Some("seven") },
    EncodingTable { code: 0x38, character: Some("eight") },
    EncodingTable { code: 0x39, character: Some("nine") },
    EncodingTable { code: 0x3A, character: Some("colon") },
    EncodingTable { code: 0x3B, character: Some("semicolon") },
    EncodingTable { code: 0x3C, character: Some("less") },
    EncodingTable { code: 0x3D, character: Some("equal") },
    EncodingTable { code: 0x3E, character: Some("greater") },
    EncodingTable { code: 0x3F, character: Some("question") },
    EncodingTable { code: 0x40, character: Some("at") },
    EncodingTable { code: 0x41, character: Some("A") },
    EncodingTable { code: 0x42, character: Some("B") },
    EncodingTable { code: 0x43, character: Some("C") },
    EncodingTable { code: 0x44, character: Some("D") },
    EncodingTable { code: 0x45, character: Some("E") },
    EncodingTable { code: 0x46, character: Some("F") },
    EncodingTable { code: 0x47, character: Some("G") },
    EncodingTable { code: 0x48, character: Some("H") },
    EncodingTable { code: 0x49, character: Some("I") },
    EncodingTable { code: 0x4A, character: Some("J") },
    EncodingTable { code: 0x4B, character: Some("K") },
    EncodingTable { code: 0x4C, character: Some("L") },
    EncodingTable { code: 0x4D, character: Some("M") },
    EncodingTable { code: 0x4E, character: Some("N") },
    EncodingTable { code: 0x4F, character: Some("O") },
    EncodingTable { code: 0x50, character: Some("P") },
    EncodingTable { code: 0x51, character: Some("Q") },
    EncodingTable { code: 0x52, character: Some("R") },
    EncodingTable { code: 0x53, character: Some("S") },
    EncodingTable { code: 0x54, character: Some("T") },
    EncodingTable { code: 0x55, character: Some("U") },
    EncodingTable { code: 0x56, character: Some("V") },
    EncodingTable { code: 0x57, character: Some("W") },
    EncodingTable { code: 0x58, character: Some("X") },
    EncodingTable { code: 0x59, character: Some("Y") },
    EncodingTable { code: 0x5A, character: Some("Z") },
    EncodingTable { code: 0x5B, character: Some("bracketleft") },
    EncodingTable { code: 0x5C, character: Some("backslash") },
    EncodingTable { code: 0x5D, character: Some("bracketright") },
    EncodingTable { code: 0x5E, character: Some("asciicircum") },
    EncodingTable { code: 0x5F, character: Some("underscore") },
    EncodingTable { code: 0x60, character: Some("quoteleft") },
    EncodingTable { code: 0x61, character: Some("a") },
    EncodingTable { code: 0x62, character: Some("b") },
    EncodingTable { code: 0x63, character: Some("c") },
    EncodingTable { code: 0x64, character: Some("d") },
    EncodingTable { code: 0x65, character: Some("e") },
    EncodingTable { code: 0x66, character: Some("f") },
    EncodingTable { code: 0x67, character: Some("g") },
    EncodingTable { code: 0x68, character: Some("h") },
    EncodingTable { code: 0x69, character: Some("i") },
    EncodingTable { code: 0x6A, character: Some("j") },
    EncodingTable { code: 0x6B, character: Some("k") },
    EncodingTable { code: 0x6C, character: Some("l") },
    EncodingTable { code: 0x6D, character: Some("m") },
    EncodingTable { code: 0x6E, character: Some("n") },
    EncodingTable { code: 0x6F, character: Some("o") },
    EncodingTable { code: 0x70, character: Some("p") },
    EncodingTable { code: 0x71, character: Some("q") },
    EncodingTable { code: 0x72, character: Some("r") },
    EncodingTable { code: 0x73, character: Some("s") },
    EncodingTable { code: 0x74, character: Some("t") },
    EncodingTable { code: 0x75, character: Some("u") },
    EncodingTable { code: 0x76, character: Some("v") },
    EncodingTable { code: 0x77, character: Some("w") },
    EncodingTable { code: 0x78, character: Some("x") },
    EncodingTable { code: 0x79, character: Some("y") },
    EncodingTable { code: 0x7A, character: Some("z") },
    EncodingTable { code: 0x7B, character: Some("braceleft") },
    EncodingTable { code: 0x7C, character: Some("bar") },
    EncodingTable { code: 0x7D, character: Some("braceright") },
    EncodingTable { code: 0x7E, character: Some("tilde") },
    EncodingTable { code: 0x7F, character: None },
    EncodingTable { code: 0x80, character: None },
    EncodingTable { code: 0x81, character: None },
    EncodingTable { code: 0x82, character: None },
    EncodingTable { code: 0x83, character: None },
    EncodingTable { code: 0x84, character: None },
    EncodingTable { code: 0x85, character: None },
    EncodingTable { code: 0x86, character: None },
    EncodingTable { code: 0x87, character: None },
    EncodingTable { code: 0x88, character: None },
    EncodingTable { code: 0x89, character: None },
    EncodingTable { code: 0x8A, character: None },
    EncodingTable { code: 0x8B, character: None },
    EncodingTable { code: 0x8C, character: None },
    EncodingTable { code: 0x8D, character: None },
    EncodingTable { code: 0x8E, character: None },
    EncodingTable { code: 0x8F, character: None },
    EncodingTable { code: 0x90, character: None },
    EncodingTable { code: 0x91, character: None },
    EncodingTable { code: 0x92, character: None },
    EncodingTable { code: 0x93, character: None },
    EncodingTable { code: 0x94, character: None },
    EncodingTable { code: 0x95, character: None },
    EncodingTable { code: 0x96, character: None },
    EncodingTable { code: 0x97, character: None },
    EncodingTable { code: 0x98, character: None },
    EncodingTable { code: 0x99, character: None },
    EncodingTable { code: 0x9A, character: None },
    EncodingTable { code: 0x9B, character: None },
    EncodingTable { code: 0x9C, character: None },
    EncodingTable { code: 0x9D, character: None },
    EncodingTable { code: 0x9E, character: None },
    EncodingTable { code: 0x9F, character: None },
    EncodingTable { code: 0xA0, character: Some("space") },
    EncodingTable { code: 0xA1, character: Some("Hstroke") },
    EncodingTable { code: 0xA2, character: Some("breve") },
    EncodingTable { code: 0xA3, character: Some("sterling") },
    EncodingTable { code: 0xA4, character: Some("currency") },
    EncodingTable { code: 0xA5, character: Some("yen") },
    EncodingTable { code: 0xA6, character: Some("Hcircumflex") },
    EncodingTable { code: 0xA7, character: Some("section") },
    EncodingTable { code: 0xA8, character: Some("dieresis") },
    EncodingTable { code: 0xA9, character: Some("Idot") },
    EncodingTable { code: 0xAA, character: Some("Scedilla") },
    EncodingTable { code: 0xAB, character: Some("Gbreve") },
    EncodingTable { code: 0xAC, character: Some("Jcircumflex") },
    EncodingTable { code: 0xAD, character: Some("hyphen") },
    EncodingTable { code: 0xAE, character: Some("registered") },
    EncodingTable { code: 0xAF, character: Some("Zdot") },
    EncodingTable { code: 0xB0, character: Some("degree") },
    EncodingTable { code: 0xB1, character: Some("hstroke") },
    EncodingTable { code: 0xB2, character: Some("twosuperior") },
    EncodingTable { code: 0xB3, character: Some("threesuperior") },
    EncodingTable { code: 0xB4, character: Some("acute") },
    EncodingTable { code: 0xB5, character: Some("mu") },
    EncodingTable { code: 0xB6, character: Some("hcircumflex") },
    EncodingTable { code: 0xB7, character: Some("bullet") },
    EncodingTable { code: 0xB8, character: Some("cedilla") },
    EncodingTable { code: 0xB9, character: Some("dotlessi") },
    EncodingTable { code: 0xBA, character: Some("scedilla") },
    EncodingTable { code: 0xBB, character: Some("gbreve") },
    EncodingTable { code: 0xBC, character: Some("jcircumflex") },
    EncodingTable { code: 0xBD, character: Some("onehalf") },
    EncodingTable { code: 0xBE, character: Some("threequarters") },
    EncodingTable { code: 0xBF, character: Some("zdot") },
    EncodingTable { code: 0xC0, character: Some("Agrave") },
    EncodingTable { code: 0xC1, character: Some("Aacute") },
    EncodingTable { code: 0xC2, character: Some("Acircumflex") },
    EncodingTable { code: 0xC3, character: Some("Atilde") },
    EncodingTable { code: 0xC4, character: Some("Adieresis") },
    EncodingTable { code: 0xC5, character: Some("Cdot") },
    EncodingTable { code: 0xC6, character: Some("Ccircumflex") },
    EncodingTable { code: 0xC7, character: Some("Ccedilla") },
    EncodingTable { code: 0xC8, character: Some("Egrave") },
    EncodingTable { code: 0xC9, character: Some("Eacute") },
    EncodingTable { code: 0xCA, character: Some("Ecircumflex") },
    EncodingTable { code: 0xCB, character: Some("Edieresis") },
    EncodingTable { code: 0xCC, character: Some("Igrave") },
    EncodingTable { code: 0xCD, character: Some("Iacute") },
    EncodingTable { code: 0xCE, character: Some("Icircumflex") },
    EncodingTable { code: 0xCF, character: Some("Idieresis") },
    EncodingTable { code: 0xD0, character: Some("Eth") },
    EncodingTable { code: 0xD1, character: Some("Ntilde") },
    EncodingTable { code: 0xD2, character: Some("Ograve") },
    EncodingTable { code: 0xD3, character: Some("Oacute") },
    EncodingTable { code: 0xD4, character: Some("Ocircumflex") },
    EncodingTable { code: 0xD5, character: Some("Gdot") },
    EncodingTable { code: 0xD6, character: Some("Odieresis") },
    EncodingTable { code: 0xD7, character: Some("multiply") },
    EncodingTable { code: 0xD8, character: Some("Gcircumflex") },
    EncodingTable { code: 0xD9, character: Some("Ugrave") },
    EncodingTable { code: 0xDA, character: Some("Uacute") },
    EncodingTable { code: 0xDB, character: Some("Ucircumflex") },
    EncodingTable { code: 0xDC, character: Some("Udieresis") },
    EncodingTable { code: 0xDD, character: Some("Ubreve") },
    EncodingTable { code: 0xDE, character: Some("Scircumflex") },
    EncodingTable { code: 0xDF, character: Some("germandbls") },
    EncodingTable { code: